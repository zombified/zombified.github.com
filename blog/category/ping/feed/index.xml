<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>happy bubble</title>
    <link>http://zombified.github.com/blog</link>
    <description>Joel Kleier's blog about anything.</description>
    <pubDate>Sat, 25 Feb 2012 03:50:14 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Ping.5</title>
      <link>http://zombified.github.com/blog/2011/10/11/ping.5</link>
      <pubDate>Tue, 11 Oct 2011 00:00:00 CDT</pubDate>
      <category><![CDATA[Ping]]></category>
      <category><![CDATA[gamedev]]></category>
      <category><![CDATA[html5]]></category>
      <guid isPermaLink="true">http://zombified.github.com/blog/2011/10/11/ping.5</guid>
      <description>Ping.5</description>
      <content:encoded><![CDATA[<p>I've uploaded a semi playable version, <a href="/projects/ping/">play it here</a>!</p>
<p>I'm definitely not done with it, I still have a start screen, pause screen, win/loss screen, better AI, font tweaks, game play tweaks, and a lot of testing to do.</p>
<p>However, I want to move onto "Blocks of Desctruction 2", a break-out like game, which was originally going to be a follow-up to my tetris like game, <a href="/projects/bd/bd.html">Blocks of Destruction</a>.</p>
<p>I started experimenting with various platforms and used Pong as a problem to solve. My intention was never to create a full featured pong game, all I wanted was an easy(ish) problem to solve while tinkering!</p>
<p>Ultimately, I need to stop tinkering and experimenting. So now <a href="/projects/ping/">Ping</a> will be put on hold, perhaps indefinitely, and I will start working on "Blocks of Descruction 2".</p>
<p>I will be posting something each and every day that I work on the game, so, stay tuned imaginary internet people!</p>]]></content:encoded>
    </item>
    <item>
      <title>Ping.4</title>
      <link>http://zombified.github.com/blog/2011/09/30/ping.4</link>
      <pubDate>Fri, 30 Sep 2011 00:00:00 CDT</pubDate>
      <category><![CDATA[Ping]]></category>
      <category><![CDATA[audio]]></category>
      <category><![CDATA[gamedev]]></category>
      <category><![CDATA[html5]]></category>
      <guid isPermaLink="true">http://zombified.github.com/blog/2011/09/30/ping.4</guid>
      <description>Ping.4</description>
      <content:encoded><![CDATA[<p>Switching tactics on creating this lovely Pong-like game, I present you with a possible (partial) solution to the audio woes of the Audio spec for "HTML5".</p>
<p>Found at <a href="http://www.storiesinflight.com/html5/audio.html">Stories in Flight</a>, the solution is basically to pre-load your sounds, then to load each sound into a new audio object (channel) every time you want to play a sound. This method rely's on the browser caching the audio to not perform multiple requests for the audio source from the server. It's not perfect, but I think it's more than sufficient for my current needs.</p>]]></content:encoded>
    </item>
    <item>
      <title>Ping.3</title>
      <link>http://zombified.github.com/blog/2011/07/13/ping.3</link>
      <pubDate>Wed, 13 Jul 2011 20:00:00 CDT</pubDate>
      <category><![CDATA[Ping]]></category>
      <category><![CDATA[android]]></category>
      <category><![CDATA[gamedev]]></category>
      <guid isPermaLink="true">http://zombified.github.com/blog/2011/07/13/ping.3</guid>
      <description>Ping.3</description>
      <content:encoded><![CDATA[<p>It's been a few weeks since my last post, and I have progressed a little on the project, but not in the last week or so.</p>
<p>Why is development going so slowly? I think it's mostly because of limited time combined with needing to learn a new set of tools. I'm definitely seeing some of the wisdom behind "use what you know, even if it's not 'cool' and new", especially for a side project that you just want to see complete.</p>
<p>Currently I have the ball bouncing around on the screen, and a paddle that responds to touch. The paddle and ball don't interact yet, and there's definitely no AI, scoring, sound, or polish yet.</p>
<p>I think for my next project I'll be using HTML5/Canvas/JS, then embedding the code into an APK. Though, that method has issues too, so I may change my mind again :)</p>]]></content:encoded>
    </item>
    <item>
      <title>Ping.2</title>
      <link>http://zombified.github.com/blog/2011/06/21/ping.2</link>
      <pubDate>Tue, 21 Jun 2011 20:00:00 CDT</pubDate>
      <category><![CDATA[Ping]]></category>
      <category><![CDATA[android]]></category>
      <category><![CDATA[gamedev]]></category>
      <guid isPermaLink="true">http://zombified.github.com/blog/2011/06/21/ping.2</guid>
      <description>Ping.2</description>
      <content:encoded><![CDATA[<p>After I went through the <a href="http://developer.android.com/sdk/index.html">documentation</a> for installing the SDK, creating a 'Hello, World' application and publishing the result to a virtual device, and to my actual dev phone, I started putting together an absolutely bare-bones application. It's mostly the <a href="http://developer.android.com/resources/articles/glsurfaceview.html">GLSurfaceView example</a>, with a few modifications.</p>
<p>You can view code on my <a href="http://bitbucket.org/jkleier">bitbucket</a> site, the relevant revision of Ping is <a href="https://bitbucket.org/jkleier/ping/src/4094ae4e83ca/">4094ae4e83ca</a>.</p>
<p>I did add a LICENSE, but more for future development than anything that's in the repo at revision 4094ae4e83ca.</p>
<p>Next up: input! Technically, I'm already handling input a little, but it's not configurable!</p>]]></content:encoded>
    </item>
    <item>
      <title>Ping.1</title>
      <link>http://zombified.github.com/blog/2011/06/21/ping.1</link>
      <pubDate>Tue, 21 Jun 2011 18:00:00 CDT</pubDate>
      <category><![CDATA[Ping]]></category>
      <category><![CDATA[android]]></category>
      <category><![CDATA[gamedev]]></category>
      <guid isPermaLink="true">http://zombified.github.com/blog/2011/06/21/ping.1</guid>
      <description>Ping.1</description>
      <content:encoded><![CDATA[<p>I've decided that it would be interesting to make a few games and put them out on the Android Market. Nothing fancy, just some fun little arcade games. I'm not planning on porting these games to other systems either, so I can focus on using the Java and the Android SDK. I'm also specifically targetting phones, no tablets or TV's, etc. I'm also only targetting devices that have Android 2.x on them, at least for now.</p>
<p>The first game is going to be called 'Ping' -- not really all that original, but it will suffice. It is going to be a 'Pong' clone, and will not have any gameplay elements other than the original. It's just 2 paddles (AI vs Human), 2 'goals', 2 walls, 1 ball, and a score.</p>
<p>My plan is to make the game as polished as I can -- I want smooth animations, crisp graphics, and as few bugs as possible.</p>
<p>My plan is as follows:</p>
<ol>
<li>Install and prep Android SDK</li>
<li>Compile sample 'hello world' app and push it to my (dev) phone to make sure everything works</li>
<li>Create a bare-bones app that doesn't do anything except initialize a drawing surface of some kind</li>
<li>Build on the previous app to add input -- input should be reconfigureable by the user (different phones have different inputs). There should be an entirely touch input method.</li>
<li>Build on the previous app to add a background image -- should be reconfigurable by the user</li>
<li>Build on the previous app to add bouncing ball -- there should be no goals yet</li>
<li>Build on the previous app to add 2 paddles -- player should control one of them (which one should be configurable by user)</li>
<li>Build on the previous app to add ball physics to the paddles -- IE, the ball bounces off the paddles</li>
<li>Build on the previous app to add a score-board to the screen</li>
<li>Build on the previous app to remove 2 walls and keep score -- this means tracking when the ball leaves the field, performing a score increment, and reseting the ball</li>
<li>Build on the previous app to make the non-player paddle an ai -- the ai should be configurable as 'easy', 'medium', 'hard', 'impossible'</li>
<li>Clean up the app</li>
<li>Create webpage for it</li>
<li>Publish to Android Market</li>
</ol>
<p>Definitely not comprhensive, but a good framework for me to work within. I've already done steps 1 and 2. My next entry will be about step 3, creating a bare-bones app that doesn't do anything except initialize a drawing surface of some kind.</p>]]></content:encoded>
    </item>
  </channel>
</rss>
