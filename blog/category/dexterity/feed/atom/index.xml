<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">happy bubble</title>
  <subtitle type="text">Joel Kleier's blog about anything.</subtitle>

  <updated>2012-04-28T15:08:38Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://zombified.github.com/blog" />
  <id>http://zombified.github.com/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://zombified.github.com/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://zombified.github.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Creating a Dexterity Type with Dynamic Fields]]></title>
    <link rel="alternate" type="text/html" href="http://zombified.github.com/blog/2012/04/27/creating-a-dexterity-type-with-dynamic-fields" />
    <id>http://zombified.github.com/blog/2012/04/27/creating-a-dexterity-type-with-dynamic-fields</id>
    <updated>2012-04-27T00:00:00Z</updated>
    <published>2012-04-27T00:00:00Z</published>
    <category scheme="http://zombified.github.com/blog" term="dexterity" />
    <category scheme="http://zombified.github.com/blog" term="plone" />
    <summary type="html"><![CDATA[Creating a Dexterity Type with Dynamic Fields]]></summary>
    <content type="html" xml:base="http://zombified.github.com/blog/2012/04/27/creating-a-dexterity-type-with-dynamic-fields"><![CDATA[<p>Currently I'm working on a product to manage events (<a href="https://github.com/zombified/collective.eventmanager">collective.eventmanager</a>) for <a href="http://wildcardcorp.com/">Wildcard Corp.</a>. This event manager requires that people register for events -- but each event's registration form may contain different fields.</p>
<p>So, working with <a href="http://www.nathanvangheem.com/">Nathan Van Gheem</a>, we figured out a way to make a dexterity type read in a list of field descriptions at runtime, then generate normal add and edit forms.</p>
<p>I have to say, though, that Nathan did most of the figuring -- I was definitely going off on unworkable paths.</p>
<p>Anyway, it turns out it's really quite simple.</p>
<p>The meat of it is in <a href="https://github.com/zombified/collective.eventmanager/blob/cb28455a7e89fa0ed2821314a8e57a55414230b9/collective/eventmanager/registration.py">registration.py</a>.</p>
<p>The <em>IRegistration</em> interface defines a few fields that will always be associated with a registration item, and is a regular interface used to define a zope schema for use with dexterity.</p>
<p>To add other fields dynamically, the Edit and Add forms need to be customized, as seen with the <em>EditForm</em> and <em>AddForm</em> classes. In each of the classes, we override the <em>updateFields</em> method, but the call to the <em>addDynamicFields</em> method does most of the work:</p>
<pre><code>def addDynamicFields(form, reg_fields):
    for fielddata in reg_fields:
        field = getattr(schema, fielddata['fieldtype'])(
                    title=unicode(fielddata['name']),
                    required=fielddata['required'])
        field.__name__ = str(fielddata['name'])
        field.interface = IRegistration
        utils.add(form, field)
</code></pre>
<p>It, essentially, is taking a list of field definitions. We've chosen to only have a Name, Type, and Required attribute for each field dynamically created, so when we call <em>getattr</em>, we are creating a field based on the through-the-web (dynamic) values.</p>
<p>The field is given a name, and, the most important part, we assign it's interface to be the <em>IRegistration</em> interface, which is used to define the Registration type through the normal dexterity process.</p>
<p>The last line of the funciton calls the <em>utils.add</em> method located in <em>plone.z3cform.fieldsets</em> -- this adds the field to the form and correctly updates everything.</p>
<p>Check out the code, it's pretty slick! Big thank you to Nathan for figuring a bunch of that stuff out!</p>]]></content>
  </entry>
</feed>
