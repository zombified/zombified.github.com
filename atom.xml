<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Electric Froth</title>
    <subtitle>Brewlog, musings, and an outlet for random stuff by Joel Kleier</subtitle>
    <link rel="self">http://joelkleier.com/atom.xml</link>
    <link>http://joelkleier.com</link>
    <updated>Wed Nov 19 2014 22:20:01 GMT-0600 (CST)</updated>

    <entry>
        <title><![CDATA[68 Katy]]></title>
        <link>http://joelkleier.com/blog/2014-11-68-katy</link>
        <summary><![CDATA[<div class="paragraph">
<p><a href="http://www.bigmessowires.com/2014/11/17/68-katy-68000-linux-on-a-solderless-breadboard/">This is so awesome</a>.
<a href="http://www.bigmessowires.com/">This guy</a> put together a 68000-based computer,
running linux, on a <em>solderless</em> breadboard. 1MB of address space, 512K 8-bit SRAM,
512K Flash ROM (480K addressible, 32K memory-mapped I/O devices), and runs at 2MHz with
performance closer to a 1MHz 68000 (which is apparently slow&#8230;&#8203; originally the
68000 ran at 8MHz).</p>
</div>
<div class="paragraph">
<p>I love projects like this. They show at once how simple and how complicated and
amazing computers are.</p>
</div>]]></summary>
        <updated>Wed Nov 19 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-68-katy</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Ludum Dare 31 -- Who&#x27;s Ready??]]></title>
        <link>http://joelkleier.com/blog/2014-11-ludum-dare-31</link>
        <summary><![CDATA[<div class="paragraph">
<p>Woohoo!!! <a href="http://ludumdare.com/compo/">Ludum Dare 31</a> is almost upon us! I haven&#8217;t
participated since August 2013 because of life stuff, but I&#8217;m hoping that I can
squeeze in enough time this coming December to make <em>something</em>, even if I don&#8217;t
get to spend the whole time on it, and even if it&#8217;s super crappy.</p>
</div>
<div class="paragraph">
<p><a href="http://ludumdare.com/compo/author/pbdiode/">Here&#8217;s</a> all my old entries&#8230;&#8203; nothing
impressive, but the process of doing it was <em>so</em> worth the time.</p>
</div>]]></summary>
        <updated>Tue Nov 18 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-ludum-dare-31</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Pixel Pioneers- A Brief History of Graphics]]></title>
        <link>http://joelkleier.com/blog/2014-11-history-of-graphics</link>
        <summary><![CDATA[<div class="paragraph">
<p><a href="https://www.youtube.com/playlist?list=PLOQZmjD6P2HlOoEVKOPaCFvLnjP865X1f">Check this out</a>,
it&#8217;s an account of graphics as they relate to games. It&#8217;s planned to be a
four-part series by <a href="https://twitter.com/xboxahoy">Stuart Brown</a>, aka <em>Ahoy</em>.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s the first video for your viewing pleasure:</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="854" height="510" src="//www.youtube.com/embed/dzN2pgL0zeg?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></summary>
        <updated>Mon Nov 17 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-history-of-graphics</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt9 - Pointer Fun]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt9</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt8">last post</a> on Nim, I talked
about how I was learning to use generics. This time, I&#8217;d like to talk a bit
about pointers!</p>
</div>
<div class="paragraph">
<p>The <em>first</em> thing to know is that there are two different types of pointer&#8201;&#8212;&#8201;the "safe" and "unsafe" kind. The "safe" one is <em>traced</em> (in Nim parlance) and
managed by a garbage collector. The <em>untraced</em> ("unsafe") pointers are expected
to be entirely managed by the user&#8201;&#8212;&#8201;these are very useful for accessing hardware,
or interoping with non-Nim code.</p>
</div>
<div class="paragraph">
<p>The <em>seocnd</em> thing to know is that you really don&#8217;t need them unless you are, in
fact, interoping with <em>C</em> code, accessing hardware, or have a very specific
use-case. Of course I didn&#8217;t <em>know</em> that until after writing a few hundred lines
of code and then writing up the first draft of this article&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>In my search for some questions I came up with in the first draft, I came across
<a href="http://stackoverflow.com/questions/22096880/what-is-the-model-of-value-vs-reference-in-nimrod"><em>this</em></a>,
which explained the folly of my ways (well, not directly, but I was able to
think through the problems I was solving with a better understanding).</p>
</div>
<div class="paragraph">
<p>But, <em>awesome</em>! Now I have a much better grasp on when and when <em>not</em> to use
Nim&#8217;s pointer constructs.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s the equivalent of some code I was trying to write (note: this is the
<em>bad example</em> of how to use pointers&#8201;&#8212;&#8201;not that this example <em>won&#8217;t work</em>,
it&#8217;s just not a place you need to use pointers):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  TBaz = object
    y: int
  PBaz = ref TBaz
  TFoo = object
    baz: TBaz
  PFoo = ref TFoo

proc init_new(foo: var PFoo; y: int) =
  foo = PFoo()
  new(foo.baz)
  foo.baz.y = y

proc baz_accessor(f:var PFoo): var PBaz =
  return f.baz
proc `baz_accessor=`(f:var PFoo, baz: PBaz) =
  f.baz.y = baz.y
  discard """and I was doing some other stuff here (which is why I had the 'baz_accessor' property at all"""

var bar: PFoo
PFoo.init_new 1
assert(bar.baz_accessor.y == 1)
assert(bar.baz.y == 1)
bar.baz_accessor = 10
assert(bar.baz_accessor.y == 10)
assert(bar.baz.y == 10)</pre>
</div>
</div>
<div class="paragraph">
<p>And here&#8217;s some code whose end result is the same, without pointers (and without
the "old" syntax, which I also found out about from the aboved linked article&#8230;&#8203;):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  Baz = object
    y: int
  Foo = object
    baz: Baz

proc baz_accessor(f:var Foo): var Baz =
  result = f.baz
proc `baz_accessor=`(f:var Foo, y: int) =
  f.baz.y = y
  discard """and I was doing some other stuff here (which is why I had the 'baz_accessor' property at all"""

var bar = Foo(baz: Baz(y:1))
assert(bar.baz_accessor.y == 1)
assert(bar.baz.y == 1)
bar.baz_accessor = 10
assert(bar.baz_accessor.y == 10)
assert(bar.baz.y == 10)</pre>
</div>
</div>
<div class="paragraph">
<p>The first example (the one that uses pointers) uses 26 lines and 581 characters.</p>
</div>
<div class="paragraph">
<p>The second example (the seemingly <em>correct</em> one) uses 18 lines and 445 characters.</p>
</div>
<div class="paragraph">
<p>Not a huge difference for this particular example, but as code grows I have first
hand knowledge that it becomes a bigger difference! The second, <em>correct</em> example
is clearly more concise and readable. It also has no actual need for the <code>init_new</code>
method, like the pointer approach really does need. Certainly if initialization
was a more important aspect of the <code>Foo</code> type, then the <code>init_new</code> method would
have stayed in the second example.</p>
</div>
<div class="paragraph">
<p>On-wards and upwards! I have some code to clean up now&#8230;&#8203; but this whole
process has been enlightening.</p>
</div>
<div class="paragraph">
<p><em>2014-11-19 Addendum:</em> After posting this article, I received a nice message from
<a href="http://gradha.github.io/index.html">this guy</a> regarding a couple of things:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>When there is a need for an init function for an object, the convention for
much of the existing code has been something like <code>init_Somthing_</code>, but a newer
convention is to just use <code>init</code> and let the compiler auto-select the correct
<code>init</code> method based on the arguments passed to it. The
<a href="http://nimrod-lang.org/sets.html#init,TSet">A</a>,int[<em>sets</em> library] is a good
example.</p>
</li>
<li>
<p>The other is on the <a href="http://gradha.github.io/articles/2014/10/adding-objectivec-properties-to-nimrod-objects-with-macros.html">subject of getters/setters</a>.
The article describes how to utilize Nim&#8217;s awesome <a href="http://nimrod-lang.org/manual.html#macros">macro</a>
system to automatically generate properties with specific actions for particuarly
styled members of types. Lots of good information there about macros and AST&#8217;s!</p>
</li>
</ol>
</div>]]></summary>
        <updated>Sun Nov 16 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt9</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Why do people watch live streams (or their recordings) of people coding?]]></title>
        <link>http://joelkleier.com/blog/2014-11-programming-videos</link>
        <summary><![CDATA[<div class="paragraph">
<p>There&#8217;s a proliferation of people streaming their coding&#8201;&#8212;&#8201;I&#8217;ve seen it the most
when I follow and participate in the <a href="http://ludumdare.com/compo/">Ludum Dare</a> or
with the likes of <a href="http://notch.net/">notch</a>. I get that people may want to know
the 'secret sauce' of a particular developer&#8230;&#8203; but isn&#8217;t it <em>boring</em> to watch
someone write text? Isn&#8217;t it akin to watching someone handwrite or type a novel?</p>
</div>
<div class="paragraph">
<p>To me that sounds about as much fun as watching grass grow.</p>
</div>
<div class="paragraph">
<p>I mean, I see real value in a discussion between the streamer and the viewer in
a more lecture-like session, and I see the value in recording a session for
voice overs or footage for teaching programming later&#8230;&#8203; but why would anyone
want to just tune into a stream like that?</p>
</div>
<div class="paragraph">
<p>Maybe it&#8217;s different for someone just starting to get into programming. Or maybe
it&#8217;s less that people are tuning into actively watch, but more of a background
thing that they can interact with occasionally?</p>
</div>
<div class="paragraph">
<p>I have no idea&#8230;&#8203;</p>
</div>]]></summary>
        <updated>Sat Nov 15 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-programming-videos</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[What is this world coming too???]]></title>
        <link>http://joelkleier.com/blog/2014-11-go-go-github</link>
        <summary><![CDATA[<div class="paragraph">
<p>First, Microsoft <a href="http://www.wired.com/2014/11/microsoft-open-sources-net-says-will-run-linux-mac/">opens a lot more</a>
of their stack. Huge news, right? THEN they announce they&#8217;re putting it on
<a href="https://github.com/Microsoft/dotnet"><em>Github</em></a>!</p>
</div>
<div class="paragraph">
<p>And today? <em>Google</em> announces their <a href="https://groups.google.com/forum/#!topic/golang-dev/sckirqOWepg">moving <em>Go</em></a>
to Github!</p>
</div>
<div class="paragraph">
<p>This is a huge endorsement for <em>Github</em>, even if it&#8217;s not a direct one. And what
a week for .NET! I hope Microsoft keeps it up and one day starts deciding to
accept pull requests (which, AFAIK, they are not currently going to do)!</p>
</div>]]></summary>
        <updated>Fri Nov 14 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-go-go-github</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt8 - Generics]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt8</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt7">last post</a> on Nim, I tried to
figure out the answer to "How do I test in Nim?". The answer was, basically,
create a separate program with a bunch of asserts for each module I want to test.
The next thing I decided I should learn about are how Nim implements Generics!</p>
</div>
<div class="paragraph">
<p>Let&#8217;s look at a little snippet of a vector library I&#8217;m developing in Nim:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  TVec2*[T] = object
    x*: T
    y*: T

# pretty print the vector
proc `$`*[T](a:TVec2[T]): string =
  result = "(" &amp; $a.x &amp; "," &amp; $a.y &amp; ")"</pre>
</div>
</div>
<div class="paragraph">
<p>This code actually illustrates <em>several</em> concepts! First, lets talk about
<em>operator overloading</em>. You overload operators by naming a procedure specially,
IE with back-ticks around the operator symbol. There are a couple of operators
that don&#8217;t have overloading implemented (like the assignment operator, <code>=</code>).</p>
</div>
<div class="paragraph">
<p>The above example demonstrates an operator used to automatically convert a type
into a string, very useful when dealing with an unknown generic type.</p>
</div>
<div class="paragraph">
<p>The brackets and <code>T</code> value (<code>[T]</code>) after <code>TVec2*</code> tells the compiler that when
being instantiated, a type <code>T</code> should be specified for <code>TVec2</code>. The <code><strong></code> means
that the <code>Tvec2</code> type should be <em>exported</em> for use outside the module. The <code>T</code>
value can be used anywhere in the subsequent expression (Ex: <code>y</strong>: T</code>).</p>
</div>
<div class="paragraph">
<p>This means that the above definition of <code>TVec2</code> needs to be instantiated something
like so:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>var vec = TVec2[float](x: 1, y: 1)</pre>
</div>
</div>
<div class="paragraph">
<p>Note the <code>[float]</code> after <code>TVec2</code>.</p>
</div>
<div class="paragraph">
<p>This turns out to be pretty straight forward and scaleable to more than one type
being defined generically.</p>
</div>
<div class="paragraph">
<p>One thing to keep in mind is that the brackets <em>always</em> come <em>after</em> the export
symbol (<code>*</code>), if there is one.</p>
</div>]]></summary>
        <updated>Thu Nov 13 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt8</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Rosetta and Philae]]></title>
        <link>http://joelkleier.com/blog/2014-11-rosetta</link>
        <summary><![CDATA[<div class="paragraph">
<p>Truly an astonishing day for humanity!</p>
</div>
<div class="paragraph">
<p>The ESA&#8217;s <a href="http://www.esa.int/Our_Activities/Space_Science/Rosetta/Rosetta_to_deploy_lander_on_12_November">Rosseta mission</a>
Deployed it&#8217;s lander (Philae) to the surface of Comet 67P (aka Churyumov-Gerasimenko).
This mission took 25 years to realise, 10 of which involved <em>Rosetta</em> circling our
sun and using the gravitation forces of Earth and Mars to slingshot it&#8217;s way into
the path of Comet 67P!</p>
</div>
<div class="paragraph">
<p>Here is the first image captured of this historic event:</p>
</div>
<div id="img-farwell-rossetta" class="imageblock">
<div class="content">
<a class="image" href="https://www.flickr.com/photos/europeanspaceagency/15587895747/in/set-72157649192589446/"><img src="https://farm8.staticflickr.com/7473/15587895747_d1a4a70a93_n.jpg" alt="First picture from Philae of Rossetta"></a>
</div>
<div class="title">Figure 1. Farewell Rosetta</div>
</div>
<div class="paragraph">
<p>I recommend the <a href="https://www.flickr.com/photos/europeanspaceagency/">the whole ESA Flickr stream</a>,
it is full of beautiful images!</p>
</div>
<div class="paragraph">
<p>If humanity can do this, humanity can do <em>anything</em>. I&#8217;m truly proud, inspired,
and in awe of the dedication, talent, hard work, and <em>international cooperation</em>
that went into this venture.</p>
</div>
<div class="paragraph">
<p>This is only the very beginning, and it is a wonder to behold first hand.</p>
</div>]]></summary>
        <updated>Wed Nov 12 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-rosetta</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[_why]]></title>
        <link>http://joelkleier.com/blog/2014-11-why</link>
        <summary><![CDATA[<div class="paragraph">
<p><a href="http://en.wikipedia.org/wiki/Why_the_lucky_stiff">_why</a> was active and fairly
well known, especially in the Ruby community (from what I gather). The person
behind _why, whatever his reasons, decided to abruptly end his work as _why in
2009.</p>
</div>
<div class="paragraph">
<p>I had heard about _why in passing&#8201;&#8212;&#8201;probably in 2009 when everyone who knew
about him and didn&#8217;t understand his motives was all a-chatter about him. But I
hadn&#8217;t really read any of his work. This changed when I stumbled across
<a href="http://perl11.org/potion/">Potion</a>, and read the
<a href="http://perl11.org/potion/pamphlet.html">pamphlet</a> written, apparently,
by _why himself.</p>
</div>
<div class="paragraph">
<p>I came away from reading that a little impressed by the writing&#8201;&#8212;&#8201;conversational, humble, funny, clear, concise, and easy to read. I don&#8217;t think
<em>Potion</em> itself is anything but an esoteric language for doing hobbiest-level
projects at this point, but the <em>writing</em> is really good. You should check it out!</p>
</div>]]></summary>
        <updated>Tue Nov 11 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-why</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt7 - Testing]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt7</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt6">last post</a> on Nim, I discussed
modules a bit. This time around, I want to figure out the answer to "How do
I test in Nim?"</p>
</div>
<div class="paragraph">
<p>First, very little comes up in basic searches. Mostly you get reference to using
the <code>when</code> statement (compile-time if) along with <code>assert</code> and company, but that
is fairly primitive.</p>
</div>
<div class="paragraph">
<p>Doing some more digging, I found that a <a href="http://build.nimrod-lang.org/docs/unittest.html">unittest</a>
library does actually exist in the standard libs, but it is not
linked to from anywhere becase it
<a href="https://www.bountysource.com/issues/3189991-unit-test-library-documentation-too-hard-to-find">requires better documentation</a>.
If you do a <a href="https://github.com/Araq/Nimrod/search?utf8=%E2%9C%93&amp;q=unittest">search</a>
on the Nimrod repository, though, you can find that there are some examples of
the libraries use! However, there&#8217;s probably a reason for it not being listed
in the documentation <em>besides</em> a <em>lack</em> of documentation for itself.</p>
</div>
<div class="paragraph">
<p>So, another way to do tests, if you look at the Nim compiler source itself, is
to just create a directory with individual modules that contain nothing but
code for performing tests.</p>
</div>
<div class="paragraph">
<p>I decided to use a small vector math library for motivation to explore the
testing facilities (that are not <em>unittest</em>), and to see how I might incorporate
testing into a larger project.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s just a small part of the library that covers only a convenient way to
initialize a <code>TVec3</code> value (<code>src/vectors.nim</code>):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  TVec3* = array[0..2, int]

proc init*(vec: var TVec3; x, y, z: int) =
  vec[0] = x
  vec[1] = y
  vec[2] = z</pre>
</div>
</div>
<div class="paragraph">
<p>And here&#8217;s my testing code (<code>tests/tvectors.nim</code>):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>import vectors

var vec: TVec3
vec.init 1, 2, 3

assert(vec[0] == 1)
assert(vec[1] == 2)
assert(vec[2] == 3)

echo "OK"</pre>
</div>
</div>
<div class="paragraph">
<p>Simple: create a <code>TVec3</code>, initialize it, assert values are what are expected,
then give the "OK" if all the asserts pass.</p>
</div>
<div class="paragraph">
<p>The key to this approach is in the command used to build and execute the tests,
since I use a make file, this test (and every other test) are, are in a <code>test</code>
target that executes commands similar to:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>nimrod c --verbosity:0 -p:./src/ -o:../bin/tests tests/tvectors.nim &amp;&amp; ./bin/tests</pre>
</div>
</div>
<div class="paragraph">
<p>This command does several things:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>sets <code>--verbosity</code> to <code>0</code> so that a bunch of mostly unimportant info isn&#8217;t
printed to stdout</p>
</li>
<li>
<p>adds the <code>src</code> directory to the <code>path</code> that Nim uses to search for modules</p>
</li>
<li>
<p>sets the <code>-o</code> output file to a generic exe name</p>
</li>
<li>
<p>specifies the test to build (<code>tests/tvectors.nim</code> in this case)</p>
</li>
<li>
<p>and after a successful build, runs the tests with <code>&amp;&amp; ./bin/tests</code></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>With my above <code>tvectors.nim</code> tests, I get a simple <code>OK</code> printed to the console
after each test is built and run. Otherwise I either get a compilation error message,
or something more akin to:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>Traceback (most recent call last)
tvectors.nim(6)          tvectors
system.nim(2908)         failedAssertImpl
system.nim(2136)         raiseAssert
Error: unhandled exception: vec[0] == 2  [EAssertionFailed]</pre>
</div>
</div>
<div class="paragraph">
<p>Which is what gets displayed when an assertion fails.</p>
</div>
<div class="paragraph">
<p>Next time I talk about Nim, I tentitively plan on building out this vector
library a little more and seeing how the tests scale. But I think a more pressing
need might be the ability to specify the <code>TVec3</code> type more generically so that
I don&#8217;t have to re-declare types for integers, floats, etc.</p>
</div>
<div class="paragraph">
<p>Until next time!</p>
</div>]]></summary>
        <updated>Mon Nov 10 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt7</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
</feed>
