<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Electric Froth</title>
    <subtitle>Brewlog, musings, and an outlet for random stuff by Joel Kleier</subtitle>
    <link rel="self">http://joelkleier.com/atom.xml</link>
    <link>http://joelkleier.com</link>
    <updated>Fri Nov 21 2014 20:09:39 GMT-0600 (CST)</updated>

    <entry>
        <title><![CDATA[30 Day Challenge, COMPLETE]]></title>
        <link>http://joelkleier.com/blog/2014-11-30-day-challenge</link>
        <summary><![CDATA[<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>The next 30 days are going to pass whether you like it or not, so why not think
about something you&#8217;ve always wanted to try, and give it a shot!</p>
</div>
</blockquote>
<div class="attribution">
&#8212; Matt Cutts in his TED Talk "Try something new for 30 days"
</div>
</div>
<div class="paragraph">
<p>Those words really resonated with me when I watched
<a href="http://www.ted.com/talks/matt_cutts_try_something_new_for_30_days">Matt Cutt&#8217;s TED Talk</a>,
and launched into the idea of writing a blog post once per day for 30 days.</p>
</div>
<div class="paragraph">
<p>I latched onto writing on my blog because for <em>years</em> it&#8217;s been a very inconsistent,
on/off activity&#8201;&#8212;&#8201;one that had close to the lowest priority in my life. Inverting
the priority of this activity has forced me to really consider the how and
why&#8217;s of keeping a blog.</p>
</div>
<div class="paragraph">
<p>What I&#8217;ve discovered:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>I can&#8217;t post something unless I give it an hour or more of my attention (the
quality of the writing goes way down with less time, to the point where I
am writing what essentially amounts to a long-form tweet or a facebook/g+
type of post)</p>
</li>
<li>
<p>Most of the posts I&#8217;m particuarly happy with were written either early in
the morning before work or before dinner time (the longer I put it off, the
more likely I was to fall into the trap of posting filler for filler&#8217;s sake)</p>
</li>
<li>
<p>Writing down questions about, and snippets of, code that I don&#8217;t understand
<em>really</em> helped me focus and gain a deeper understanding than I would have
if I just <em>looked</em> at it&#8201;&#8212;&#8201;subsequently, I feel like these were some of my
best posts in terms of content (if not in quality of writing)</p>
</li>
<li>
<p>Filler for filler&#8217;s sake makes nobody happy&#8230;&#8203;</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The result of this challenge has really made me think about how I want to write,
how often I want to write, and what I feel like I&#8217;m good(ish) at writing. The
conclusion I&#8217;ve come too is that I don&#8217;t what to write a <em>post</em> every day. I just
end up with lots of filler that clutters up my blog and makes it look a little
more trashy and irrelevant.</p>
</div>
<div class="paragraph">
<p>I&#8217;ve considered how to proceed, and I think I still want to write and work on
a post or article every day, but only publish once per week. There are times
when I think I&#8217;ll probably post more&#8201;&#8212;&#8201;I post everything to the main blog, and
then have a 'brewlog' which is a tagged subset of posts about brewing&#8230;&#8203; those
posts, and similiar posts, will probably still be published irreguarly. I won&#8217;t
be considering those posts my weekly article.</p>
</div>
<div class="paragraph">
<p>The subject matter I&#8217;ve enjoyed most this past month has definitely been the
<em>Nim!</em> posts&#8201;&#8212;&#8201;writing was a great way to focus and clarify the process of
learning Nim. In the future, I&#8217;d like to continue to apply this technique to
learning more than just new computer languages.</p>
</div>
<div class="paragraph">
<p>In short:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Posting just to post is out.</p>
</li>
<li>
<p>I&#8217;m going to post a regular article once per week.</p>
</li>
<li>
<p>My regular article will be about <em>learning</em> something new.</p>
</li>
<li>
<p>My regular article will be made with intent, not on the spur of the moment</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>What&#8217;s next? <a href="http://joelkleier.com/blog/2014-11-physics/">Yesterday</a> I posted
about wanting to brush off some dust on my math skills and really learn how to
do proper physical simulation in (2D) games. Specifically, I&#8217;m considering writing
about developing a Nim library or framework for simple 2D physics&#8230;&#8203; purely as
an exercise to develop my understanding of the math required in such a case.</p>
</div>]]></summary>
        <updated>Fri Nov 21 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-30-day-challenge</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Games Physics... Specifically 2D Games Physics]]></title>
        <link>http://joelkleier.com/blog/2014-11-physics</link>
        <summary><![CDATA[<div class="paragraph">
<p>I&#8217;ll be honest: when I&#8217;ve hobby-developed games in my past, I&#8217;ve either used
super simple "physics" or just used an existing framework so as not to get
stuck on implementing any sort of physics simulation. Everytime I move past this
point, though, I&#8217;m left without any real understanding&#8230;&#8203; I plug in the numbers,
retype and copy code, and just hook things up to make them work.</p>
</div>
<div class="paragraph">
<p>This kinda bugs me, so I want to really internalize what it takes to make a
2d physics engine. And by internalize, I mean that I want to brush off some of
the math I studied in high school and college, and really understand how it
applies to physical simulation. In addition, I want to understand how to write
code to do physical simulations&#8230;&#8203; and I don&#8217;t mean just glue code. I want to really
understand what&#8217;s going on behind the scenes, and develop an intuition for it!</p>
</div>
<div class="paragraph">
<p>Why not just stick with the pre-made libraries and frameworks, and leave the physics
stuff up to people who focus a whole lot on physics? It&#8217;s a hobby&#8230;&#8203; and I want
to learn more about it.</p>
</div>
<div class="paragraph">
<p>To do this, I&#8217;ve dug around a bit for some online resources:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-1/">Wolfire&#8217;s <em>Linear Algebra</em> series</a>&#8201;&#8212;&#8201;while not called "physics", it covers some of the basic math behind _physic_al simulation
using a little linear algebra.</p>
</li>
<li>
<p><a href="http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/">Wildbunny&#8217;s <em>Vector maths - a primer for games programmers</a>&#8201;&#8212;&#8201;which covers what it says, basically an overlap of what _Wolfire&#8217;s</em> article is
about.</p>
</li>
<li>
<p><a href="http://www.wildbunny.co.uk/blog/2011/04/06/physics-engines-for-dummies/">Wildbunny&#8217;s <em>Physics Engines for Dummies</em></a>&#8201;&#8212;&#8201;lots of info, but the actual source code costs some cash (which may or may
not be worth it&#8230;&#8203; I wouldn&#8217;t know since I can be a cheapskate when it comes
to this sort of thing, and I&#8217;m probably not going to buy it).</p>
</li>
<li>
<p><a href="http://gafferongames.com/game-physics/">gafferongames.com&#8217;s <em>Game Physics</em> articles</a>&#8201;&#8212;&#8201;some seamingly really good information here, possibly over my head this far
out of maths practice.</p>
</li>
<li>
<p><a href="http://www.rodedev.com/tutorials/gamephysics/">Nate Rode&#8217;s <em>2D Game Physics 101</em></a>&#8201;&#8212;&#8201;some examples of various maths needed for 2D physics.</p>
</li>
<li>
<p><a href="http://gamedevelopment.tutsplus.com/series/how-to-create-a-custom-physics-engine--gamedev-12715">tuts+ <em>How to Create a Custom Physics Engine</em> by Randy Gaul</a>&#8201;&#8212;&#8201;looks, from the outside, to be a fairly comprehensive series of articles on
the math and code needed for creating a 2d physical simulation engine.</p>
</li>
<li>
<p><a href="https://www.khanacademy.org/math/linear-algebra">Khan Academy&#8217;s <em>Linear Algebra</em> subject</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>I&#8217;m <em>certain</em> there are a lot more resources out there on the web, and probably
just as many in meat-space!</p>
</div>
<div class="paragraph">
<p>The first thing I&#8217;m going to do is review some math on
<a href="https://www.khanacademy.org/math/linear-algebra">Khan Academy</a>, then I&#8217;m going to
use Nim to play around with some of these concepts and shake the rust off!</p>
</div>
<div class="paragraph">
<p>Until next time!</p>
</div>]]></summary>
        <updated>Thu Nov 20 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-physics</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[68 Katy]]></title>
        <link>http://joelkleier.com/blog/2014-11-68-katy</link>
        <summary><![CDATA[<div class="paragraph">
<p><a href="http://www.bigmessowires.com/2014/11/17/68-katy-68000-linux-on-a-solderless-breadboard/">This is so awesome</a>.
<a href="http://www.bigmessowires.com/">This guy</a> put together a 68000-based computer,
running linux, on a <em>solderless</em> breadboard. 1MB of address space, 512K 8-bit SRAM,
512K Flash ROM (480K addressible, 32K memory-mapped I/O devices), and runs at 2MHz with
performance closer to a 1MHz 68000 (which is apparently slow&#8230;&#8203; originally the
68000 ran at 8MHz).</p>
</div>
<div class="paragraph">
<p>I love projects like this. They show at once how simple and how complicated and
amazing computers are.</p>
</div>]]></summary>
        <updated>Wed Nov 19 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-68-katy</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Ludum Dare 31 -- Who&#x27;s Ready??]]></title>
        <link>http://joelkleier.com/blog/2014-11-ludum-dare-31</link>
        <summary><![CDATA[<div class="paragraph">
<p>Woohoo!!! <a href="http://ludumdare.com/compo/">Ludum Dare 31</a> is almost upon us! I haven&#8217;t
participated since August 2013 because of life stuff, but I&#8217;m hoping that I can
squeeze in enough time this coming December to make <em>something</em>, even if I don&#8217;t
get to spend the whole time on it, and even if it&#8217;s super crappy.</p>
</div>
<div class="paragraph">
<p><a href="http://ludumdare.com/compo/author/pbdiode/">Here&#8217;s</a> all my old entries&#8230;&#8203; nothing
impressive, but the process of doing it was <em>so</em> worth the time.</p>
</div>]]></summary>
        <updated>Tue Nov 18 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-ludum-dare-31</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Pixel Pioneers- A Brief History of Graphics]]></title>
        <link>http://joelkleier.com/blog/2014-11-history-of-graphics</link>
        <summary><![CDATA[<div class="paragraph">
<p><a href="https://www.youtube.com/playlist?list=PLOQZmjD6P2HlOoEVKOPaCFvLnjP865X1f">Check this out</a>,
it&#8217;s an account of graphics as they relate to games. It&#8217;s planned to be a
four-part series by <a href="https://twitter.com/xboxahoy">Stuart Brown</a>, aka <em>Ahoy</em>.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s the first video for your viewing pleasure:</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="854" height="510" src="//www.youtube.com/embed/dzN2pgL0zeg?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></summary>
        <updated>Mon Nov 17 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-history-of-graphics</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt9 - Pointer Fun]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt9</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt8">last post</a> on Nim, I talked
about how I was learning to use generics. This time, I&#8217;d like to talk a bit
about pointers!</p>
</div>
<div class="paragraph">
<p>The <em>first</em> thing to know is that there are two different types of pointer&#8201;&#8212;&#8201;the "safe" and "unsafe" kind. The "safe" one is <em>traced</em> (in Nim parlance) and
managed by a garbage collector. The <em>untraced</em> ("unsafe") pointers are expected
to be entirely managed by the user&#8201;&#8212;&#8201;these are very useful for accessing hardware,
or interoping with non-Nim code.</p>
</div>
<div class="paragraph">
<p>The <em>seocnd</em> thing to know is that you really don&#8217;t need them unless you are, in
fact, interoping with <em>C</em> code, accessing hardware, or have a very specific
use-case. Of course I didn&#8217;t <em>know</em> that until after writing a few hundred lines
of code and then writing up the first draft of this article&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>In my search for some questions I came up with in the first draft, I came across
<a href="http://stackoverflow.com/questions/22096880/what-is-the-model-of-value-vs-reference-in-nimrod"><em>this</em></a>,
which explained the folly of my ways (well, not directly, but I was able to
think through the problems I was solving with a better understanding).</p>
</div>
<div class="paragraph">
<p>But, <em>awesome</em>! Now I have a much better grasp on when and when <em>not</em> to use
Nim&#8217;s pointer constructs.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s the equivalent of some code I was trying to write (note: this is the
<em>bad example</em> of how to use pointers&#8201;&#8212;&#8201;not that this example <em>won&#8217;t work</em>,
it&#8217;s just not a place you need to use pointers):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  TBaz = object
    y: int
  PBaz = ref TBaz
  TFoo = object
    baz: TBaz
  PFoo = ref TFoo

proc init_new(foo: var PFoo; y: int) =
  foo = PFoo()
  new(foo.baz)
  foo.baz.y = y

proc baz_accessor(f:var PFoo): var PBaz =
  return f.baz
proc `baz_accessor=`(f:var PFoo, baz: PBaz) =
  f.baz.y = baz.y
  discard """and I was doing some other stuff here (which is why I had the 'baz_accessor' property at all"""

var bar: PFoo
PFoo.init_new 1
assert(bar.baz_accessor.y == 1)
assert(bar.baz.y == 1)
bar.baz_accessor = 10
assert(bar.baz_accessor.y == 10)
assert(bar.baz.y == 10)</pre>
</div>
</div>
<div class="paragraph">
<p>And here&#8217;s some code whose end result is the same, without pointers (and without
the "old" syntax, which I also found out about from the aboved linked article&#8230;&#8203;):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  Baz = object
    y: int
  Foo = object
    baz: Baz

proc baz_accessor(f:var Foo): var Baz =
  result = f.baz
proc `baz_accessor=`(f:var Foo, y: int) =
  f.baz.y = y
  discard """and I was doing some other stuff here (which is why I had the 'baz_accessor' property at all"""

var bar = Foo(baz: Baz(y:1))
assert(bar.baz_accessor.y == 1)
assert(bar.baz.y == 1)
bar.baz_accessor = 10
assert(bar.baz_accessor.y == 10)
assert(bar.baz.y == 10)</pre>
</div>
</div>
<div class="paragraph">
<p>The first example (the one that uses pointers) uses 26 lines and 581 characters.</p>
</div>
<div class="paragraph">
<p>The second example (the seemingly <em>correct</em> one) uses 18 lines and 445 characters.</p>
</div>
<div class="paragraph">
<p>Not a huge difference for this particular example, but as code grows I have first
hand knowledge that it becomes a bigger difference! The second, <em>correct</em> example
is clearly more concise and readable. It also has no actual need for the <code>init_new</code>
method, like the pointer approach really does need. Certainly if initialization
was a more important aspect of the <code>Foo</code> type, then the <code>init_new</code> method would
have stayed in the second example.</p>
</div>
<div class="paragraph">
<p>On-wards and upwards! I have some code to clean up now&#8230;&#8203; but this whole
process has been enlightening.</p>
</div>
<div class="paragraph">
<p><em>2014-11-19 Addendum:</em> After posting this article, I received a nice message from
<a href="http://gradha.github.io/index.html">this guy</a> regarding a couple of things:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>When there is a need for an init function for an object, the convention for
much of the existing code has been something like <code>init_Somthing_</code>, but a newer
convention is to just use <code>init</code> and let the compiler auto-select the correct
<code>init</code> method based on the arguments passed to it. The
<a href="http://nimrod-lang.org/sets.html#init,TSet">A</a>,int[<em>sets</em> library] is a good
example.</p>
</li>
<li>
<p>The other is on the <a href="http://gradha.github.io/articles/2014/10/adding-objectivec-properties-to-nimrod-objects-with-macros.html">subject of getters/setters</a>.
The article describes how to utilize Nim&#8217;s awesome <a href="http://nimrod-lang.org/manual.html#macros">macro</a>
system to automatically generate properties with specific actions for particuarly
styled members of types. Lots of good information there about macros and AST&#8217;s!</p>
</li>
</ol>
</div>]]></summary>
        <updated>Sun Nov 16 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt9</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Why do people watch live streams (or their recordings) of people coding?]]></title>
        <link>http://joelkleier.com/blog/2014-11-programming-videos</link>
        <summary><![CDATA[<div class="paragraph">
<p>There&#8217;s a proliferation of people streaming their coding&#8201;&#8212;&#8201;I&#8217;ve seen it the most
when I follow and participate in the <a href="http://ludumdare.com/compo/">Ludum Dare</a> or
with the likes of <a href="http://notch.net/">notch</a>. I get that people may want to know
the 'secret sauce' of a particular developer&#8230;&#8203; but isn&#8217;t it <em>boring</em> to watch
someone write text? Isn&#8217;t it akin to watching someone handwrite or type a novel?</p>
</div>
<div class="paragraph">
<p>To me that sounds about as much fun as watching grass grow.</p>
</div>
<div class="paragraph">
<p>I mean, I see real value in a discussion between the streamer and the viewer in
a more lecture-like session, and I see the value in recording a session for
voice overs or footage for teaching programming later&#8230;&#8203; but why would anyone
want to just tune into a stream like that?</p>
</div>
<div class="paragraph">
<p>Maybe it&#8217;s different for someone just starting to get into programming. Or maybe
it&#8217;s less that people are tuning into actively watch, but more of a background
thing that they can interact with occasionally?</p>
</div>
<div class="paragraph">
<p>I have no idea&#8230;&#8203;</p>
</div>]]></summary>
        <updated>Sat Nov 15 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-programming-videos</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[What is this world coming too???]]></title>
        <link>http://joelkleier.com/blog/2014-11-go-go-github</link>
        <summary><![CDATA[<div class="paragraph">
<p>First, Microsoft <a href="http://www.wired.com/2014/11/microsoft-open-sources-net-says-will-run-linux-mac/">opens a lot more</a>
of their stack. Huge news, right? THEN they announce they&#8217;re putting it on
<a href="https://github.com/Microsoft/dotnet"><em>Github</em></a>!</p>
</div>
<div class="paragraph">
<p>And today? <em>Google</em> announces their <a href="https://groups.google.com/forum/#!topic/golang-dev/sckirqOWepg">moving <em>Go</em></a>
to Github!</p>
</div>
<div class="paragraph">
<p>This is a huge endorsement for <em>Github</em>, even if it&#8217;s not a direct one. And what
a week for .NET! I hope Microsoft keeps it up and one day starts deciding to
accept pull requests (which, AFAIK, they are not currently going to do)!</p>
</div>]]></summary>
        <updated>Fri Nov 14 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-go-go-github</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt8 - Generics]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt8</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt7">last post</a> on Nim, I tried to
figure out the answer to "How do I test in Nim?". The answer was, basically,
create a separate program with a bunch of asserts for each module I want to test.
The next thing I decided I should learn about are how Nim implements Generics!</p>
</div>
<div class="paragraph">
<p>Let&#8217;s look at a little snippet of a vector library I&#8217;m developing in Nim:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  TVec2*[T] = object
    x*: T
    y*: T

# pretty print the vector
proc `$`*[T](a:TVec2[T]): string =
  result = "(" &amp; $a.x &amp; "," &amp; $a.y &amp; ")"</pre>
</div>
</div>
<div class="paragraph">
<p>This code actually illustrates <em>several</em> concepts! First, lets talk about
<em>operator overloading</em>. You overload operators by naming a procedure specially,
IE with back-ticks around the operator symbol. There are a couple of operators
that don&#8217;t have overloading implemented (like the assignment operator, <code>=</code>).</p>
</div>
<div class="paragraph">
<p>The above example demonstrates an operator used to automatically convert a type
into a string, very useful when dealing with an unknown generic type.</p>
</div>
<div class="paragraph">
<p>The brackets and <code>T</code> value (<code>[T]</code>) after <code>TVec2*</code> tells the compiler that when
being instantiated, a type <code>T</code> should be specified for <code>TVec2</code>. The <code><strong></code> means
that the <code>Tvec2</code> type should be <em>exported</em> for use outside the module. The <code>T</code>
value can be used anywhere in the subsequent expression (Ex: <code>y</strong>: T</code>).</p>
</div>
<div class="paragraph">
<p>This means that the above definition of <code>TVec2</code> needs to be instantiated something
like so:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>var vec = TVec2[float](x: 1, y: 1)</pre>
</div>
</div>
<div class="paragraph">
<p>Note the <code>[float]</code> after <code>TVec2</code>.</p>
</div>
<div class="paragraph">
<p>This turns out to be pretty straight forward and scaleable to more than one type
being defined generically.</p>
</div>
<div class="paragraph">
<p>One thing to keep in mind is that the brackets <em>always</em> come <em>after</em> the export
symbol (<code>*</code>), if there is one.</p>
</div>]]></summary>
        <updated>Thu Nov 13 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt8</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Rosetta and Philae]]></title>
        <link>http://joelkleier.com/blog/2014-11-rosetta</link>
        <summary><![CDATA[<div class="paragraph">
<p>Truly an astonishing day for humanity!</p>
</div>
<div class="paragraph">
<p>The ESA&#8217;s <a href="http://www.esa.int/Our_Activities/Space_Science/Rosetta/Rosetta_to_deploy_lander_on_12_November">Rosseta mission</a>
Deployed it&#8217;s lander (Philae) to the surface of Comet 67P (aka Churyumov-Gerasimenko).
This mission took 25 years to realise, 10 of which involved <em>Rosetta</em> circling our
sun and using the gravitation forces of Earth and Mars to slingshot it&#8217;s way into
the path of Comet 67P!</p>
</div>
<div class="paragraph">
<p>Here is the first image captured of this historic event:</p>
</div>
<div id="img-farwell-rossetta" class="imageblock">
<div class="content">
<a class="image" href="https://www.flickr.com/photos/europeanspaceagency/15587895747/in/set-72157649192589446/"><img src="https://farm8.staticflickr.com/7473/15587895747_d1a4a70a93_n.jpg" alt="First picture from Philae of Rossetta"></a>
</div>
<div class="title">Figure 1. Farewell Rosetta</div>
</div>
<div class="paragraph">
<p>I recommend the <a href="https://www.flickr.com/photos/europeanspaceagency/">the whole ESA Flickr stream</a>,
it is full of beautiful images!</p>
</div>
<div class="paragraph">
<p>If humanity can do this, humanity can do <em>anything</em>. I&#8217;m truly proud, inspired,
and in awe of the dedication, talent, hard work, and <em>international cooperation</em>
that went into this venture.</p>
</div>
<div class="paragraph">
<p>This is only the very beginning, and it is a wonder to behold first hand.</p>
</div>]]></summary>
        <updated>Wed Nov 12 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-rosetta</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
</feed>
