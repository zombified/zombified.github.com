<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Electric Froth</title>
    <subtitle>Brewlog, musings, and an outlet for random stuff by Joel Kleier</subtitle>
    <link rel="self">http://joelkleier.com/atom.xml</link>
    <link>http://joelkleier.com</link>
<updated>Wed, 26 Mar 2014 19:09:34 CDT</updated><entry><title><![CDATA[rss2email]]></title><link>http://joelkleier.com/blog/2014-03-rss2email/</link><summary><![CDATA[<p>March 13, 2013 -- Google <a href="http://googlereader.blogspot.com/2013/03/powering-down-google-reader.html">announced</a> the shutdown of Google Reader. Honestly, I became a little pissed. I mean, I certainly didn't use Reader a lot, but it was <em>so</em> convenient to keep track of my podcasts and news, especially the ones that weren't updated often. It also, usually, gave me a pretty good history of posts, beyond what was listed in the feed.</p>
<p>Alas, it was not to be, and, in the end, it's probably a good thing. The shutdown did one great thing: it forced me to find a <em>better</em> solution for <em>my</em> use case.</p>
<p>At this point, the hunt was on. I tried <a href="http://feedly.com/index.html#discover">Feedly</a>, but it didn't fit my wants. I had a problem with the plugins and how you viewed feeds. Then I moved on to <a href="https://theoldreader.com/">The Old Reader</a>, which was mostly a clone of Google Reader, but a clone of the good parts before Google started futzing with it!</p>
<p>For awhile, it was nice and useful. Quickly, though, it became apparent to me that it was <em>another</em> service I had to log into, and it didn't have a great mobile offering. It was a little slow due to the massive attention it was getting, and they even announced that they would have to shutdown at one point.</p>
<p>That announcement and the troubles I was running into with the app made me realize -- I had gone from one service that held the keys to the information I wanted, into to the hands of another.</p>
<p>This realization forced me to work a little harder on a side project: <a href="https://github.com/zombified/slicerss">slicerss</a>, which has since been pretty much abandoned. This project let me really customize how I wanted to read my rss feeds. I setup a very minimal UI, and it had all the (minimal) features I needed out of it. But, it was slow... and bound to my home server.</p>
<p>Ultimately, I discovered the key to what I want: I don't want to even <em>check</em> another service, and most of the time I just want to view the original article anyway. I don't want to share (most of the time) or organize my feeds.</p>
<p>I just want a river of news that makes it easy to mark or save an article and a link to the original.</p>
<p>Enter <a href="https://pypi.python.org/pypi/rss2email">rss2email</a> - a project which has been in development since at least 2006 (that's the date of v2.56 in the changelog). What does it do? Very simply, it downloads a set of RSS feeds, keeps track of which ones it has sent you, and emails the ones it hasn't.</p>
<p>Super, super, simple. Zero dependence on 3rd party services or proprietary software, an active project, and minimal system requirements. Plus, it's available anywhere I can access my email! I can use my email system to flag/pin/star or save any particular articles I want to, and I can just delete the rest.</p>
<p>Why I didn't do this sooner? Beats me. Now I just have a cron job that runs <code>r2e run</code> once a day, and then, when I want to, I can just check my email.</p>]]></summary><updated>Wed, 26 Mar 2014 00:00:00 CDT</updated><id>3dcee2ae879ce62a48764614a1309966</id><author><name>Joel Kleier</name><email>joel@kleier.us</email></author></entry>
<entry><title><![CDATA[Bash Fun]]></title><link>http://joelkleier.com/blog/2014-02-bash-fun/</link><summary><![CDATA[<p>I decided to create my own custom site-generator for a couple of reasons:</p>
<ul>
<li>My site is so simple, a lot of existing generators make designing it and building it overly complex.</li>
<li>The simple generators that already exist don't really organize things the way I want</li>
<li>From a user perspective, a shell script doesn't require any special considerations, except for maybe the version of core utilities and other command-line programs required</li>
<li>I thought it'd be nice to learn a little more about bash and some linux core utils</li>
</ul>
<p>Sorry to anyone that subscribes to this site via rss/atom... the guids and file paths have all changed, so your readers are probably going to think all my content is new!</p>
<p>If you'd like to checkout how this site was made, you can look at the <a href="https://github.com/zombified/ef.sh">ef.sh repository on github</a>.</p>]]></summary><updated>Fri, 14 Feb 2014 00:00:00 CST</updated><id>86948566315f2fc9a7a64defee02362b</id><author><name>Joel Kleier</name><email>joel@kleier.us</email></author></entry>
<entry><title><![CDATA[Postmortem for 'Grid Ten', my LD48#27 entry]]></title><link>http://joelkleier.com/blog/2013-09-ld48_27_grid_ten/</link><summary><![CDATA[<p>For the 27th <a href="http://ludumdare.com">Ludum Dare</a> 48-hour game making competition, I created an entry called <em>Grid Ten</em>. It was my 6th entry into the competition, and needed to be based around the theme '10 Seconds'. The competition voting isn't quite over at the time of this writing, but here are my thoughts on how my game turned out.</p>
<h2 id="timeline">Timeline</h2>
<p><strong>Pre- theme annoucement:</strong> I had planned to use <a href="http://inform7.com">Inform 7</a> or <a href="http://www.gimcrackd.com/etc/src/">Twine</a> for creating a text adventure, but I had also considered <a href="http://haxe.org/">Haxe</a> with <a href="http://haxeflixel.com/">HaxeFlixel</a> or <a href="http://haxepunk.com/">HaxePunk</a> as a fall-back if I didn't want to do a text adventure. Other than that, I went into the competition with no substantial ideas for the direction I wanted to go.</p>
<p><strong>Theme Announcement:</strong> The IRC chat room was full of hate for '10 Seconds', and I just knew this was the theme going to be picked. So, when it was announced, I was already thinking about what I could do. Initially I started drafting some sort of story that would revolve around using '10 seconds' in the context of a lat/long coordinate. I actually spent a good 4 hours working on this concept before going to bed for the night.</p>
<p><strong>The next morning:</strong> With the announcement happening only 4 or so hours before I went to bed, it gave my subconcious a good chance to mull over what I had worked on the night before. When I woke up, I started having doubts about my ideas from the night before -- none of them were really 'gelling' with me. So after about 2 hours, I came upon the core idea for what turned into <em>Grid Ten</em>, which was definitely not a text-adventure.</p>
<p><strong>The rest of the first day:</strong> After getting the core concept for <em>Grid Ten</em> fleshed out a bit more, I decided to forgo Haxe, etc, and just work directly with html/css/javascript. It's a toolset I'm really familiar with, and my concept would work very well with programmatically generated textures that I thought would be easier to do with the canvas element than with HaxeFlixel or HaxePunk. I also decided I didn't want a compile step in my development, nor did I want to deal with flash. The majority of the work went really smooth, I was really able to focus in on just the minimum code necessary -- I actually had some code to implement tails for the enemies, but then I quickly saw that that code would just bloat the game unnecessarily. It got cut out pretty quick, I didn't just comment it out, I completely removed it. I didn't want anything that would distract my focus. At the end of the day, I had the mechanics that I was shooting for pretty well fleshed out. There was still a LOT to add to the game, but the very core was in place!</p>
<p><strong>Day 2:</strong> I spent a good 7 hours polishing everything up -- I added some primitive animations, another 'block' the player could place, I also did some optimizations and improved the 'intelligence' of the enemies and added a menu, and a end-game screen. Generally, I polished the thing up quit a bit. I did stop early, around 3pm, to start the process of packaging and releasing. I'll talk about this a bit more later, but I should have definitely kept at it for at least another 2 or 3 hours.</p>
<p><strong>Post- competition end:</strong> I ended up fixing a bug whereby user placed blocks would stick around after a reset. Small, and easily fixed, but I should have totally caught that before submission!</p>
<h2 id="the-good">The GOOD</h2>
<ul>
<li>I leveraged a platform that I know fairly well</li>
<li>I stuck really well to a plan for absolute minimum viable product -- I didn't put a lot of extra cruft into the game that I didn't think significantly improved the experience. Take, for example, the start and end screens -- I put a large 'bouncing' text on both screens which didn't add anything to game-play, but it made the start and end screens much less boring to look at, which is important for first impressions I think.</li>
<li>I got plenty of sleep and food (always important!)</li>
</ul>
<h2 id="the-bad">The BAD</h2>
<p>There are really only three things I think were really bad this time around:</p>
<ul>
<li>I basically scratched and restarted what I was doing after about 6 hours total of development time. This hurt -- but, to be fair, I wasn't 'feeling' the text-adventure I started with, and it was probably good for my sanity to restart with the game I did.</li>
<li>I quit 2 or 3 hours earlier than I really should have, and in that time I probably could have done quite a lot of polishing.</li>
<li>I used mostly original code -- I used zero game related engines/frameworks</li>
</ul>
<h2 id="the-ugly">The UGLY</h2>
<p>Overall I'm really happy with the project, and I think the core concept has a lot of potential. I see a few ways that it could grow and change, and I'm actually pretty excited to continue working on this game in my down time.</p>
<p>However, I think I'll probably end up re-writing most of it. The style I used to code the game isn't sustainable I think... growing the project much larger would hurt, especially adding some of the mechanics into it that I have ideas for. I don't know that I'll have to write every piece of code from scratch, but good chunks of it for sure.</p>
<p>Otherwise, I think I've gotten some fairly positive comments on my <a href="http://www.ludumdare.com/compo/ludum-dare-27/?action=preview&amp;uid=7263">entry page</a>, and I got around a 2.5 out of 5, which is about where I was expecting this time around. If there were more mechanics and more polish, then I think I would have absolutely nailed it.</p>
<p>Next time!</p>]]></summary><updated>Sun, 29 Sep 2013 00:00:00 CDT</updated><id>201be813d79f2b90e3c66c8324b9123b</id><author><name>Joel Kleier</name><email>joel@kleier.us</email></author></entry>
<entry><title><![CDATA[Documentation]]></title><link>http://joelkleier.com/blog/2013-08-documentation/</link><summary><![CDATA[<p>I think there are, primarily, four broad categories that developers fit into when they become users of a library or framework:</p>
<ol type="1">
<li>Beginner</li>
<li>Intermediate</li>
<li>Experienced</li>
<li>'Master'</li>
</ol>
<p>These four areas broadly define some important aspects that any set of documentation really needs to hit on to be considered &quot;good.&quot;</p>
<p><em>Beginner's</em> are developers who've bought into using a library or framework, and now need some direction in how to use it. Tutorials, walk-throughs, pod/video-casts, 'hello world' apps, etc, are all tools that the beginner will find really useful. Documentation at this level really needs to be about guiding the individual in the uses of the library/framework without letting them bump into any sharp corners.</p>
<p><em>Intermediate</em> level developers are those who've read the beginner material, or are at least familiar with the system in question. The training wheels are off, and these individuals need documentation that covers the most common pitfalls and some more of the common, but, perhaps, complex, configuration situations that come up. They also need comprehensive documentation on the API or framework itself, so when a situation comes up that isn't documented directly, they have the tools to figure out some of the simpler pitfalls.</p>
<p><em>Experienced</em> level developers are those who've bumped into their fair share of sharp corners, and have had to really dig into the framework or API documentation. They may have also dug into the code to figure out their problems. These developers/users might also have committed a fix or two.</p>
<p><em>'Master'</em> level developers are those who really understand the ins-and-outs of the system in question. They may not be familiar with every aspect of the code, but they're familiar enough that they have an intuition about problems that arise, and how to get around them. If the problem can't be worked around, these are the people that really know how the system should be altered to accommodate their situation.</p>
<p>Now, of course this is an arbitrary categorization, and many times people that would fit into one category could also fit in another.</p>
<p>Also, this whole idea presumes that developers are <em>users</em> of a piece of software first. To get a task done, they don't immediately want to jump into every library or framework and become intimately familiar with how it's coded up. Sometimes getting shit done means taking a leap of faith that they can depend on some library or framework to do what it advertises, without getting into the sticky details.</p>
<p>With that in mind, working with Plone, Django, Pyramid/Pylons, and a host of other Python related libraries and frameworks tends to frustrate the crap out of me, at least in terms of their documentation strategies.</p>
<p>On the one hand, there is <em>lots</em> and <em>lots</em> of documentation out there, but often times it's not really all that 'good' (for my definition of good, anyway). Many times these pieces of software have decent beginner documentation -- plenty of 'hello world' examples, and, usually, enough descriptive text to explain what the example is all about. Often times they have some sort of API documentation, which is usually auto-generated, and in varing states of usefulness.</p>
<p>On the other hand, they <strong>tend</strong> to lack in more of the intermediate-level documentation -- documentation that more clearly explains some of the concepts of the advanced features, and gives some solutions to common situations/pitfalls. While they do often have API documentation, the API documentation often has gaps because it's someone didn't actually comment the code (or, maybe, comment it very well), because, you know, it's <em>obvious</em>.</p>
<p>Often, for any kind of documentation other than the very basic 'hello world' example(s), it's &quot;visit IRC&quot;, &quot;visit the list&quot;, or &quot;read the code.&quot;</p>
<p>Yes, having a way to communicate with the community around a piece of software can be an awesome thing to behold! It can be very useful... except when people keep coming and asking the same general things. Then the people that tend to stick around and help either don't continue to stick around, or stop helping people with the same questions they've answered many times before. Then it becomes 'search the archives', 'RTFM, stupid', or a question just goes unanswered.</p>
<p>Certainly, this doesn't always happen, but it happens a lot more than maybe it should. I feel like this is the result of a lack 'good' documentation.</p>
<p>There are two more things that irrationally irritate me when it comes to documentation:</p>
<p>First, pointing to another projects documentation, but not explaining <em>how</em> the current project uses it! I mean, come on. Just saying that a piece of software is based off another doesn't mean that it was integrated and is used exactly like the original project intends and documents it.</p>
<p>Second, documentation location(s) -- seriously, don't have more than one location where you're documentation is accessed from. And while we're at it, when you have a lot of different versions of your applications, make sure google, etc, aren't pointing to old documentation versions. If they do, make sure there's an updated version of the documentation that is linked to from the old documentation.</p>
<p>I'm sure there's a lot more that I could complain about in regards to documentation, but this post is already long enough.</p>
<p>I guess I leave my opinions for some hand-wavy solutions:</p>
<ul>
<li>Get the beginner docs solid</li>
<li>Explain <em>how</em> a dependant, but external, library is used and configured when you need to refer a user to that library's own documentation</li>
<li>Everytime the community answers a question, it might be a good idea to publish the problem and result to the primary documentation source -- perhaps even expanding on it</li>
<li>When autogenerating the API, make sure to have comments on everything explaining the how's and why's of each little piece, even if it seems like it should be completely obvious</li>
<li>Don't ever expect people to want to become intimately knowledgable with a library, and write your documentation accordingly -- most people probably just want to use it and move on with their lives</li>
<li>Keep documentation centralized and well versioned, including links in old documentation to newer documentation</li>
</ul>]]></summary><updated>Tue, 20 Aug 2013 00:00:00 CDT</updated><id>e761c894975dfda5106e8dd3ecac8f09</id><author><name>Joel Kleier</name><email>joel@kleier.us</email></author></entry>
<entry><title><![CDATA[0x0004 - Mr. Beer]]></title><link>http://joelkleier.com/blog/2013-06-0x0004-mr-beer/</link><summary><![CDATA[<h2 id="the-recipe">The Recipe</h2>
<p>My family-in-law bought me a Mr. Beer kit for my birthday this year, it came with an American Light HME (Hopped Malt Extract). It was a pretty simple simple and quick process all told.</p>
<h3 id="ingredients">Ingredients</h3>
<ol type="1">
<li>Can of the American Light HME</li>
<li>Packet of yeast that came with the HME</li>
<li>About 2 Gallons of water</li>
</ol>
<h3 id="yield">Yield</h3>
<p>About 2 gallons.</p>
<h3 id="process">Process</h3>
<p>Followed the Mr. Beer instructions pretty much to the letter -- except I sanitized everything a little more thoroughly, and made sure the water I used was free of bad little organisms (with campden tablets).</p>
<p>Basically:</p>
<ol type="1">
<li>Boil water</li>
<li>Add HME to water, making sure to thoroughly mix it up</li>
<li>Add mixture to 1 gallon of water in keg</li>
<li>Pitch yeast, and let it sit for 2 weeks</li>
<li>Bottle, adding a little sugar for carbonation, and wait/drink!</li>
</ol>
<h3 id="notes">Notes</h3>
<p>Nothing really exciting. I didn't take any specific gravity readings, so I don't know about how much ABV is it.</p>
<h3 id="pictures-and-progress">Pictures and Progress!</h3>
<p>No pictures here! Got lazy and didn't make any... perhaps for my next batch!</p>]]></summary><updated>Sat, 15 Jun 2013 00:00:00 CDT</updated><id>f6b7eca12941d7923eba7cc00d58b200</id><author><name>Joel Kleier</name><email>joel@kleier.us</email></author></entry>
<entry><title><![CDATA[0x0006 - Root Beer From Extract]]></title><link>http://joelkleier.com/blog/2013-06-0x0006-root-beer-from-extract/</link><summary><![CDATA[<h2 id="the-recipe">The Recipe</h2>
<p>I followed, for the most part, the process outlined on the bottle of extract I used. The extract was <em>Stoltzfus Root Beer Extract</em>.</p>
<h3 id="ingredients">Ingredients</h3>
<ol type="1">
<li>4oz Bottle of Stolzfus Root Beer Extract</li>
<li>8 Cups sugar (I used 7 cups of Florida cane sugar, and 1 cup of brown)</li>
<li>1/2 tsp yeast (I used Red Star 'Premier Cuvee')</li>
<li>5 gallons of luke-warm watter</li>
</ol>
<h3 id="yield">Yield</h3>
<p>About 5 gallons -- which turned out to be around 53 beer bottles!</p>
<h3 id="process">Process</h3>
<ol type="1">
<li>Mix sugar &amp; yeast well (dry)</li>
<li>Add 5 gal water to root beer extract, mixing well</li>
<li>Bottle immediatly, filling to within 1/2 inch of the cap</li>
<li>Place bottles in warm (70-80°F) area for 2 days</li>
<li>After 2 days, keep chilled in fridge</li>
</ol>
<h3 id="notes">Notes</h3>
<ul>
<li>I boiled all the water used first, and had to let it cool to a luke-warm temp</li>
<li>About 1/2 the bottles were not stored at a cold enough temperature, and I lost about 10 of those to over-carbonation and bottle bursting. The others I had to uncap, and recap in order to save them. The ones I recapped came out a little over-carbed still, but definitely drinkable!</li>
<li>I used old 12oz glass beer bottles for the bottling. Definitely would be nice to have a better device than just a hose to fill each bottle.</li>
</ul>
<h3 id="pictures-and-progress">Pictures and Progress!</h3>
<p>Bottles being stored after sanitization:</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/48144436/Brewing/0x0006/IMG_0089.jpg" alt="Sanitized Bottles"><figcaption>Sanitized Bottles</figcaption>
</figure>
<figure>
<img src="https://dl.dropboxusercontent.com/u/48144436/Brewing/0x0006/IMG_0090.jpg" alt="Sanitized Bottles 2"><figcaption>Sanitized Bottles 2</figcaption>
</figure>
<p>Brewing being done! This is after I added the extract to the luke warm water:</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/48144436/Brewing/0x0006/IMG_0094.JPG" alt="Brewing Being Done -- BBD"><figcaption>Brewing Being Done -- BBD</figcaption>
</figure>
<p>And the bottled results (a few might be missing from the picture)</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/48144436/Brewing/0x0006/IMG_0095.JPG" alt="The bottled results"><figcaption>The bottled results</figcaption>
</figure>
<p>The results tasted really good, especially with some New York Vanilla. Mmmm.</p>
<p>Can't wait to try a second batch, hopefully with more root-beer punch!</p>]]></summary><updated>Sat, 15 Jun 2013 00:00:00 CDT</updated><id>04cb2d9c680ea557206f20ac17cbcd02</id><author><name>Joel Kleier</name><email>joel@kleier.us</email></author></entry>
<entry><title><![CDATA[0x0002 - Hard Cider (Better Late Than Never)]]></title><link>http://joelkleier.com/blog/2013-06-0x0002-hard-cider/</link><summary><![CDATA[<h2 id="the-recipe">The Recipe</h2>
<p>Based on the recipe presented in <a href="http://brewingtv.com/episodes/2012/9/7/brewing-tv-episode-67-how-to-make-hard-cider.html">BrewingTV ep. 67</a>, but modified a bit.</p>
<h3 id="ingredients">Ingredients</h3>
<ul>
<li>1 gallon of Roundy's 100% apple cider</li>
<li>1 Cup pure Florida cane sugar</li>
<li>1 gram Red Star &quot;Cote des Blancs&quot; active dry wine yeast</li>
<li>1/2 tsp yeast energizer</li>
<li>2 tsp yeast nutrient</li>
</ul>
<h3 id="yield">Yield</h3>
<p>About 1 gallon</p>
<h3 id="process">Process</h3>
<ol type="1">
<li>Add yeast to warm water to activate it</li>
<li>Add 1/2 of yeast nutrient, energizer and sugar to 1 gallon of cider</li>
<li>Add yeast and gently mix</li>
<li>Cap the jug with and airlock and store for 24 hours</li>
<li>Add rest of yeast nutrient and put back in storage to let ferment for about a week (until there is no more activity)</li>
<li>Rack to secondary for aging and clarifying</li>
</ol>
<h3 id="notes">Notes</h3>
<ul>
<li>Cider was a little cold so I had to get it warmed up to room temp -- remember to always take out your juice from the refridgerator (if you put it in there in the first place...)</li>
<li>Need to mix sugar a little more maybe -- I think there might have been a little not dissolved</li>
<li>I put the nutrient and energizer in late (forgot to do it, duh!) -- 6 days late, to be exact. There was a violent reaction :)</li>
</ul>
<h3 id="pictures-and-progress">Pictures and Progress!</h3>
<p>Sorry, forgot to take pictures!</p>
<p>But, the OG was 1.060, and came down to 1.002 at bottling -- putting the numbers into a calculator, it comes out to about 7.6% ABV and 202 calories per 12oz.</p>
<p>I actually did a second batch of this (0x0003) -- changed the yeast to 'Pasteur Champagne' Red Star, and used Apple Valley apple cider (hand pressed at a local orchard).</p>
<p>I also decided to test out back-sweetening -- I back-sweetened 3 bottles with Old Orchard Apple Raspberry frozen concentrate (about 2 tbsp worth), and left one bottle unsweetened.</p>
<p>The sweetened ones tasted fantastic -- nice and carbed. No pictures of that batch either!</p>]]></summary><updated>Fri, 14 Jun 2013 00:00:00 CDT</updated><id>fcdda3a1b67da0cc04388a5a66011d95</id><author><name>Joel Kleier</name><email>joel@kleier.us</email></author></entry>
<entry><title><![CDATA[0x0005 - Dandelion Wine]]></title><link>http://joelkleier.com/blog/2013-06-0x0005/</link><summary><![CDATA[<p>It's spring, and what better way to celebrate it than to make some Dandelion Wine? Doesn't that sound at least a little tasty?</p>
<h2 id="the-recipe">The Recipe</h2>
<p>Based on a <a href="http://thriftygardening.blogspot.co.uk/2013/05/homemade-dandelion-wine.html">Thrifty Gardening article</a>, with few alterations.</p>
<h3 id="ingredients">Ingredients</h3>
<ul>
<li>About 1/2 Gallon of Yellow Dandelion Bits</li>
<li>1 Gallon Water</li>
<li>3 Oranges</li>
<li>2 Lemons</li>
<li>About 2.65 lb of Sugar</li>
<li>Some Wine Yeast</li>
</ul>
<h3 id="yield">Yield</h3>
<p>About 1 gallon.</p>
<h3 id="process">Process</h3>
<ol type="1">
<li>Pick dandelions and separate yellow bits</li>
<li>Bring 1 gallon of water to boil</li>
<li>Pour water over dandelion yellow bits, cover with a cloth, and let sit for 2 days to steep -- like a tea!</li>
<li>Add sugar and citrus zest</li>
<li>Boil the mixture for 10 minutes</li>
<li>Let cool to room temperature</li>
<li>Pour into a gallon jug</li>
<li>Pour citrus juice into jug</li>
<li>Pour yeast into jug</li>
<li>Put an airlock on the jug and let sit until fermentation is done and liquid has cleared</li>
<li>Bottle and age for at least 6 months, 1 year or more preferred</li>
</ol>
<h3 id="notes">Notes</h3>
<ol type="1">
<li>I didn't spend a whole lot of time getting ALL of the green bits separated from the yellow bits, but I don't think it'll affect flavor to much in the end. I hope.</li>
<li>There's a <a href="http://www.showmenow.com/files/SMN_NEW_DandelionWineMAY10.gif">diagram</a> that shows mostly the same process with pictures! yay!</li>
</ol>
<h3 id="pictures-and-progress">Pictures and Progress!</h3>
<p>First, I picked the dandelion bits (with Jess' help), and tried to separate the yellow bits from the green bits... but I still had a lot of green!</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/48144436/Brewing/0x0005/IMG_0087.JPG" alt="Step 1: Pick the Dandelion Yellow Bits (mostly)"><figcaption>Step 1: Pick the Dandelion Yellow Bits (mostly)</figcaption>
</figure>
<p>Next, I boiled the dandelion (mostly) yellow bits.</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/48144436/Brewing/0x0005/IMG_0088.jpg" alt="Step 2: Boil those bits!"><figcaption>Step 2: Boil those bits!</figcaption>
</figure>
<p>And then, the dandelion bits steeped for 2 days.</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/48144436/Brewing/0x0005/IMG_0092.jpg" alt="Step 3: Steep those bits!"><figcaption>Step 3: Steep those bits!</figcaption>
</figure>
<p>Then, the steeped mixture had the sugar and citrus added, it was boiled for 10 minutes, cooled to room temp (somewhere around 76°F), then strained and poured into the gallon jug. The citrus juice and yeast were pitched, and then the airlock was added:</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/48144436/Brewing/0x0005/IMG_0093.jpg" alt="Step 4: A bunch of stuff!"><figcaption>Step 4: A bunch of stuff!</figcaption>
</figure>
<p>And 3 weeks later, fermetation has mostly stopped, and now I wait to let it settle a bit before bottling it, and then age it for a year.</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/48144436/Brewing/0x0005/IMG_0137.jpg" alt="Step 5: 3 weeks in the bottle"><figcaption>Step 5: 3 weeks in the bottle</figcaption>
</figure>]]></summary><updated>Thu, 13 Jun 2013 00:00:00 CDT</updated><id>88d22cc5e1e5faa73eb966e9ea309a31</id><author><name>Joel Kleier</name><email>joel@kleier.us</email></author></entry>
<entry><title><![CDATA[Haxe Function Signatures]]></title><link>http://joelkleier.com/blog/2013-03-haxe-func-sigs/</link><summary><![CDATA[<p>Just a quick note about this function signature:</p>
<pre><code>#!haxe
Dynamic -&gt; Void</code></pre>
<p>Dynamic generally means <em>any</em> type in Haxe. However, it does not mean <code>Void</code>.</p>
<p>For example, if you have this:</p>
<pre><code>#!haxe
var func:Dynamic -&gt; Void;</code></pre>
<p>You cannot assign func a function that has a void parameter list. It DOES require a parameter, but that parameter can be of any type.</p>
<p>IE, this is <em>bad</em>:</p>
<pre><code>#!haxe
function foo() {}

// foo is of type Void -&gt; Void, not Dynamic -&gt; Void
func = foo;</code></pre>
<p>But this is good:</p>
<pre><code>#!haxe
function foo(bar:Dynamic) {}

func = foo;</code></pre>
<p>It may seem kinda obvious, but I was tripped up on it because I thought <code>Dynamic</code> could represent any type of value, including a Void parameter list. Which, in hindsight, seems kind of ridiculous, but none-the-less, it happened.</p>
<p><strong>NOTE</strong> This was written for Haxe 2.10</p>]]></summary><updated>Wed, 06 Mar 2013 00:00:00 CST</updated><id>b49064fffc1d8f5d0c50b2d22c24a895</id><author><name>Joel Kleier</name><email>joel@kleier.us</email></author></entry>
<entry><title><![CDATA[Setting up a HaxePunk Project]]></title><link>http://joelkleier.com/blog/2013-03-haxepunk-setup/</link><summary><![CDATA[<p><strong>Edit (2013-03-06):</strong> updated title to reflect the post a little better</p>
<h2 id="setting-up-the-development-environment">Setting up the development environment</h2>
<ol type="1">
<li>Setup the editor or IDE, I use vim, so install <a href="https://github.com/jdonaldson/vaxe">vaxe</a></li>
<li>Go to <a href="http://www.nme.io/download/">www.nme.io/download/</a> and follow the instructions</li>
<li>Install HaxePunk: <code>haxelib install HaxePunk</code></li>
</ol>
<h2 id="setting-up-the-project">Setting up the project</h2>
<ol type="1">
<li>Create the project skeleton: <code>haxelib run HaxePunk new [project name]</code>, replacing [project name] with the name of the folder to use for the project</li>
<li>Edit <code>project.nmml</code> with your project specific details</li>
<li>Add <code>src/worlds</code> folder to hold your world source files</li>
<li>Add <code>src/entities</code> folder to hold your entity source files</li>
</ol>
<h2 id="add-some-code-to-make-a-useable-but-very-basic-haxepunk-project">Add some code to make a useable, but very basic HaxePunk project</h2>
<p>Add this code to <code>src/worlds/Game.hx</code>, it can be used as a very basic jumping off point:</p>
<pre><code>#!haxe
package worlds;

import com.haxepunk.World;


class Game extends World {

    public function new() {
        super();
    }

}</code></pre>
<p>Then set HaxePunk to use that world as the active world by adding the following to the end of the <code>init</code> function in the <code>Main</code> class (<code>src/Main.hx</code>):</p>
<pre><code>#!haxe
HXP.world = new worlds.Game();</code></pre>
<h2 id="building-the-project">Building the project</h2>
<p>I like using neko to do a lot of my testing and development. It has faster build times than for cpp, and I don't have to deal with flash (personal preference).</p>
<pre><code>#!bash
$ nme test project.nmml neko</code></pre>
<p>The 'test' argument just tells nme to update (copy assets) and build the project, then to run what was built right away. You can do lots of other things with nme, see the nme documentation, or the command line help:</p>
<pre><code>#!bash
$ nme help</code></pre>
<h2 id="end-thoughts">End thoughts</h2>
<p>Nothing fancy, but it gets the project up and running. It should be noted that a lot of FlashPunk documentation and tutorials are useful when trying to learn HaxePunk -- they usually don't match perfectly, but the class and method names are mostly the same and available in both, so it's easy to pickup things in snippets.</p>]]></summary><updated>Sat, 02 Mar 2013 00:00:00 CST</updated><id>38859ce10eea8323b27cbfdec56eaf80</id><author><name>Joel Kleier</name><email>joel@kleier.us</email></author></entry>
</feed>