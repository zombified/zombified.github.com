<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Electric Froth</title>
    <subtitle>Brewlog, musings, and an outlet for random stuff by Joel Kleier</subtitle>
    <link rel="self">http://joelkleier.com/atom.xml</link>
    <link>http://joelkleier.com</link>
    <updated>Thu Oct 30 2014 08:21:23 GMT-0500 (CDT)</updated>

    <entry>
        <title><![CDATA[Asciidoc + Metalsmith]]></title>
        <link>http://joelkleier.com/blog/2014-10-asciidoc-plus-metalsmith</link>
        <summary><![CDATA[<div class="paragraph">
<p>I <em>love</em> metalsmith. It&#8217;s <strong>so</strong> easy to integrate extensions when they&#8217;re just
middleware for reading and writing files. Very flexible&#8201;&#8212;&#8201;mind bending at times,
perhaps a small challenge to debug occassionally, but really cool.</p>
</div>
<div class="paragraph">
<p>And so, this is my first post using <a href="http://www.methods.co.nz/asciidoc/">AsciiDoc</a>
to format the source text of my post, and <a href="https://github.com/asciidoctor/asciidoctor.js">AsciiDoctor.js</a>
do perform the actual conversion to HTML.</p>
</div>
<div class="paragraph">
<p>We&#8217;ll see how it goes! I may not proceed with it&#8217;s usage, but it does provide
some clear advantages over markdown. The downside, though, I don&#8217;t think the
tooling for asciidoc is quite as ubiquitous as markdown.</p>
</div>
<div class="paragraph">
<p>As for the actual integration with metalsmith, I just created a plugin based on
the <a href="https://github.com/segmentio/metalsmith-markdown/blob/master/lib/index.js"><em>metalsmith-markdown</em> plugin</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>var basename = require('path').basename;
var dirname = require('path').dirname;
var extname = require('path').extname;
var asciidoctor = require('asciidoctor.js')();
var opal = asciidoctor.Opal;
var asciidoc_processor = asciidoctor.Asciidoctor(true); // without extensions, pass 'true' for extensions

function is_asciidoc(filename) {
    return /\.adoc/.test(extname(filename));
}

var asciidoc = function(config) {
    config = config || {};
    var keys = config.keys || [];

    return function(files, metalsmith, done) {
        setImmediate(done);
        Object.keys(files).forEach(function(file){
            if(!is_asciidoc(file)) return;
            var data = files[file];
            var dir = dirname(file);
            var html = basename(file, extname(file)) + '.html';
            if('.' != dir) html = dir + '/' + html;

            var options = opal.hash2(
                ['doctype', 'attributes'],
                {doctype:'article', attributes: ['showtitle']});
            var str = asciidoc_processor.$convert(data.contents.toString(), options);
            data.contents = new Buffer(str);
            keys.forEach(function(key){
                data[key] = asciidoc_processor.$convert(data[key], options);
            });

            delete files[file];
            files[html] = data;
        });
    };
};</pre>
</div>
</div>
<div class="paragraph">
<p>The <code>config</code> options aren&#8217;t really used when you instantiate the plugin&#8230;&#8203; but one
step at a time. I still have to figure out how to effectively add the <code>config</code>
options to the <code>options</code> passed into the <code>asciidoc_processor</code>, which I haven&#8217;t
done yet, because I ran out of time to work on it for the moment, and it&#8217;s kinda
low priority for me.</p>
</div>
<div class="paragraph">
<p>I&#8217;m still using yaml front-matter in my source documents, which is kinda not how
asciidoc is intended to have metadata, but it works for my purposes and means
I don&#8217;t have to change anything else right now!</p>
</div>]]></summary>
        <updated>Thu Oct 30 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-asciidoc-plus-metalsmith</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[David Revoy]]></title>
        <link>http://joelkleier.com/blog/2014-10-david-revoy</link>
        <summary><![CDATA[<p><a href="http://www.davidrevoy.com/" title="David Revoy: illustrator, concept-artist">David Revoy</a> works mostly as a digital artist doing illustrations. I find his
work inspiring -- both as an artist, and as an open source enthusiast.</p>
<p>He&#39;s worked on three of the open movies produced by the Blender Foundation in
their <a href="http://www.blender.org/features/projects/" title="Blender: Open Projects">&quot;Open Projects&quot;</a> -- an attempt to make short feature films with 100%
open source software.</p>
<p>He also spends a lot of time helping out the <a href="https://krita.org/" title="KRITA">Krita</a> and <a href="http://mypaint.intilinux.com/" title="MyPaint">mypaint</a> open
source illustration/painting/drawing tools.</p>
]]></summary>
        <updated>Wed Oct 29 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-david-revoy</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[James Gurney]]></title>
        <link>http://joelkleier.com/blog/2014-10-james-gurney</link>
        <summary><![CDATA[<p>I learned of <a href="http://gurneyjourney.blogspot.com/" title="Gurney Journey">James Gurney</a> after stumbling across his <a href="http://gurneyjourney.blogspot.com/" title="Gurney Journey">blog</a> around six
years ago. He makes a very strong effort to show his work in it&#39;s various stages,
from very rough to simply beautiful. He doesn&#39;t try to hide his process -- he
tries to be open and forthcoming, two qualities that attract me to the ideas
encompased by &quot;open source.&quot;</p>
<p>His work focuses on two areas -- &quot;Imaginative Realism&quot; (realistically painting
things that don&#39;t have any full references, like dinosaurs) and &quot;Plein Air&quot; 
(essentially going somewhere and painting what you see).</p>
<p>His preferred medium seems to be watercolor, <a href="http://en.wikipedia.org/wiki/Gouache" title="Gouache">gouache</a> (kind of an opaque
watercolor, but not really), and, lately, <a href="http://en.wikipedia.org/wiki/Casein" title="Casein">casein</a> (milk based paint popular
prior to 1960, when acrylic based paints gained popularity).</p>
]]></summary>
        <updated>Tue Oct 28 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-james-gurney</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Markup Languages]]></title>
        <link>http://joelkleier.com/blog/2014-10-markup-langs</link>
        <summary><![CDATA[<p>I read an article titled <a href="https://medium.com/@chacon/living-the-future-of-technical-writing-2f368bd0a272" title="Living the Future of Technical Writing">&quot;Living the Future of Technical Writing&quot; by Scott Chacon</a>, the author
of <a href="http://git-scm.com/book/en/v2" title="Pro Git 2nd Edition">Pro Git</a>, and it got me thinking a little about the techical writing process,
and the formats I use to markup text.</p>
<p>I have no personal experience with asciidoc -- most of the plain-text based markup
I write is in markdown or reStructuredText. I like markdown, but sometimes it&#39;s
too simple and has ambiguously defined behaviors (like pre/code text in a list item).
I like reStructuredText, but some aspects of it&#39;s syntax leave a bad taste (the weird
syntax for links and no spaces before number/bullet for lists to name a couple).</p>
<p>And so, reading this article made me want to find out if asciidoc improves on
the issues I have with markdown and reStructuredText, and what kind of tooling
I can use to manipulate it.</p>
<p>Some neat features specific to asciidoc:</p>
<ul>
<li>Admonitions (document call-outs for notes, tips, etc)</li>
<li>Simple usage of italic, bold, and inline monospace -- all embeddible within each other</li>
<li>Custom inline styling (IE &quot;[small]#small print#&quot;)</li>
<li>You can specify &quot;curved&quot; apostrophes and quotation marks</li>
<li>Document Headers (which can include author, revision, and attributes)</li>
<li>You can specify explicit id&#39;s for section links</li>
<li>You can specify parts of other ascii documents to include inline</li>
<li>You can include content from URI&#39;s</li>
<li>You can specify manual page breaks</li>
<li>You can specify checklists</li>
<li>Ability to explicitly notate content as an extension of the previous list item</li>
<li>Ability to link inline anchors</li>
<li>Internal cross-references</li>
<li>Callouts for code blocks</li>
<li>Code blocks sourced from files</li>
<li>Custom substitutions</li>
<li>Commenting</li>
</ul>
<p>Some things I can see already annoying me:</p>
<ul>
<li>For lists of greater than one level, you need to use <em>n</em> number of list markers
where <em>n</em> is the level of indentation. Small thing, but it annoys me greatly
that reStructuredText requires the list marker to not have space in front of it too.
BUT at least asciidoc explicitly specifies that leading white space to lists is
not relevant</li>
<li>The syntax for extending list content might make things a little hard to read</li>
<li>Subjectively, I feel like the link syntax isn&#39;t as nice as markdowns -- it&#39;s
about on par with how I feel about reStructuredText&#39;s link syntax.</li>
</ul>
<p>I might give this format a serious shot -- there is <a href="https://github.com/asciidoctor/asciidoctor.js" title="asciidoctor.js">asciidoctor.js</a>, so I might
be able to integrate it into my <a href="https://github.com/asciidoctor/asciidoctor.js" title="Metalsmith">Metalsmith</a> build! I&#39;m certainly going to
test it out, but who knows if it&#39;ll go anywhere...</p>
]]></summary>
        <updated>Mon Oct 27 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-markup-langs</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[My Private Git Setup]]></title>
        <link>http://joelkleier.com/blog/2014-10-my-personal-git</link>
        <summary><![CDATA[<p>Occasionally I work on a project that I want in version control, duplicated in a
central location, but don&#39;t want to throw it into the public eye. I don&#39;t need
much to accomplish this -- a Raspberry Pi sitting headless on my home network
works perfectly.</p>
<p>Basically, I use <a href="http://git-scm.com/" title="git --fast-version-control">git</a>+ssh to do operations on my repos remotely, and
<a href="https://github.com/jonashaag/klaus" title="Klaus">klaus</a> + <a href="http://gunicorn.org/" title="gunicorn">gunicorn</a> to browse and dig through my repos when I want to.</p>
<p>It&#39;s a pretty smooth setup!</p>
<p>The most complicated parts of this setup are:</p>
<ol>
<li>I use a <code>virtualenv</code> to wrap gunicorn, klaus, and dependencies in their own python environment</li>
<li>I use this gunicorn command (which uses <code>klaus.contrib.wsgi_autoreload</code>
pointed at a single directory containing only git repo subdirectories):</li>
</ol>
<!-- -->

<pre><code>    exec /path/to/gunicorn -w 1 -b 0.0.0.0:80 \
        --env KLAUS_SITE_NAME=&quot;You Have The GITS&quot; \
        --env KLAUS_REPOS=&quot;/path/to/git/repo/parent/dir&quot; \
        --log-level error --log-file /var/log/klaus.log \
        klaus.contrib.wsgi_autoreload
</code></pre><p>Combined with some basic ssh configuration (setting up a Host &#39;shortcut&#39; in
my <code>~/.ssh/config</code> file and authorizing my public key for a user on my
raspberry pi), this method is very low-friction to work with and I get a
nice UI to browse my source with, if I want!</p>
]]></summary>
        <updated>Sun Oct 26 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-my-personal-git</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[PureScript]]></title>
        <link>http://joelkleier.com/blog/2014-10-purescript</link>
        <summary><![CDATA[<p>I&#39;ve always had a fondness for programming languages, and one that caught my eye
recently is <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a> -- a strongly and statically typed language in the
vein of Haskell (which I&#39;ve never really learned proper, though I have it on
the &#39;maybe someday&#39; list). <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a>, though, compiles to JavaScript
-- which, despite it&#39;s warts, is a language that I think is the bees knees.</p>
<p>There&#39;s a <a href="https://leanpub.com/purescript/" title="PureScript By Example">book</a> out there for it, available free to read online, so I thought
I&#39;d just start going through it to check out the language.</p>
<p>It has you install <a href="https://www.haskell.org/platform/" title="The Haskell Platform">The Haskell Platform</a> (for the actual compiler), <a href="http://nodejs.org/" title="node.js">node/npm</a>
(for node based utilities and tools), <a href="http://bower.io/" title="Bower: A package manager for the web">Bower</a> (for all the <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a>
packages), and then <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a> (to automate builds and such).</p>
<p>Well, that&#39;s a pretty big stack to install just to write some &quot;Hello World&quot;
equivalent programs... but, I don&#39;t mind! Already had most of them installed
anyway. However, their setup is not how I prefer to work (when I&#39;m working on
my own projects at least).</p>
<p>Here are my deviations from the books setup:</p>
<ol>
<li>I installed <a href="http://bower.io/" title="Bower: A package manager for the web">Bower</a> locally to the folder (I don&#39;t like polluting my global
npm packages if I don&#39;t have to... and prefixing <code>./node_packages/.bin/bower</code>
doesn&#39;t bother me since I&#39;m scripting my builds anyway).</li>
<li>I Started using <a href="http://www.gnu.org/software/make/" title="GNU Make">GNU Make</a> instead of <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a>. Why? Sure, grunt is the
new &#39;hot&#39; thing, but, for my purposes, it&#39;s clearly a reinvention of a
wheel that works <em>really</em> well. I like <a href="http://www.gnu.org/software/make/" title="GNU Make">GNU Make</a>, and it will serve me
better than <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a> (that&#39;s not to say <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a> is useless,
but in this instance I prefer to stick with the tried and true).</li>
</ol>
<p>So, my <code>Makefile</code> looks something like this:</p>
<pre><code>BOWER_FILES=`find ./bower_components -regex &quot;.*/src/.*\.purs&quot;`
CHAPTER2_FILES=src/Chapter2.purs
PHONEBOOK_FILES=src/Data/PhoneBook.purs
ALL_FILES=${BOWER_FILES} \
          ${CHAPTER2_FILES} \
          ${PHONEBOOK_FILES}


all: Chapter2 PhoneBook

bootstrap:
    npm install bower
    bower install purescript-math#0.1.0
    bower install purescript-list

psci:
    psci ${ALL_FILES}

Chapter2:
    psc ${BOWER_FILES} \
        ${CHAPTER2_FILES} \
        --output dist/Chapter2-Main.js \
        --module Chapter2 \
        --main Chapter2
</code></pre><p>Some explanations:</p>
<ul>
<li>The definition of <code>BOWER_FILES</code> uses backticks around a find command to
get a list of all purescript files identified as purescript source files
(the community tends to structure their projects a specific way, so this
command makes sense for that structure)</li>
<li>The <code>bootstrap</code> target can be used to install bower and all the
dependancies that are needed for the project</li>
<li>The <code>psci</code> target can be used as a shortcut for loading the REPL with all
project files</li>
<li>The <code>Chapter2</code> a target is for building the file(s) in Chapter 2 -- I&#39;ve only
read through Chapter 3 so far, and Chapter 2 is the only one that&#39;s had any
built files. Chapter 1 was introductory, and Chapter 3 mostly focused on the
REPL.</li>
</ul>
<p>Hopefully I get some time soon to play with <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a> some more! So far
my impressions are very positive!</p>
]]></summary>
        <updated>Sat Oct 25 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-purescript</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Recent Raspberry Pi Announcements]]></title>
        <link>http://joelkleier.com/blog/2014-10-rpi-display</link>
        <summary><![CDATA[<p>I <em>love</em> the Raspberry Pi: cheap, small, powerful (enough), and completely
programmable.</p>
<p>Recently, <a href="http://www.raspberrypi.org/author/eben/">Eben Upton</a> gave a
<a href="http://www.raspberrypi.org/eben-at-techcrunch-disrupt/">talk at TechCrunch Distrupt</a>.
He talked a little about the RPi, a really cool 
<a href="https://www.indiegogo.com/projects/pi-top-a-raspberry-pi-laptop-you-build-yourself">IndieGoGo Project (the PiTop)</a>,
announced a 7-in WVGA capacitive touch display, and a new model (the A+) coming
soon!</p>
]]></summary>
        <updated>Fri Oct 24 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-rpi-display</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[A couple AWS Tips &amp; Tricks]]></title>
        <link>http://joelkleier.com/blog/2014-10-aws-tips</link>
        <summary><![CDATA[<p>Recently, I&#39;ve been playing around with AWS -- here are a couple of tips/tricks
I found when I had to fix some problems. Hopefully they can help, but: your
mileage may vary!</p>
<h2 id="attaching-and-detaching-a-root-volume">Attaching and Detaching a root volume</h2>
<p><em>Problem:</em> you didn&#39;t specify <code>nobootwait</code> as an option in fstab, and you detached
the volume from an instance, BUT you still want to get back into that instance.</p>
<ol>
<li>Make sure the instance you want to get back into is shutdown (we&#39;ll call this &#39;old instance&#39;)</li>
<li>Either create a new instance or use an existing instance (we&#39;ll call this &#39;new instance&#39;)</li>
<li>Detach the root volume from the old instance, and attach it to the new instance</li>
<li>Boot up new instance, and mount it temporarily with a command something like <code>mkdir -p /media/tmpmnt/ &amp;&amp; mount /dev/xdvf /media/tmpmnt/</code></li>
<li>Modify the old instance fstab (<code>sudo vim /media/tmpmount/etc/fstab</code>) by commenting out, deleting, or modifying the offending line</li>
<li>Unmount old instance root volume from new instance (<code>umount /media/tmpmnt/</code>)</li>
<li>Attach to old instance root volume back to old instance -- <strong>NOTE:</strong> you will need to explicitly use the partiion number on the device to mount it is root, IE <code>/dev/sda1</code></li>
<li>Boot up old instance, and it works!</li>
</ol>
<h2 id="enabling-or-disabling-public-ip-on-an-already-created-instance">Enabling or Disabling Public IP on an already created instance</h2>
<p><em>Problem:</em> you want to switch the &#39;Automatically assign Public IP&#39; option for
an instance... but you can&#39;t do this because it&#39;s already created.</p>
<p>Basically, you need to detach the root volume on the
old instance, create a new instance, detach the root volume on the new instance,
attach the old root instance to the new instance as the root volume, then delete
the new instances detached root volume.</p>
<p>After you do that, you boot up the new instance and test it out, then delete the
old instance as well.</p>
]]></summary>
        <updated>Thu Oct 23 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-aws-tips</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[metalsmith]]></title>
        <link>http://joelkleier.com/blog/2014-06-metalsmith</link>
        <summary><![CDATA[<p>While updating the look and feel of my site, I decided to explore some other
static site generators, just to see what&#39;s out there. <a href="http://metalsmith.io">Metalsmith</a> caught
my eye, and I had to play around with it.</p>
<p>Turns out, it is <em>super</em> simple to setup, and very composable. I almost think
it&#39;s simpler that <a href="http://github.com/zombified/ef.sh">ef.sh</a> in many ways, and it&#39;s faster, with more features!
The only downside is that there <em>is</em> more setup involved, but not much.</p>
<p>If you get a chance, I&#39;d recommend checking it out. Not perfect for all needs,
and not the star student... but if it keeps being worked on, it has great
potential. My one criticism is a general lack of great documentation! The code
is pretty terse and easy to follow though, so there is that.</p>
<p>Also, I&#39;m sorry for the id/uid/guid updates on the rss/atom feeds... I decided
to just use permalinks. Simple, and a lot more portable going forward.</p>
]]></summary>
        <updated>Sat Jun 07 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-06-metalsmith</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[rss2email]]></title>
        <link>http://joelkleier.com/blog/2014-03-rss2email</link>
        <summary><![CDATA[<p>March 13, 2013 -- Google <a href="http://googlereader.blogspot.com/2013/03/powering-down-google-reader.html">announced</a> the shutdown of Google Reader. Honestly,
I became a little pissed. I mean, I certainly didn&#39;t use Reader a lot, but it
was <em>so</em> convenient to keep track of my podcasts and news, especially the ones
that weren&#39;t updated often. It also, usually, gave me a pretty good history
of posts, beyond what was listed in the feed.</p>
<p>Alas, it was not to be, and, in the end, it&#39;s probably a good thing. The
shutdown did one great thing: it forced me to find a <em>better</em> solution for
<em>my</em> use case.</p>
<p>At this point, the hunt was on. I tried <a href="http://feedly.com/index.html#discover">Feedly</a>, but it didn&#39;t fit my
wants. I had a problem with the plugins and how you viewed feeds. Then I
moved on to <a href="https://theoldreader.com/">The Old Reader</a>, which was mostly a clone of Google Reader,
but a clone of the good parts before Google started futzing with it!</p>
<p>For awhile, it was nice and useful. Quickly, though, it became apparent to me
that it was <em>another</em> service I had to log into, and it didn&#39;t have a great
mobile offering. It was a little slow due to the massive attention it was
getting, and they even announced that they would have to shutdown at one point.</p>
<p>That announcement and the troubles I was running into with the app made me
realize -- I had gone from one service that held the keys to the information
I wanted, into to the hands of another.</p>
<p>This realization forced me to work a little harder on a side project:
<a href="https://github.com/zombified/slicerss">slicerss</a>, which has since been pretty much abandoned. This project let me
really customize how I wanted to read my rss feeds. I setup a very minimal
UI, and it had all the (minimal) features I needed out of it. But, it was
slow... and bound to my home server.</p>
<p>Ultimately, I discovered the key to what I want: I don&#39;t want to even <em>check</em>
another service, and most of the time I just want to view the original article
anyway. I don&#39;t want to share (most of the time) or organize my feeds.</p>
<p>I just want a river of news that makes it easy to mark or save an article and
a link to the original.</p>
<p>Enter <a href="https://pypi.python.org/pypi/rss2email">rss2email</a> - a project which has been in development since at least
2006 (that&#39;s the date of v2.56 in the changelog). What does it do? Very
simply, it downloads a set of RSS feeds, keeps track of which ones it has
sent you, and emails the ones it hasn&#39;t.</p>
<p>Super, super, simple. Zero dependence on 3rd party services or proprietary
software, an active project, and minimal system requirements. Plus, it&#39;s
available anywhere I can access my email! I can use my email system to
flag/pin/star or save any particular articles I want to, and I can just delete
the rest.</p>
<p>Why I didn&#39;t do this sooner? Beats me. Now I just have a cron job that runs
<code>r2e run</code> once a day, and then, when I want to, I can just check my email.</p>
]]></summary>
        <updated>Wed Mar 26 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-03-rss2email</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
</feed>
