<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Electric Froth</title>
    <subtitle>Brewlog, musings, and an outlet for random stuff by Joel Kleier</subtitle>
    <link rel="self">http://joelkleier.com/atom.xml</link>
    <link>http://joelkleier.com</link>
    <updated>Fri Dec 12 2014 08:21:54 GMT-0600 (CST)</updated>

    <entry>
        <title><![CDATA[LD48 31 &#x27;Post-Mortem&#x27;]]></title>
        <link>http://joelkleier.com/blog/2014-12-ld48-31-post-mortem</link>
        <summary><![CDATA[<div class="sect1">
<h2 id="_what_is_it">What is it?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In a sentance, the Ludum Dare is an event that acts as a focal point for learning
how to eschew distraction and unnecessary complication. I encourage you to
<a href="http://ludumdare.com/compo/">check it out</a>!</p>
</div>
<div class="paragraph">
<p>The theme this year was <em>Entire Game on One Screen</em>, and my entry is called
<a href="http://ludumdare.com/compo/ludum-dare-31/?action=preview&amp;uid=7263">Asteroid Miner</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_why_did_i_participate">Why did I participate?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I absolutely <em>love</em> this "competition" because it emphasizes the <em>process</em> of
creating something over the final product. Certainly, high scores and
premium placement post-competition are desireable, but not so desirable that
they become an overriding focus for participants.</p>
</div>
<div class="paragraph">
<p>Above all, it&#8217;s an opportunity to mark dedicated time on my calendar for practice
of a skill that requires perpetual attention to master: the ability to focus
and perform efficiently, simply, and quickly.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_went_right">What Went Right?</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>My wife was absolutely amazing&#8201;&#8212;&#8201;it is <strong>very</strong> important to have the support of
those you love and respect when every part of you is tired and your mind is
practically putty. Every word of encouragment helps renew commitement
to the process of seeing the 48-hours through.</p>
</li>
<li>
<p>Tooling&#8201;&#8212;&#8201;I made a concious effort to look back at my previous entries and
use only tooling that I felt I did good work with. To that end, I used
<a href="https://love2d.org">LÃ–VE</a>&#8201;&#8212;&#8201;a framework that you script with Lua. Not my
favorite language, but the community is solid, the documentation is good,
and the tools are easy to dive into.</p>
</li>
<li>
<p>Twitter turned out to be a very motivating tool&#8201;&#8212;&#8201;<em>#LDJAM</em> was trending so
every tweet got quite a bit of attention, this was really the first time
I&#8217;ve interacted with complete strangers so actively. Normally I just lurk
in social environments, but this was definitely a positive experience and
it makes me curious how much more useful it could be.</p>
</li>
<li>
<p><a href="http://www.gifgrabber.com/">GifGrabber</a> and <a href="https://imageoptim.com/">ImageOptim</a>
are two fantastic tools for generating short little progress "videos"&#8201;&#8212;&#8201;and
the "videos" were a motivation all in themselves. After taking a series of
these throughout my game, it let me reflect on my progress much more
visually that a static screenshot (or nothing at all) would. This is
surprisingly powerful, epsecially when you are working on something that is
very dynamic and visual by nature.</p>
</li>
<li>
<p>I stayed hydrated and didn&#8217;t starve myself&#8201;&#8212;&#8201;seemingly irrelevant maybe,
but this is an important one. Learned that lesson <em>long</em> ago.</p>
</li>
<li>
<p>My recent (incomplete) dive into 2d game physics <em>really</em> helped out. Not
a particuarly impressive example, but I was quite proud of myself when I
finished the code to dynamically create polygonal circles, then deform them
in such a manner to make them appear to be odd-shaped asteroids! It was a
moment that I would have normally gone hunting for examples online. This time
I thought through the entire problem, and already <em>knew</em> how to solve it.
Such a small thing, but so very motivating.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_went_wrong">What Went Wrong?</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Distraction! I spent about 3 hours watching TV that I <em>could</em> have been
making my game better! To be fair, some level of distraction is required
to maintain sanity in stressful situations, but 3 hours seems to be more
than I needed.</p>
</li>
<li>
<p>I didn&#8217;t didn&#8217;t <em>stop</em> when I was getting tired on the second night&#8230;&#8203; which
just put me behind&#8201;&#8212;&#8201;not only did I make bad decisions, I ended up short
changing myself by over-sleeping the next day and not getting as much work
done as I could have.</p>
</li>
<li>
<p>If economy of time is important, don&#8217;t explore unfamiliar tools, and if you
do <em>have</em> to, make certain they <em>are</em> the right tool for the job before you
invest time into using them. In my case, this was <code>love.physics</code>. Really
cool, but <em>way</em> over-kill, and trying to use it cost me about 4-hours of
work.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_can_i_do_better_next_time">What Can I Do Better Next Time?</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Don&#8217;t use unfamiliar tools</p>
</li>
<li>
<p>Sleep on a schedule</p>
</li>
<li>
<p>Less distraction</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_parting_words">Parting words</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Everytime I participate, it strengthens my ability to just <em>get stuff done</em> and
forces me out of the "decision paralysis" mindset. All to often it is easy to
get into a state where <em>analysis</em> of a problem turns into <em>decision paralysis</em>.
This state is the death of productivity of any kind, and turns into avoidance
or pure laziness. Bad habits.</p>
</div>
<div class="paragraph">
<p>This was my first participation in the Ludum Dare in about a year, and I&#8217;m glad
I did it. Will I be doing this again? If life permits (and it is a priority
of mine to make sure it does), you bet!</p>
</div>
</div>
</div>]]></summary>
        <updated>Fri Dec 12 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-12-ld48-31-post-mortem</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Game Physics - Rotation]]></title>
        <link>http://joelkleier.com/blog/2014-12-physics-2d-game-physics--rotation</link>
        <summary><![CDATA[<div class="paragraph">
<p>Developing hobby games I usually just stick to libraries that already handle
things like <em>physics</em>. Basically I follow examples, copy/paste code, and plugin
numbers. This is good for getting a hobby game <em>built</em> but not so good to learn the
math and gain an intuition of what&#8217;s actually going on, which is what I want
to do now. <a href="http://joelkleier.com/blog/2014-11-physics/">part 0</a>
<a href="http://joelkleier.com/blog/2014-11-2d-game-physics&#8212;&#8203;vectors/">part 1</a>
<strong>part 2</strong>.</p>
</div>
<div class="paragraph">
<p>Vector rotation is simple in principle! But really digging in and getting to
understand the math made may head&#8230;&#8203;. <em>spin</em>. hehe.</p>
</div>
<div class="paragraph">
<p>Anyhow, I did discover some things, but hit a wall with the intuition. I think
I could get past this wall, but I would need to invest more time and effort than
I really want to into understanding the math to a absurdly completionist point
(and who knows, maybe I only think I understand it now!). To that end, I&#8217;d
like to talk about what I <em>do</em> think I understand.</p>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
<div class="paragraph">
<p>This article was written as I attempt to learn the subject matter at hand,
so there is a strong possibility of incorrect information based on my own ignorance.</p>
</div>
<div class="paragraph">
<p>Please, if you see an error of any kind, feel free to send me an email!</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sect1">
<h2 id="_rotation">Rotation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The simple case is to consider what happens when you rotate a unit vector in
90 degree increments. Specifically, let&#8217;s consider the vector [1, 0]. The
sequence of values will be: <em>[1, 0], [0, 1], [-1, 0], [0, -1]</em></p>
</div>
<div class="paragraph">
<p>From this, a pattern emerges:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>x' = -y
y' = x</pre>
</div>
</div>
<div class="paragraph">
<p>This breaks down for any other increment than 90, but that&#8217;s because 90 is
a special case for a more generalized formula (where <code>t</code> is an angle):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>x' = cos(t)*x - sin(t)*y
y' = sin(t)*x + cos(t)*y</pre>
</div>
</div>
<div class="paragraph">
<p>This is more often represented in <em>matrix</em> form (called a <em>rotation matrix</em>):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>R(t) = |cos(t) -sin(t)|
       |sin(t)  cos(t)|</pre>
</div>
</div>
<div class="paragraph">
<p>But when it&#8217;s multiplied by a vector <code>[x, y]</code> you&#8217;ll get the first formula. Even
with all of the reading and exploration that I&#8217;ve done, I don&#8217;t think I fully
<em>grok</em> this enough to really explain it without regurgitating text book information
that doesn&#8217;t really explain everything. My current understanding is that the
formula is basically deriving an <code>x</code>/<code>y</code> offset caused by the first angle, then
figuring out the second angle in <code>x</code>/<code>y</code>, then applying the offset.</p>
</div>
<div class="paragraph">
<p>Yay! Time for some code, which is a lot more concise that the above :)</p>
</div>
<div class="listingblock">
<div class="title">vector.nim</div>
<div class="content">
<pre class="highlight"><code class="language-nimrod" data-lang="nimrod">proc rotate*(self: Vector, angle: float): Vector =
    var cs = cos(angle), s = sin(angle)
    result.x = cs*self.x - s*y
    result.y = s*self.x + cs*self.y

# a special case, slightly faster than the general formula
proc rotate90*(self: Vector): Vector =
    result.x = -self.y
    result.y = self.x</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I&#8217;ve briefly explained what needs to be done to calculate the rotation of
a vector, and I think I&#8217;ve learned a bit along the way&#8201;&#8212;&#8201;though not enough
to truly <em>grok</em> the operation.</p>
</div>
<div class="paragraph">
<p>Next week will likely not be a continuation of this series, but a diversion
into the 31st <a href="http://ludumdare.com/compo">Ludum Dare</a> 48-hour game competition,
which I am competing in this weekend!</p>
</div>
</div>
</div>]]></summary>
        <updated>Fri Dec 05 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-12-physics-2d-game-physics--rotation</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Game Physics - Vectors]]></title>
        <link>http://joelkleier.com/blog/2014-11-2d-game-physics--vectors</link>
        <summary><![CDATA[<div class="paragraph">
<p>Developing hobby games I usually just stick to libraries that already handle
things like <em>physics</em>. Basically I follow examples, copy/paste code, and plugin
numbers. This is good for getting a hobby game <em>built</em> but not so good to learn the
math and gain an intuition of what&#8217;s actually going on, which is what I want
to do now. <a href="http://joelkleier.com/blog/2014-11-physics/">part 0</a>
<strong>part 1</strong>
<a href="http://joelkleier.com/blog/2014-12-2d-game-physics&#8212;&#8203;rotation/">part 2</a>.</p>
</div>
<div class="paragraph">
<p><em>Vectors</em> are the basic building block of 2D game physics. They describe the
distance and direction of game objects (from player characters to projectiles,
even lighting). As such, I think they may be the <em>best</em> place to start this
exploration and self-learning exercise.</p>
</div>
<div class="sect1">
<h2 id="_table_of_contents">Table of Contents</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="#what-are-vectors">What are Vectors?</a></p>
</li>
<li>
<p><a href="#adding-subtracting">Adding and Subtracting Vectors</a></p>
</li>
<li>
<p><a href="#scaling">Scaling Vectors</a></p>
</li>
<li>
<p><a href="#unit-normalized">Unit Vectors and Normalized Vectors</a></p>
</li>
<li>
<p><a href="#dot-product">The Dot Product</a></p>
</li>
<li>
<p><a href="#projection">Projecting a Vector onto Another</a></p>
</li>
<li>
<p><a href="#conclusion">Vectors - Conclusion</a></p>
</li>
</ul>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
<div class="paragraph">
<p>This article was written as I attempt to learn the subject matter at hand,
so there is a strong possibility of incorrect information based on my own ignorance.</p>
</div>
<div class="paragraph">
<p>Please, if you see an error of any kind, feel free to send me an email!</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Check out the source code to this page, I used
<a href="http://www.processingjs.org">processing.js</a> to generate all the visual examples,
and I tried to pepper the source files with a bunch of comments.</p>
</div>
</td>
</tr>
</table>
</div>
<!--
I used "processing.js" (http://processingjs.org/) to generate all the visual
examples on this page.
-->
<script src='/static/processing.min.js'></script>
</div>
</div>
<div class="sect1">
<h2 id="what-are-vectors">What are Vectors?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vectors represent two measurements&#8201;&#8212;&#8201;a magnitude and a direction. For example,
"traveling at 2 kph (kilometers per hour) due east" is a vector! This data is
descriptive, but not necessarily useful for computation in that format.  To
make the data more useful, it is typically encoded into two numerical values,
<code>x</code> and <code>y</code>, representing a distance from the origin on the x and y axis.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
I am assuming the use of a 2-dimensiononal, <a href="http://en.wikipedia.org/wiki/Cartesian_coordinate_system">Cartesian coordinate system</a>, and kind of ignoring 3-dimensional stuff for now
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Our "traveling at 2 kph due east" example then turns into something like <code>[2, 0]</code>,
which would look something like:</p>
</div>
<div class="paragraph">
<p><canvas data-processing-sources="/static/processingjs/2d-game-physics--vectors/vectors.pde /static/processingjs/2d-game-physics--vectors/example1.pde"></canvas></p>
</div>
<div class="paragraph">
<p>The important thing to remember is in order to think about a (2D) vector
in concrete numbers, we can express it as a pair of these x and y values.
IE (0, 1), (30.3, 2.2), etc. These 2 numbers represent
a <em>distance</em> on the x and y axis, and not a point&#8201;&#8212;&#8201;this is important
because it means vectors are encoded as the <em>legs</em> of a <em>right triangle</em>. Why
is this important? I&#8217;ve found that it helps me to <em>visualize</em> vectors in a 2D
space.</p>
</div>
<div class="paragraph">
<p>In terms of (Nim) code, this could be expressed as a 2 dimensional array, a tuple,
or more explicitly, like:</p>
</div>
<div class="listingblock">
<div class="title">vector.nim</div>
<div class="content">
<pre class="highlight"><code class="language-nimrod" data-lang="nimrod">type
  Vector* = object
    x*: float
    y*: float</code></pre>
</div>
</div>
<div class="paragraph">
<p>I like the more explicit approach in this case because I think it&#8217;ll make
writing dependent code a little more clear, and I need as much clarity I can
get.</p>
</div>
<div class="paragraph">
<p>The first really useful value to calculate based off of this vector encoding is
the <em>magnitude</em>. This turns out to be pretty simple. Remember how the this vector
encoding is basically showing us the lengths of the legs of a <em>right triangle</em>?
Taking advantage of that, we can use Pythagoras Theorem, which boils down to
this formula: <em>x<sup>2</sup> + y<sup>2</sup> = h<sup>2</sup></em>.</p>
</div>
<div class="paragraph">
<p>The <em>magnitude</em>, then, is the <em>h</em> value, and since the formula is for <em>h<sup>2</sup></em>,
rearranging it to solve for <em>h</em> turns it into: <em>sqrt(x<sup>2</sup> + y^2) = h</em>.</p>
</div>
<div class="paragraph">
<p>I think the results of both formulas will be useful later, so I&#8217;m going to make
two procedures&#8201;&#8212;&#8201;one to calculate the magnitude squared (<em>h<sup>2</sup></em>) and the
magnitude itself (just <em>h</em>), here&#8217;s the code:</p>
</div>
<div class="listingblock">
<div class="title">vector.nim</div>
<div class="content">
<pre class="highlight"><code class="language-nimrod" data-lang="nimrod"># magSq == "magnitude squared" == h*h
proc magnitudeSq*(self: Vector): float =
  result = self.x * self.x + self.y * self.y

# the actual magnitude value (h)
proc magnitude*(self: Vector): float =
  result = sqrt(self.magSq)</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
the <code>sqrt</code> comes from the Nim standard library <code>math</code>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The definition of a vector is a <em>magnitude</em> AND <em>direction, so how do we encode
the direction in terms of <code>x</code> and <code>y</code>? Simple put, the _sign</em> of the <code>x</code> and <code>y</code>
values indicates their direction. If the <code>x</code> is <em>positive</em> then the vector is going an
<em>easterly</em> direction (if we&#8217;re thinking of <em>direction</em> in terms of the cardinal
directions) and a <em>positive</em> <code>y</code> would be a <em>northernly</em> direction. A <em>negative</em>
<code>x</code> value will be in a <em>westerly</em> direction, and a <em>negative</em> <code>y</code> value would
be in a <em>southernly</em> direction.</p>
</div>
<div class="paragraph">
<p>In terms of code, there&#8217;s nothing extra needed since <code>Vector.x</code> and <code>Vector.y</code> are
signed values.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="adding-subtracting">Adding and Subtracting Vectors</h2>
<div class="sectionbody">
<div class="paragraph">
<p>First, why add and subtract vectors? The best answer is an example: presuming a characters
movement is described by velocity (direction and speed, encoded as a vector) and
acceleration (change in direction and speed, encoded as a vector), then it is
only natural that when it comes time for a character to move within the simulation,
their <em>acceleration</em> should be added to their <em>velocity</em>, and the result should
be added to their current position. Being able to add <em>acceleration</em> and <em>velocity</em>
(both vectors) becomes super important here.</p>
</div>
<div class="paragraph">
<p>Adding and subtracting vectors, conceptually, is like traveling along the the
hypotenuse of one triangle, then traveling along the hypotenuse of a second
triangle. From where the first vector began to where the second vector ends is
the resulting vector. Confusing?
<a href="https://www.khanacademy.org/math/linear-algebra/vectors_and_spaces/vectors/v/adding-vectors">Khan Academy</a>
has a pretty good video on adding vectors.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s my attempt to visualize it:</p>
</div>
<div class="paragraph">
<p>The first vector:</p>
</div>
<div class="paragraph">
<p><canvas data-processing-sources="/static/processingjs/2d-game-physics--vectors/vectors.pde /static/processingjs/2d-game-physics--vectors/example2.pde"></canvas></p>
</div>
<div class="paragraph">
<p>The second vector:</p>
</div>
<div class="paragraph">
<p><canvas data-processing-sources="/static/processingjs/2d-game-physics--vectors/vectors.pde /static/processingjs/2d-game-physics--vectors/example3.pde"></canvas></p>
</div>
<div class="paragraph">
<p>Traveling along the first vector, then traveling along the second vector to get a third vector:</p>
</div>
<div class="paragraph">
<p><canvas data-processing-sources="/static/processingjs/2d-game-physics--vectors/vectors.pde /static/processingjs/2d-game-physics--vectors/example4.pde"></canvas></p>
</div>
<div class="paragraph">
<p>The resulting vector:</p>
</div>
<div class="paragraph">
<p><canvas data-processing-sources="/static/processingjs/2d-game-physics--vectors/vectors.pde /static/processingjs/2d-game-physics--vectors/example5.pde"></canvas></p>
</div>
<div class="paragraph">
<p>The math for this is straight forward: add the two <code>x</code> values for the result <code>x</code> value,
add the two <code>y</code> values for the result <code>y</code> value. The same formula can be used for
subtracting vectors as well, just subract the <code>x</code> and <code>y</code> values instead of adding them.</p>
</div>
<div class="paragraph">
<p>The resulting code might look like:</p>
</div>
<div class="listingblock">
<div class="title">vector.nim</div>
<div class="content">
<pre class="highlight"><code class="language-nimrod" data-lang="nimrod"># just overload the `+` operator
proc `+`*(a, b: Vector): Vector =
  result.x = a.x + b.x
  result.y = a.y + b.y

# just overload the `-` operator
proc `-`*(a, b: Vector): Vector =
  result.x = a.x - b.x
  result.y = a.y - b.y</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="scaling">Scaling Vectors</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A <em>scalar</em> is just a single number, and <em>scaling</em> a vector by a <em>scalar</em> is the
act of multiplying the <em>vector</em> by the <em>scalar</em>. Why is this useful? Let&#8217;s say
there&#8217;s a scenario where a ball rolls along a floor&#8230;&#8203; how fast does it slow
down? This could be modeled by using a <em>scalar</em> value for friction, and shrinking
the <em>velocity</em> (a vector) of the ball by that much every tick of the simulation.</p>
</div>
<div class="paragraph">
<p>The math for scaling a vector is as simple as multiplying the <em>scalar</em> by the
<code>x</code> and <code>y</code> components of the vector. In terms of code, it might look something
like:</p>
</div>
<div class="listingblock">
<div class="title">vector.nim</div>
<div class="content">
<pre class="highlight"><code class="language-nimrod" data-lang="nimrod"># just overloaded the `*` operator
proc `*`*(a: Vector, b: float): Vector =
  result.x = a.x * b;
  result.y = a.y * b;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="unit-normalized">Unit Vectors and Normalized Vectors</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A <em>unit vector</em> is a vector who&#8217;s length/magnitude is exactly 1. A <em>normalized
vector</em> is a vector who&#8217;s components have been divided by it&#8217;s magnitude in order
to be in proportion with a unit vector. For example, the vector <code>[1, 2]</code> has a
magnitude of about <code>2.236</code>. If this vector is <em>normalized</em>, it&#8217;s value would
become <code>[1/2.236, 2/2.236]</code>.</p>
</div>
<div class="paragraph">
<p>Why is this useful? The key is that a normalized vector is <em>proportional</em> to
the original vector. This means the <em>normalized</em> vector carries direction with
a proportional encoding for magnitude, thus enabling the <em>normalized</em> vector to
be scaled to any size proportional to the original magnitude.</p>
</div>
<div class="paragraph">
<p>Again, why is this useful? I think it&#8217;s best illustrated with an example! Think
of light reflecting off of several objects. Each object has a vector describing
an amount of light that get&#8217;s reflected, as well as a direction of reflection.
The intensity of light can be represented by a single scalar value, turning the
problem into one of <em>scaling</em> each objects light vector.</p>
</div>
<div class="paragraph">
<p>If each object&#8217;s light vector is <em>normalized</em>, then they will have a consistent
representation of reflected light based on the same <em>scale</em>. If each light vector
were <strong>not</strong> <em>normalized</em>, then there would be a very inconsistent representation
of light, each object behaving like it existed in it&#8217;s own little world.</p>
</div>
<div class="paragraph">
<p>Whew. I hope that helped. Here&#8217;s some code to implement normalization:</p>
</div>
<div class="listingblock">
<div class="title">vector.nim</div>
<div class="content">
<pre class="highlight"><code class="language-nimrod" data-lang="nimrod">proc normalize*(self: Vector): Vector =
  result.x = self.x/self.mag;
  result.y = self.y/self.mag;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="dot-product">The Dot Product</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Seriously, <a href="http://blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-2/">Wolfire&#8217;s Linear Algebra for Game Developers, Part 2</a>
has a great example of the <em>dot product</em> and why it&#8217;s useful. Not even going
to try to make a better example and explanation, because I doubt I could at this point.</p>
</div>
<div class="paragraph">
<p>I&#8217;ll paraphrase though, the <em>dot product</em> is kind of a proportion of how much
the vectors are pointing in the same direction. It&#8217;s also kind of useful in
<a href="#projection">Projecting a Vector onto Another</a>.</p>
</div>
<div class="paragraph">
<p>Suffice it to say, here&#8217;s some code for implementing the dot product:</p>
</div>
<div class="listingblock">
<div class="title">vector.nim</div>
<div class="content">
<pre class="highlight"><code class="language-nimrod" data-lang="nimrod">proc dot*(A, B: Vector): float =
  return A.x*B.x + A.y*B.y;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Notice that this code looks an aweful lot like the <em>magnitudeSq</em> method! Intuitively,
then, the dot product of vector A against intself would be the <em>h<sup>2</sup></em> value
when solving for Pythagora&#8217;s Theorem&#8230;&#8203; which means our magnitude code could
be adjusted to look more like:</p>
</div>
<div class="listingblock">
<div class="title">vector.nim</div>
<div class="content">
<pre class="highlight"><code class="language-nimrod" data-lang="nimrod"># just get the square-root of the dot product of the vector against itself
proc magnitude*(self: Vector): float =
  result = sqrt(self.dot(self))</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="projection">Projecting a Vector onto Another</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The act of <em>projecting</em> a vector onto another is, essentially, finding the vector
between the <em>points</em> <code>a</code> and <code>b</code> in the following image:</p>
</div>
<div class="paragraph">
<p><canvas data-processing-sources="/static/processingjs/2d-game-physics--vectors/vectors.pde /static/processingjs/2d-game-physics--vectors/example6.pde"></canvas></p>
</div>
<div class="paragraph">
<p>Intuitively, if the vector being projected onto is a <em>normalized</em> vector, then
really the problem becomes straight forward! First, find the <em>magnitude</em> of the
vector resulting from a vector projected onto a <em>normalized</em> vector (turns out,
this is the <em>dot product</em>). Then, scale the <em>normalized</em> vector (who&#8217;s legs are
proportional to each other) by the <em>magnitude</em> to get the resulting vector
encoded as <code>x</code> and <code>y</code> values.</p>
</div>
<div class="paragraph">
<p>Why is this useful? This is kinda hard for me to answer in what I feel is total
understanding, as I don&#8217;t think I&#8217;ve actually <em>used</em> it enough to really grasp
it use. The text book answer might be a few things:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>finding the proportion of how much of one vector lies in another&#8217;s
direction (useful for determining if AI with a view arc can see a player,
for example)</p>
</li>
<li>
<p>tying into the first point, finding the angle between two vectors</p>
</li>
<li>
<p>finding the local coordinates of a vector on an arbitrary axis other than
the <code>x</code> and <code>y</code> axis</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>That&#8217;s still a pretty meaty explaination. I guess it boils down to being able
to see a vector in the context of another, and making assumptions based off the
result.</p>
</div>
<div class="paragraph">
<p>I&#8217;m pretty sure that I will be using <em>projection</em> pretty heavily once I start
getting into implementing the <a href="http://www.codezealot.org/archives/55">Separating Axis Theorem</a>.</p>
</div>
<div class="paragraph">
<p>Enough talk! Let&#8217;s see some code:</p>
</div>
<div class="listingblock">
<div class="title">vector.nim</div>
<div class="content">
<pre class="highlight"><code class="language-nimrod" data-lang="nimrod"># this procedure handles a more generalized form of projection (IE when unit
# vectors aren't explicitly used
# A projected onto B
proc project*(A, B: Vector): Vector =
    var magSq = B.dot(B);
    var dot = A.dot(B) / magSq;
    result.x = A.x * dot;
    result.y = A.y * dot;

# B is an already normalized vector
# A projected onto B
proc projectN*(A, B: Vector): Vector =
    var dot = A.dot(B);
    result.x = A.x * dot;
    result.y = A.x * dot;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="conclusion">Vectors - Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I <em>think</em> I&#8217;ve gone through all of the absolute basics of vectors as they
immediately relate to 2D game physics. The next
step for me to take will be to (re)learn about linear transformations (for
things like vector rotation, reflection, etc). I&#8217;m fairly certain there are
shortcuts for these things, especially for 2D, but the goal is to develop an
intuition about this stuff, so it&#8217;s important that I don&#8217;t just copy/paste
code or take every formula at face value.</p>
</div>
<div class="paragraph">
<p>Next time will <em>probably</em> be a much shorter post, specifically covering
my re-learning useful linear transformations for 2D
vectors and hopefully dealing with a lot more code!</p>
</div>
</div>
</div>]]></summary>
        <updated>Fri Nov 28 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-2d-game-physics--vectors</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[30 Day Challenge, COMPLETE]]></title>
        <link>http://joelkleier.com/blog/2014-11-30-day-challenge</link>
        <summary><![CDATA[<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>The next 30 days are going to pass whether you like it or not, so why not think
about something you&#8217;ve always wanted to try, and give it a shot!</p>
</div>
</blockquote>
<div class="attribution">
&#8212; Matt Cutts in his TED Talk "Try something new for 30 days"
</div>
</div>
<div class="paragraph">
<p>Those words really resonated with me when I watched
<a href="http://www.ted.com/talks/matt_cutts_try_something_new_for_30_days">Matt Cutt&#8217;s TED Talk</a>,
and launched into the idea of writing a blog post once per day for 30 days.</p>
</div>
<div class="paragraph">
<p>I latched onto writing on my blog because for <em>years</em> it&#8217;s been a very inconsistent,
on/off activity&#8201;&#8212;&#8201;one that had close to the lowest priority in my life. Inverting
the priority of this activity has forced me to really consider the how and
why&#8217;s of keeping a blog.</p>
</div>
<div class="paragraph">
<p>What I&#8217;ve discovered:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>I can&#8217;t post something unless I give it an hour or more of my attention (the
quality of the writing goes way down with less time, to the point where I
am writing what essentially amounts to a long-form tweet or a facebook/g+
type of post)</p>
</li>
<li>
<p>Most of the posts I&#8217;m particuarly happy with were written either early in
the morning before work or before dinner time (the longer I put it off, the
more likely I was to fall into the trap of posting filler for filler&#8217;s sake)</p>
</li>
<li>
<p>Writing down questions about, and snippets of, code that I don&#8217;t understand
<em>really</em> helped me focus and gain a deeper understanding than I would have
if I just <em>looked</em> at it&#8201;&#8212;&#8201;subsequently, I feel like these were some of my
best posts in terms of content (if not in quality of writing)</p>
</li>
<li>
<p>Filler for filler&#8217;s sake makes nobody happy&#8230;&#8203;</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The result of this challenge has really made me think about how I want to write,
how often I want to write, and what I feel like I&#8217;m good(ish) at writing. The
conclusion I&#8217;ve come too is that I don&#8217;t what to write a <em>post</em> every day. I just
end up with lots of filler that clutters up my blog and makes it look a little
more trashy and irrelevant.</p>
</div>
<div class="paragraph">
<p>I&#8217;ve considered how to proceed, and I think I still want to write and work on
a post or article every day, but only publish once per week. There are times
when I think I&#8217;ll probably post more&#8201;&#8212;&#8201;I post everything to the main blog, and
then have a 'brewlog' which is a tagged subset of posts about brewing&#8230;&#8203; those
posts, and similiar posts, will probably still be published irreguarly. I won&#8217;t
be considering those posts my weekly article.</p>
</div>
<div class="paragraph">
<p>The subject matter I&#8217;ve enjoyed most this past month has definitely been the
<em>Nim!</em> posts&#8201;&#8212;&#8201;writing was a great way to focus and clarify the process of
learning Nim. In the future, I&#8217;d like to continue to apply this technique to
learning more than just new computer languages.</p>
</div>
<div class="paragraph">
<p>In short:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Posting just to post is out.</p>
</li>
<li>
<p>I&#8217;m going to post a regular article once per week.</p>
</li>
<li>
<p>My regular article will be about <em>learning</em> something new.</p>
</li>
<li>
<p>My regular article will be made with intent, not on the spur of the moment</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>What&#8217;s next? <a href="http://joelkleier.com/blog/2014-11-physics/">Yesterday</a> I posted
about wanting to brush off some dust on my math skills and really learn how to
do proper physical simulation in (2D) games. Specifically, I&#8217;m considering writing
about developing a Nim library or framework for simple 2D physics&#8230;&#8203; purely as
an exercise to develop my understanding of the math required in such a case.</p>
</div>]]></summary>
        <updated>Fri Nov 21 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-30-day-challenge</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Games Physics... Specifically 2D Games Physics]]></title>
        <link>http://joelkleier.com/blog/2014-11-physics</link>
        <summary><![CDATA[<div class="paragraph">
<p>I&#8217;ll be honest: when I&#8217;ve hobby-developed games in my past, I&#8217;ve either used
super simple "physics" or just used an existing framework so as not to get
stuck on implementing any sort of physics simulation. Everytime I move past this
point, though, I&#8217;m left without any real understanding&#8230;&#8203; I plug in the numbers,
retype and copy code, and just hook things up to make them work.</p>
</div>
<div class="paragraph">
<p>This kinda bugs me, so I want to really internalize what it takes to make a
2d physics engine. And by internalize, I mean that I want to brush off some of
the math I studied in high school and college, and really understand how it
applies to physical simulation. In addition, I want to understand how to write
code to do physical simulations&#8230;&#8203; and I don&#8217;t mean just glue code. I want to really
understand what&#8217;s going on behind the scenes, and develop an intuition for it!</p>
</div>
<div class="paragraph">
<p>Why not just stick with the pre-made libraries and frameworks, and leave the physics
stuff up to people who focus a whole lot on physics? It&#8217;s a hobby&#8230;&#8203; and I want
to learn more about it.</p>
</div>
<div class="paragraph">
<p>To do this, I&#8217;ve dug around a bit for some online resources:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-1/">Wolfire&#8217;s <em>Linear Algebra</em> series</a>&#8201;&#8212;&#8201;while not called "physics", it covers some of the basic math behind _physic_al simulation
using a little linear algebra.</p>
</li>
<li>
<p><a href="http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/">Wildbunny&#8217;s <em>Vector maths - a primer for games programmers</a>&#8201;&#8212;&#8201;which covers what it says, basically an overlap of what _Wolfire&#8217;s</em> article is
about.</p>
</li>
<li>
<p><a href="http://www.wildbunny.co.uk/blog/2011/04/06/physics-engines-for-dummies/">Wildbunny&#8217;s <em>Physics Engines for Dummies</em></a>&#8201;&#8212;&#8201;lots of info, but the actual source code costs some cash (which may or may
not be worth it&#8230;&#8203; I wouldn&#8217;t know since I can be a cheapskate when it comes
to this sort of thing, and I&#8217;m probably not going to buy it).</p>
</li>
<li>
<p><a href="http://gafferongames.com/game-physics/">gafferongames.com&#8217;s <em>Game Physics</em> articles</a>&#8201;&#8212;&#8201;some seamingly really good information here, possibly over my head this far
out of maths practice.</p>
</li>
<li>
<p><a href="http://www.rodedev.com/tutorials/gamephysics/">Nate Rode&#8217;s <em>2D Game Physics 101</em></a>&#8201;&#8212;&#8201;some examples of various maths needed for 2D physics.</p>
</li>
<li>
<p><a href="http://gamedevelopment.tutsplus.com/series/how-to-create-a-custom-physics-engine--gamedev-12715">tuts+ <em>How to Create a Custom Physics Engine</em> by Randy Gaul</a>&#8201;&#8212;&#8201;looks, from the outside, to be a fairly comprehensive series of articles on
the math and code needed for creating a 2d physical simulation engine.</p>
</li>
<li>
<p><a href="https://www.khanacademy.org/math/linear-algebra">Khan Academy&#8217;s <em>Linear Algebra</em> subject</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>I&#8217;m <em>certain</em> there are a lot more resources out there on the web, and probably
just as many in meat-space!</p>
</div>
<div class="paragraph">
<p>The first thing I&#8217;m going to do is review some math on
<a href="https://www.khanacademy.org/math/linear-algebra">Khan Academy</a>, then I&#8217;m going to
use Nim to play around with some of these concepts and shake the rust off!</p>
</div>
<div class="paragraph">
<p>Here&#8217;s what I&#8217;ve written on this toppic: <strong>part 0</strong>
<a href="http://joelkleier.com/blog/2014-11-2d-game-physics&#8212;&#8203;vectors/">part 1</a>
<a href="http://joelkleier.com/blog/2014-12-2d-game-physics&#8212;&#8203;rotation/">part 2</a>.</p>
</div>
<div class="paragraph">
<p>Until next time!</p>
</div>]]></summary>
        <updated>Thu Nov 20 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-physics</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[68 Katy]]></title>
        <link>http://joelkleier.com/blog/2014-11-68-katy</link>
        <summary><![CDATA[<div class="paragraph">
<p><a href="http://www.bigmessowires.com/2014/11/17/68-katy-68000-linux-on-a-solderless-breadboard/">This is so awesome</a>.
<a href="http://www.bigmessowires.com/">This guy</a> put together a 68000-based computer,
running linux, on a <em>solderless</em> breadboard. 1MB of address space, 512K 8-bit SRAM,
512K Flash ROM (480K addressible, 32K memory-mapped I/O devices), and runs at 2MHz with
performance closer to a 1MHz 68000 (which is apparently slow&#8230;&#8203; originally the
68000 ran at 8MHz).</p>
</div>
<div class="paragraph">
<p>I love projects like this. They show at once how simple and how complicated and
amazing computers are.</p>
</div>]]></summary>
        <updated>Wed Nov 19 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-68-katy</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Ludum Dare 31 -- Who&#x27;s Ready??]]></title>
        <link>http://joelkleier.com/blog/2014-11-ludum-dare-31</link>
        <summary><![CDATA[<div class="paragraph">
<p>Woohoo!!! <a href="http://ludumdare.com/compo/">Ludum Dare 31</a> is almost upon us! I haven&#8217;t
participated since August 2013 because of life stuff, but I&#8217;m hoping that I can
squeeze in enough time this coming December to make <em>something</em>, even if I don&#8217;t
get to spend the whole time on it, and even if it&#8217;s super crappy.</p>
</div>
<div class="paragraph">
<p><a href="http://ludumdare.com/compo/author/pbdiode/">Here&#8217;s</a> all my old entries&#8230;&#8203; nothing
impressive, but the process of doing it was <em>so</em> worth the time.</p>
</div>]]></summary>
        <updated>Tue Nov 18 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-ludum-dare-31</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Pixel Pioneers- A Brief History of Graphics]]></title>
        <link>http://joelkleier.com/blog/2014-11-history-of-graphics</link>
        <summary><![CDATA[<div class="paragraph">
<p><a href="https://www.youtube.com/playlist?list=PLOQZmjD6P2HlOoEVKOPaCFvLnjP865X1f">Check this out</a>,
it&#8217;s an account of graphics as they relate to games. It&#8217;s planned to be a
four-part series by <a href="https://twitter.com/xboxahoy">Stuart Brown</a>, aka <em>Ahoy</em>.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s the first video for your viewing pleasure:</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="854" height="510" src="//www.youtube.com/embed/dzN2pgL0zeg?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></summary>
        <updated>Mon Nov 17 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-history-of-graphics</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt9 - Pointer Fun]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt9</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt8">last post</a> on Nim, I talked
about how I was learning to use generics. This time, I&#8217;d like to talk a bit
about pointers!</p>
</div>
<div class="paragraph">
<p>The <em>first</em> thing to know is that there are two different types of pointer&#8201;&#8212;&#8201;the "safe" and "unsafe" kind. The "safe" one is <em>traced</em> (in Nim parlance) and
managed by a garbage collector. The <em>untraced</em> ("unsafe") pointers are expected
to be entirely managed by the user&#8201;&#8212;&#8201;these are very useful for accessing hardware,
or interoping with non-Nim code.</p>
</div>
<div class="paragraph">
<p>The <em>seocnd</em> thing to know is that you really don&#8217;t need them unless you are, in
fact, interoping with <em>C</em> code, accessing hardware, or have a very specific
use-case. Of course I didn&#8217;t <em>know</em> that until after writing a few hundred lines
of code and then writing up the first draft of this article&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>In my search for some questions I came up with in the first draft, I came across
<a href="http://stackoverflow.com/questions/22096880/what-is-the-model-of-value-vs-reference-in-nimrod"><em>this</em></a>,
which explained the folly of my ways (well, not directly, but I was able to
think through the problems I was solving with a better understanding).</p>
</div>
<div class="paragraph">
<p>But, <em>awesome</em>! Now I have a much better grasp on when and when <em>not</em> to use
Nim&#8217;s pointer constructs.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s the equivalent of some code I was trying to write (note: this is the
<em>bad example</em> of how to use pointers&#8201;&#8212;&#8201;not that this example <em>won&#8217;t work</em>,
it&#8217;s just not a place you need to use pointers):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-nimrod" data-lang="nimrod">type
  TBaz = object
    y: int
  PBaz = ref TBaz
  TFoo = object
    baz: TBaz
  PFoo = ref TFoo

proc init_new(foo: var PFoo; y: int) =
  foo = PFoo()
  new(foo.baz)
  foo.baz.y = y

proc baz_accessor(f:var PFoo): var PBaz =
  return f.baz
proc `baz_accessor=`(f:var PFoo, baz: PBaz) =
  f.baz.y = baz.y
  discard """and I was doing some other stuff here (which is why I had the 'baz_accessor' property at all"""

var bar: PFoo
PFoo.init_new 1
assert(bar.baz_accessor.y == 1)
assert(bar.baz.y == 1)
bar.baz_accessor = 10
assert(bar.baz_accessor.y == 10)
assert(bar.baz.y == 10)</code></pre>
</div>
</div>
<div class="paragraph">
<p>And here&#8217;s some code whose end result is the same, without pointers (and without
the "old" syntax, which I also found out about from the aboved linked article&#8230;&#8203;):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-nimrod" data-lang="nimrod">type
  Baz = object
    y: int
  Foo = object
    baz: Baz

proc baz_accessor(f:var Foo): var Baz =
  result = f.baz
proc `baz_accessor=`(f:var Foo, y: int) =
  f.baz.y = y
  discard """and I was doing some other stuff here (which is why I had the 'baz_accessor' property at all"""

var bar = Foo(baz: Baz(y:1))
assert(bar.baz_accessor.y == 1)
assert(bar.baz.y == 1)
bar.baz_accessor = 10
assert(bar.baz_accessor.y == 10)
assert(bar.baz.y == 10)</code></pre>
</div>
</div>
<div class="paragraph">
<p>The first example (the one that uses pointers) uses 26 lines and 581 characters.</p>
</div>
<div class="paragraph">
<p>The second example (the seemingly <em>correct</em> one) uses 18 lines and 445 characters.</p>
</div>
<div class="paragraph">
<p>Not a huge difference for this particular example, but as code grows I have first
hand knowledge that it becomes a bigger difference! The second, <em>correct</em> example
is clearly more concise and readable. It also has no actual need for the <code>init_new</code>
method, like the pointer approach really does need. Certainly if initialization
was a more important aspect of the <code>Foo</code> type, then the <code>init_new</code> method would
have stayed in the second example.</p>
</div>
<div class="paragraph">
<p>On-wards and upwards! I have some code to clean up now&#8230;&#8203; but this whole
process has been enlightening.</p>
</div>
<div class="paragraph">
<p><em>2014-11-19 Addendum:</em> After posting this article, I received a nice message from
<a href="http://gradha.github.io/index.html">this guy</a> regarding a couple of things:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>When there is a need for an init function for an object, the convention for
much of the existing code has been something like <code>init_Somthing_</code>, but a newer
convention is to just use <code>init</code> and let the compiler auto-select the correct
<code>init</code> method based on the arguments passed to it. The
<a href="http://nimrod-lang.org/sets.html#init,TSet">A</a>,int[<em>sets</em> library] is a good
example.</p>
</li>
<li>
<p>The other is on the <a href="http://gradha.github.io/articles/2014/10/adding-objectivec-properties-to-nimrod-objects-with-macros.html">subject of getters/setters</a>.
The article describes how to utilize Nim&#8217;s awesome <a href="http://nimrod-lang.org/manual.html#macros">macro</a>
system to automatically generate properties with specific actions for particuarly
styled members of types. Lots of good information there about macros and AST&#8217;s!</p>
</li>
</ol>
</div>]]></summary>
        <updated>Sun Nov 16 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt9</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Why do people watch live streams (or their recordings) of people coding?]]></title>
        <link>http://joelkleier.com/blog/2014-11-programming-videos</link>
        <summary><![CDATA[<div class="paragraph">
<p>There&#8217;s a proliferation of people streaming their coding&#8201;&#8212;&#8201;I&#8217;ve seen it the most
when I follow and participate in the <a href="http://ludumdare.com/compo/">Ludum Dare</a> or
with the likes of <a href="http://notch.net/">notch</a>. I get that people may want to know
the 'secret sauce' of a particular developer&#8230;&#8203; but isn&#8217;t it <em>boring</em> to watch
someone write text? Isn&#8217;t it akin to watching someone handwrite or type a novel?</p>
</div>
<div class="paragraph">
<p>To me that sounds about as much fun as watching grass grow.</p>
</div>
<div class="paragraph">
<p>I mean, I see real value in a discussion between the streamer and the viewer in
a more lecture-like session, and I see the value in recording a session for
voice overs or footage for teaching programming later&#8230;&#8203; but why would anyone
want to just tune into a stream like that?</p>
</div>
<div class="paragraph">
<p>Maybe it&#8217;s different for someone just starting to get into programming. Or maybe
it&#8217;s less that people are tuning into actively watch, but more of a background
thing that they can interact with occasionally?</p>
</div>
<div class="paragraph">
<p>I have no idea&#8230;&#8203;</p>
</div>]]></summary>
        <updated>Sat Nov 15 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-programming-videos</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
</feed>
