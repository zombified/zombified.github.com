<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Electric Froth</title>
    <subtitle>Brewlog, musings, and an outlet for random stuff by Joel Kleier</subtitle>
    <link rel="self">http://joelkleier.com/atom.xml</link>
    <link>http://joelkleier.com</link>
    <updated>Thu Nov 13 2014 22:11:49 GMT-0600 (CST)</updated>

    <entry>
        <title><![CDATA[Nim! pt8 - Generics]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt8</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt7">last post</a> on Nim, I tried to
figure out the answer to "How do I test in Nim?". The answer was, basically,
create a separate program with a bunch of asserts for each module I want to test.
The next thing I decided I should learn about are how Nim implements Generics!</p>
</div>
<div class="paragraph">
<p>Let&#8217;s look at a little snippet of a vector library I&#8217;m developing in Nim:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  TVec2*[T] = object
    x*: T
    y*: T

# pretty print the vector
proc `$`*[T](a:TVec2[T]): string =
  result = "(" &amp; $a.x &amp; "," &amp; $a.y &amp; ")"</pre>
</div>
</div>
<div class="paragraph">
<p>This code actually illustrates <em>several</em> concepts! First, lets talk about
<em>operator overloading</em>. You overload operators by naming a procedure specially,
IE with back-ticks around the operator symbol. There are a couple of operators
that don&#8217;t have overloading implemented (like the assignment operator, <code>=</code>).</p>
</div>
<div class="paragraph">
<p>The above example demonstrates an operator used to automatically convert a type
into a string, very useful when dealing with an unknown generic type.</p>
</div>
<div class="paragraph">
<p>The brackets and <code>T</code> value (<code>[T]</code>) after <code>TVec2*</code> tells the compiler that when
being instantiated, a type <code>T</code> should be specified for <code>TVec2</code>. The <code><strong></code> means
that the <code>Tvec2</code> type should be <em>exported</em> for use outside the module. The <code>T</code>
value can be used anywhere in the subsequent expression (Ex: <code>y</strong>: T</code>).</p>
</div>
<div class="paragraph">
<p>This means that the above definition of <code>TVec2</code> needs to be instantiated something
like so:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>var vec = TVec2[float](x: 1, y: 1)</pre>
</div>
</div>
<div class="paragraph">
<p>Note the <code>[float]</code> after <code>TVec2</code>.</p>
</div>
<div class="paragraph">
<p>This turns out to be pretty straight forward and scaleable to more than one type
being defined generically.</p>
</div>
<div class="paragraph">
<p>One thing to keep in mind is that the brackets <em>always</em> come <em>after</em> the export
symbol (<code>*</code>), if there is one.</p>
</div>]]></summary>
        <updated>Thu Nov 13 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt8</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Rosetta and Philae]]></title>
        <link>http://joelkleier.com/blog/2014-11-rosetta</link>
        <summary><![CDATA[<div class="paragraph">
<p>Truly an astonishing day for humanity!</p>
</div>
<div class="paragraph">
<p>The ESA&#8217;s <a href="http://www.esa.int/Our_Activities/Space_Science/Rosetta/Rosetta_to_deploy_lander_on_12_November">Rosseta mission</a>
Deployed it&#8217;s lander (Philae) to the surface of Comet 67P (aka Churyumov-Gerasimenko).
This mission took 25 years to realise, 10 of which involved <em>Rosetta</em> circling our
sun and using the gravitation forces of Earth and Mars to slingshot it&#8217;s way into
the path of Comet 67P!</p>
</div>
<div class="paragraph">
<p>Here is the first image captured of this historic event:</p>
</div>
<div id="img-farwell-rossetta" class="imageblock">
<div class="content">
<a class="image" href="https://www.flickr.com/photos/europeanspaceagency/15587895747/in/set-72157649192589446/"><img src="https://farm8.staticflickr.com/7473/15587895747_d1a4a70a93_n.jpg" alt="First picture from Philae of Rossetta"></a>
</div>
<div class="title">Figure 1. Farewell Rosetta</div>
</div>
<div class="paragraph">
<p>I recommend the <a href="https://www.flickr.com/photos/europeanspaceagency/">the whole ESA Flickr stream</a>,
it is full of beautiful images!</p>
</div>
<div class="paragraph">
<p>If humanity can do this, humanity can do <em>anything</em>. I&#8217;m truly proud, inspired,
and in awe of the dedication, talent, hard work, and <em>international cooperation</em>
that went into this venture.</p>
</div>
<div class="paragraph">
<p>This is only the very beginning, and it is a wonder to behold first hand.</p>
</div>]]></summary>
        <updated>Wed Nov 12 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-rosetta</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[_why]]></title>
        <link>http://joelkleier.com/blog/2014-11-why</link>
        <summary><![CDATA[<div class="paragraph">
<p><a href="http://en.wikipedia.org/wiki/Why_the_lucky_stiff">_why</a> was active and fairly
well known, especially in the Ruby community (from what I gather). The person
behind _why, whatever his reasons, decided to abruptly end his work as _why in
2009.</p>
</div>
<div class="paragraph">
<p>I had heard about _why in passing&#8201;&#8212;&#8201;probably in 2009 when everyone who knew
about him and didn&#8217;t understand his motives was all a-chatter about him. But I
hadn&#8217;t really read any of his work. This changed when I stumbled across
<a href="http://perl11.org/potion/">Potion</a>, and read the
<a href="http://perl11.org/potion/pamphlet.html">pamphlet</a> written, apparently,
by _why himself.</p>
</div>
<div class="paragraph">
<p>I came away from reading that a little impressed by the writing&#8201;&#8212;&#8201;conversational, humble, funny, clear, concise, and easy to read. I don&#8217;t think
<em>Potion</em> itself is anything but an esoteric language for doing hobbiest-level
projects at this point, but the <em>writing</em> is really good. You should check it out!</p>
</div>]]></summary>
        <updated>Tue Nov 11 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-why</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt7 - Testing]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt7</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt6">last post</a> on Nim, I discussed
modules a bit. This time around, I want to figure out the answer to "How do
I test in Nim?"</p>
</div>
<div class="paragraph">
<p>First, very little comes up in basic searches. Mostly you get reference to using
the <code>when</code> statement (compile-time if) along with <code>assert</code> and company, but that
is fairly primitive.</p>
</div>
<div class="paragraph">
<p>Doing some more digging, I found that a <a href="http://build.nimrod-lang.org/docs/unittest.html">unittest</a>
library does actually exist in the standard libs, but it is not
linked to from anywhere becase it
<a href="https://www.bountysource.com/issues/3189991-unit-test-library-documentation-too-hard-to-find">requires better documentation</a>.
If you do a <a href="https://github.com/Araq/Nimrod/search?utf8=%E2%9C%93&amp;q=unittest">search</a>
on the Nimrod repository, though, you can find that there are some examples of
the libraries use! However, there&#8217;s probably a reason for it not being listed
in the documentation <em>besides</em> a <em>lack</em> of documentation for itself.</p>
</div>
<div class="paragraph">
<p>So, another way to do tests, if you look at the Nim compiler source itself, is
to just create a directory with individual modules that contain nothing but
code for performing tests.</p>
</div>
<div class="paragraph">
<p>I decided to use a small vector math library for motivation to explore the
testing facilities (that are not <em>unittest</em>), and to see how I might incorporate
testing into a larger project.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s just a small part of the library that covers only a convenient way to
initialize a <code>TVec3</code> value (<code>src/vectors.nim</code>):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  TVec3* = array[0..2, int]

proc init*(vec: var TVec3; x, y, z: int) =
  vec[0] = x
  vec[1] = y
  vec[2] = z</pre>
</div>
</div>
<div class="paragraph">
<p>And here&#8217;s my testing code (<code>tests/tvectors.nim</code>):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>import vectors

var vec: TVec3
vec.init 1, 2, 3

assert(vec[0] == 1)
assert(vec[1] == 2)
assert(vec[2] == 3)

echo "OK"</pre>
</div>
</div>
<div class="paragraph">
<p>Simple: create a <code>TVec3</code>, initialize it, assert values are what are expected,
then give the "OK" if all the asserts pass.</p>
</div>
<div class="paragraph">
<p>The key to this approach is in the command used to build and execute the tests,
since I use a make file, this test (and every other test) are, are in a <code>test</code>
target that executes commands similar to:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>nimrod c --verbosity:0 -p:./src/ -o:../bin/tests tests/tvectors.nim &amp;&amp; ./bin/tests</pre>
</div>
</div>
<div class="paragraph">
<p>This command does several things:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>sets <code>--verbosity</code> to <code>0</code> so that a bunch of mostly unimportant info isn&#8217;t
printed to stdout</p>
</li>
<li>
<p>adds the <code>src</code> directory to the <code>path</code> that Nim uses to search for modules</p>
</li>
<li>
<p>sets the <code>-o</code> output file to a generic exe name</p>
</li>
<li>
<p>specifies the test to build (<code>tests/tvectors.nim</code> in this case)</p>
</li>
<li>
<p>and after a successful build, runs the tests with <code>&amp;&amp; ./bin/tests</code></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>With my above <code>tvectors.nim</code> tests, I get a simple <code>OK</code> printed to the console
after each test is built and run. Otherwise I either get a compilation error message,
or something more akin to:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>Traceback (most recent call last)
tvectors.nim(6)          tvectors
system.nim(2908)         failedAssertImpl
system.nim(2136)         raiseAssert
Error: unhandled exception: vec[0] == 2  [EAssertionFailed]</pre>
</div>
</div>
<div class="paragraph">
<p>Which is what gets displayed when an assertion fails.</p>
</div>
<div class="paragraph">
<p>Next time I talk about Nim, I tentitively plan on building out this vector
library a little more and seeing how the tests scale. But I think a more pressing
need might be the ability to specify the <code>TVec3</code> type more generically so that
I don&#8217;t have to re-declare types for integers, floats, etc.</p>
</div>
<div class="paragraph">
<p>Until next time!</p>
</div>]]></summary>
        <updated>Mon Nov 10 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt7</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt6 - I learned a bit about modules]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt6</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt5">last post</a> on Nim, I was learning
a lot about the <a href="https://github.com/nim-lang/sdl2">SDL2 wrapper</a>. In my post
<a href="http://joelkleier.com/blog/2014-11-nim-pt3">Nim! pt3</a> I had expressed that I still
didn&#8217;t quite understand how <code>TFPSmanager</code> was able to get imported into the
example&#8217;s scope with just the statement <code>import sdl2/gfx</code>. I&#8217;ve figured that bit
out (because, you know, I <em>read</em> a little more&#8230;&#8203;) and I&#8217;d like to talk about
Nim&#8217;s modules briefly.</p>
</div>
<div class="paragraph">
<p>Modules in Nim are defined much like modules in Python (at least on the surface)&#8201;&#8212;&#8201;the folder and filename provide the module segments used with the <code>import</code>
statement. That&#8217;s pretty much where the comparison to Python ends.</p>
</div>
<div class="paragraph">
<p>The <code>import</code> statement itself can use what I refer to as a dot-notation
(<code>import path.to.module</code>), or a slash-notation (<code>import path/to/module</code>). The
<code>path/to/module</code> part is the file path, including the filename, of a`.nim` file
(without the <code>.nim</code> portion). What is very different to Python is that, in the statement
<code>import path/to/module</code>, <code>path/to/</code> is <em>not</em> part of the namespace! The "namespace"
is still just <code>module</code>. Therefore, as far as I can tell, the only way to resolve
conflicts between module names is to use an alias.</p>
</div>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>import lib.ent.entity_manager
import lib.flush.entity_manager
entity_manager.init</pre>
</div>
</div>
<div class="paragraph">
<p>Would be in conflict, but:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>import lib.ent.entity_manager
import lib.flush.entity_manager as flush_emgr
entity_manager.init
flush_emgr.init</pre>
</div>
</div>
<div class="paragraph">
<p>Would disambiguate the module names and resolve any conflicts.</p>
</div>
<div class="paragraph">
<p>Which leads me to my unanswered question in <a href="http://joelkleier.com/blog/2014-11-nim-pt3">Nim! pt3</a>!
Nim&#8217;s modules, by default, sort of import everything from a module specified in
an <code>import</code> statement. Only when there is ambiguity does a module prefix need to
be specified for a call to a member of the module.</p>
</div>
<div class="paragraph">
<p>If two or more modules with different names import the same member, then you can
resolve the situation in a couple different ways. First, you can indeed prefix the module
name onto the member call, and the other way would be to alias the member in a <code>from</code> import
statement (IE <code>from lib.ent.entity_manager import init as emgr_init</code>).</p>
</div>
<div class="paragraph">
<p>There are a couple of other neat things that Nim does with it&#8217;s module system:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>There is an <code>export</code> statement to do "symbol forwarding" so clients of a
particular module don&#8217;t have to include that modules dependancies. IE if
<code>entity_manager</code> requires <code>entity</code>, and a client of the <code>entity_manager</code>
module would need to make use of definitions in <code>entity</code> in order to use
members of <code>entity_manager</code>, the <code>entity_manager</code> module could have a
statement like <code>export entity.TEntity</code> to let any client that imports
<code>entity_manager</code> have access to <code>TEntity</code> from it&#8217;s own namespace (IE
<code>entity_manager.TEntity</code>)</p>
</li>
<li>
<p><code>import</code> statements can be followed by an <code>except</code> statement, which lets
clients do the inverse of what the <code>from x import y</code> syntax let&#8217;s you do!</p>
</li>
<li>
<p>In order to be used outside a module, a member must be defined as being
exported</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Haven&#8217;t really written much useful code besides some tests for this, but I think
next time I talk about Nim, I might start an actual project that I can discuss.
I feel like I have a pretty good (very) basic understanding of the syntax, and
I need to have some sort of project to movtivate further learning of Nim and
it&#8217;s capabilities and usefulness to me.</p>
</div>
<div class="paragraph">
<p>Until next time!</p>
</div>]]></summary>
        <updated>Sun Nov 09 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt6</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Interstellar]]></title>
        <link>http://joelkleier.com/blog/2014-11-interstellar</link>
        <summary><![CDATA[<div class="paragraph">
<p>I would recommend anyone who has the chance, see
<a href="https://interstellar.withgoogle.com/">Insterstellar</a>. It&#8217;s almost 3 hours, but
its 3 hours of awesome. I&#8217;ll try not to be spoilery here, so you
should be safe to keep reading.</p>
</div>
<div class="paragraph">
<p>Ultimately, it&#8217;s a story about love, and not a story without it&#8217;s faults. What
it does well, in my opinion, is tell a tail of the future that is at least
<em>plausible</em>. One where humanity faces a crisis of extinction and must fight
to over come it. No robots take over the earth, there&#8217;s no specific apocolypic
event, and there&#8217;s no direct political motivations influencing the course of
the movie.</p>
</div>
<div class="paragraph">
<p>On the topic of extinction, one of my favorite thought experiments is
<a href="http://waitbutwhy.com/2014/05/fermi-paradox.html?doing_wp_cron=1415474450.1038939952850341796875">The Firmi Paradox</a>.
I suggest reading the article, as it does a much better job of explaining, but
I&#8217;ll attempt to paraphrase:</p>
</div>
<div class="paragraph">
<p>The whole paradox is based on the question 'Where is everybody?' when we look
to the stars and can detect no other signs of life.</p>
</div>
<div class="paragraph">
<p>This question leads to something else called the <em>The Great Filter</em>&#8201;&#8212;&#8201;a theory
that says that there are common eveolutionary steps for every species, but
there is one step that almost <em>no</em> spieces cross, perhaps because it&#8217;s very unlikely,
or perhaps because it&#8217;s impossible. This step allows a species to evolve to the
point where it can leverage the power found with in an entire galaxy.</p>
</div>
<div class="paragraph">
<p>Now, if this filter is <em>behind</em> us, then we, humans, are a rarity in the universe,
perhaps even unique if this 'filter' is so hard that in the multible <em>billions</em>
of years of the universes existence, no other species has been able to overcome it.</p>
</div>
<div class="paragraph">
<p>Another possibility is that this filter doesn&#8217;t really exist (yet) because the
universe is to young to have developed it. Maybe life is
simply not old enough to have been able to support a species that can span
galaxies. Perhaps we are on the leading edge, along with other species that have
also not left their planets yet.</p>
</div>
<div class="paragraph">
<p>Or maybe, and this is the <em>really</em> depressing thought, the great filter is <em>ahead</em>
of us, and we are on a collision course for an extinciton event that is very likely
to destroy us.</p>
</div>
<div class="paragraph">
<p>And so, with this line of thinking, no news is good news. If we find simple life
on Mars, or another celestial body, it eliminates a bunch of possible events that
have already occured as being "The Great Filter", making it more likely that it
is ahead of us. If we find fossils of <em>complex</em> life, it would mean that it is
likely the filter is <em>ahead</em> of us, and that, in all likely hood, we would be
doomed.</p>
</div>
<div class="paragraph">
<p>Anyway, there&#8217;s a lot more the the article I linked, but those are my favorite
bits of it. How does this relate to Interstellar? Well, you need to watch it to
find out :D</p>
</div>
<div class="paragraph">
<p>I&#8217;ll say this: the Great Filter is where my thoughts drifted after the film, not
during it. The movie is about humans and their chance to not be extinct, not about
aliens and galactic civilizations!</p>
</div>]]></summary>
        <updated>Sat Nov 08 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-interstellar</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Survivorship Bias]]></title>
        <link>http://joelkleier.com/blog/2014-11-survivorship-bias</link>
        <summary><![CDATA[<div class="paragraph">
<p>Here&#8217;s a <a href="http://en.wikipedia.org/wiki/Survivorship_bias">Wikipedia article</a> on
a phenominon called <em>survivorship bias</em>. Basically, when concentration is given
only to people or things that have "survived" a process, there can be a bias
towards overly optimistic beliefs about the survivors.</p>
</div>
<div class="paragraph">
<p>Reading <a href="https://news.ycombinator.com/">Hacker News</a> or <a href="http://www.reddit.com/">Reddit</a>
with any regularity, it&#8217;s easy to learn about all sorts of amazing things that
other people do. While this <em>can</em> be encouragement to work hard to do amazing
things in one&#8217;s own life, it <em>can</em> also lead into the opposite direction,
and foster feelings of worthlessness and under-achievement. Seeing so many
people do so many things that look like they are so much better than anything
you&#8217;ve done can trick you into believing you can&#8217;t do anything great.</p>
</div>
<div class="paragraph">
<p><strong>Wrong</strong>!</p>
</div>
<div class="paragraph">
<p>When you <em>read</em> about other people doing amazing things, you are <em>not</em> reading
about the other not-so-amazing things they&#8217;ve done to create that one amazing
thing. Very rare is the person that can start doing amazing things without
prior experience, and keep doing amazing things consistently. 'Very rare' may be
to common&#8230;&#8203; perhaps a more appropriate description would be 'never'.</p>
</div>
<div class="paragraph">
<p>People make mistakes, people fail, and if all you do is read the likes of
Hacker News and Reddit, you&#8217;ll never see all the hard work that goes into
success.</p>
</div>
<div class="paragraph">
<p>Part of the equation <em>is</em> reading and learning from other people, but the other
part, the one you <em>cannot</em> ignore, is that amazing things come from <em>doing</em> things
and failing a lot first.</p>
</div>]]></summary>
        <updated>Fri Nov 07 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-survivorship-bias</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt5]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt5</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt4">last post</a> I showed how to
get a circle bouncing back and forth on the screen. Next, I&#8217;d need to figure
out how Nim handles
<a href="https://wiki.libsdl.org/SDL_Event?highlight=%28%5CbCategoryStruct%5Cb%29%7C%28SDLStructTemplate%29">SDL_Event</a>,
which normally uses a union structure along with a <em>type</em> field to determine
how the data for an event gets used.</p>
</div>
<div class="paragraph">
<p>Nim doesn&#8217;t have a union type as far as I can tell. It has a
<a href="http://nim-lang.org/manual.html#union-pragma"><em>pragma</em></a> for
telling the compiler that a Nim structure should be translated to a C <em>union</em>,
but that&#8217;s not what I"m looking for.</p>
</div>
<div class="paragraph">
<p>Digging into the <a href="https://github.com/nimrod-code/sdl2/">SDL2 wrapper</a> a little,
I think this is the piece of code I need to understand:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>template EvConv(name, name2, ptype: expr; valid: set[TEventType]): stmt {.immediate.}=
  proc `name`* (event: var TEvent): ptype =
    assert event.kind in valid
    return cast[ptype](addr event)
  proc `name2`* (event: var TEvent): ptype =
    assert event.kind in valid
    return cast[ptype](addr event)</pre>
</div>
</div>
<div class="paragraph">
<p>which is used like:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>EvConv(EvWindow, window, PWindowEvent, {WindowEvent})</pre>
</div>
</div>
<div class="paragraph">
<p>What is a <code>template</code> in Nim&#8217;s parlance?
<a href="http://nim-lang.org/manual.html#templates">As it turns out</a>, it&#8217;s a way of creating
a simple substitution macro at compile time, and is called like a normal procedure.</p>
</div>
<div class="paragraph">
<p>Therefore the <code>EvConv</code> template being defined above is creating 2 procedures that
are identical, except for the name. If you direct your gaze to the usage example,
the first two parameters are <code>EvWindow</code> and <code>window</code>&#8201;&#8212;&#8201;which means that the
example will result in two procedures called <code>EvWindow</code> and <code>window</code>, which do
precisly the same thing, which is to make certain the <em>kind</em> of event is a valid
<em>kind</em>, and then to <em>cast</em> (reinterpret the type without altering the bit structure)
the <em>event</em> data into the Nim <em>type</em> pointed to by the <em>ptype</em> pointer.</p>
</div>
<div class="paragraph">
<p>The result of this is that in my program I can check for a keydown event thusly:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>    if evt.kind == KeyDown:
      if evt.key.keysym.sym == K_ESCAPE:
        runGame = false
        break</pre>
</div>
</div>
<div class="paragraph">
<p>There&#8217;s a few things that initially tripped me up with even that, so allow me
to explain a few more things:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>the <code>TEvent</code> type (in the SDL2 wrapper) is an
<a href="http://nim-lang.org/manual.html#reference-and-pointer-types"><em>unsafe/untraced</em></a>
pointer&#8201;&#8212;&#8201;but it get&#8217;s dereferenced implicitely by the &#8220;.&#8221;</p>
</li>
<li>
<p>the <code>EvConv</code> <em>template</em> produces the <code>EvKeyboard</code> and <code>key</code> procedures that
each can be used in the <a href="http://nim-lang.org/manual.html#method-call-syntax">method call syntax</a>
style on TEvent values</p>
</li>
<li>
<p>The actual key value is retrieved from the <code>TEvent</code> property <code>keysym</code>, which
in turn is a <code>TKeySym</code> type. The <code>TKeySym</code> type has properties that get values
for a <em>scancode</em>, a <em>keycode</em>, or the <em>unicode value</em>. The difference between
the <em>scancode</em> and <em>keycode</em> is that the <em>scancode</em> tries to represent the
location on the actual keyboard, whereas the <em>keycode</em> is just the value
returned by the device, regardless of whether or not it&#8217;s in the expected
physical position. I chose <em>keycode</em> (the <code>.sym</code> call) because the
<em>scancode</em> seems like it&#8217;s rife with potential hardware compatibility issues,
and, eventually, I should allow for custom remapping of keys anyway.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Whew!</p>
</div>
<div class="paragraph">
<p>That still wasn&#8217;t much code, but I did learn a lot about the SDL2 wrapper, Nim,
and even a little about SDL2 itself!</p>
</div>]]></summary>
        <updated>Thu Nov 06 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt5</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt4]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt4</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt3">last post</a> I went through my
process of discovering how Nim works, at least a little bit. This time around
I want to talk about what I did to get a circle bouncing back and forth on the
screen! Not much of an acheivment, all things considered, but I spent most of
my time just reading a little about
<a href="http://cms.ferzkopp.net/index.php/software/13-sdl-gfx">SDL2_gfx</a>.</p>
</div>
<div class="paragraph">
<p>First, I defined a type <code>TBall</code> to describe the position, size, and velocity
of my little circle:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  TBall = object
    x: float
    y: float
    rad: float
    vx: float
    vy: float</pre>
</div>
</div>
<div class="paragraph">
<p>Then, I instantiated what will become the bouncing circle:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>var
  ball = TBall(
    x: 320,
    y: 240,
    rad: 10,
    vx: 100,
    vy: 0)</pre>
</div>
</div>
<div class="paragraph">
<p>I do some checks to make sure the ball position is in bounds, and moving in
the correct direction:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>  ball.x += ball.vx * dt

  if ball.x &lt; ball.rad:
    ball.x = ball.rad
    ball.vx *= -1
  elif ball.x &gt; 640-ball.rad:
    ball.x = 640-ball.rad
    ball.vx *= -1</pre>
</div>
</div>
<div class="paragraph">
<p>And finally, I render the ball with a handy method in the <code>SDL2_gfx</code> library:</p>
</div>
<div class="literalblock">
<div class="content">
<pre> renderer.filledCircleRGBA(int16(ball.x), int16(ball.y), int16(ball.rad), 0,255,0,255)</pre>
</div>
</div>
<div class="paragraph">
<p>The only tricky thing here is the type conversion&#8201;&#8212;&#8201;in nim there&#8217;s a distinct
difference between type <em>conversion</em> and type <em>casting</em>.</p>
</div>
<div class="paragraph">
<p>Type <em>conversion</em> is used in a manner like <code>int16(123.3)</code>, and the program will
do it&#8217;s best to translate the value into the specified type.</p>
</div>
<div class="paragraph">
<p>Type <em>casting</em> is used in a manner like <code>cast[int16](123.3)</code>, and the program will
keep the same bit patter, but change the values type. Which will lead, inevitably
to different values than <em>conversion</em>.</p>
</div>
<div class="paragraph">
<p>Until next time!</p>
</div>]]></summary>
        <updated>Wed Nov 05 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt4</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt3]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt3</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt2">last post</a> I setup a simple
example skeleton project and made it compile like I wanted to. This time around,
I am going to go through my process of figuring things out. I&#8217;m new to both
Nim and SDL2, so I have a bunch of stuff to learn!</p>
</div>
<div class="paragraph">
<p>After skimming the skeleton code from last time, and generally getting a grasp
of what the program is doing, I start picking out pieces of the code that I
want to know more about. The first such piece is
<a href="https://github.com/nimrod-code/sdl2/blob/master/examples/sdl_skeleton.nim#L13-L17">this one</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>var
  evt: TEvent
  runGame = true
  fpsman: TFPSmanager
fpsman.init</pre>
</div>
</div>
<div class="paragraph">
<p>I have a bunch of questions, but lets start with "What is 'TFPSManager'? Does
it come from SDL2? is it part of the wrapper?" (alright, lets start with
3 questions&#8230;&#8203;)</p>
</div>
<div class="paragraph">
<p>As it turns out, it&#8217;s defined in
<a href="https://github.com/nimrod-code/sdl2/blob/master/src/sdl2/gfx.nim"><code>sdl2/gfx.nim</code></a>,
which is a wrapper for the <a href="http://cms.ferzkopp.net/index.php/software/13-sdl-gfx">SDL2_gfx</a>
library, which seems to be not part of the <a href="https://www.libsdl.org/">SDL2</a> library
proper, but instead is a sort of boiler-plate project.</p>
</div>
<div class="paragraph">
<p>The <code>sdl2/gfx.nim</code> library is actually imported into the skeleton by
<a href="https://github.com/nimrod-code/sdl2/blob/master/examples/sdl_skeleton.nim#L2">this</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>import sdl2, sdl2/gfx</pre>
</div>
</div>
<div class="paragraph">
<p>I&#8217;m still wondering how <code>sdl2/gfx</code> imports TFPSmanager into the skeleton&#8217;s scope,
but I&#8217;ll save figuring that out for later. Regardless, the <code>sdl2/gfx</code> part pulls
in the exported symbols in <code>sdl2/gfx</code>.</p>
</div>
<div class="paragraph">
<p>And here&#8217;s the actual <a href="https://github.com/nimrod-code/sdl2/blob/master/src/sdl2/gfx.nim#L46-L52">type definition</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  TFPSmanager* {.pure, final.} = object
    framecount*: cint
    rateticks*: cfloat
    baseticks*: cint
    lastticks*: cint
    rate*: cint</pre>
</div>
</div>
<div class="paragraph">
<p><code>{.pure, final.}</code> is a pragma statement saying:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>This type cannot be inherited from (final)</p>
</li>
<li>
<p>This type should have not have any runtime type checking for binary compatibility with other compiled languages (pure)</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Basically, this type needs to match up with a type found in the SDL2_gfx library
called <code>FPSmanager</code>, which these pragmas ensure.</p>
</div>
<div class="paragraph">
<p>My next question, seeing this type definition, is "Where are 'cint' and 'cfloat' defined?"</p>
</div>
<div class="paragraph">
<p>Turns out, these are built-into the compiler <code>system</code> module, which is included
and available by default in all modules. Took me some doing, for some reason, but
I ended up finding the documentation <a href="http://nimrod-lang.org/system.html#cint">here</a>.
The documentation basically just explicitely says that <code>cint</code> == C&#8217;s 'int' == <code>int32</code>
in Nim.</p>
</div>
<div class="paragraph">
<p>Okay, so back to the skeleton&#8201;&#8212;&#8201;there&#8217;s a line: <code>fpsman.init</code>. Where is this
method or property defined? Actually, it&#8217;s a "procedure" definition, and it&#8217;s
located in the
<a href="https://github.com/nimrod-code/sdl2/blob/master/src/sdl2/gfx.nim#L229-L234">sdl2/gfx.nim</a>
file as well. But this teaches me a bunch of things! First, here are the definitions:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>proc init*(manager: var TFPSmanager) {.importc: "SDL_initFramerate".}
proc setFramerate*(manager: var TFPSmanager; rate: cint): SDL_Return {.
  importc: "SDL_setFramerate", discardable.}
proc getFramerate*(manager: var TFPSmanager): cint {.importc: "SDL_getFramerate".}
proc getFramecount*(manager: var TFPSmanager): cint {.importc: "SDL_getFramecount".}
proc delay*(manager: var TFPSmanager): cint {.importc: "SDL_framerateDelay", discardable.}</pre>
</div>
</div>
<div class="paragraph">
<p>They are <a href="http://nim-lang.org/tut1.html#forward-declarations"><em>forward declarations</em></a>
of methods, with which the FFI imports declarations for from C libs.</p>
</div>
<div class="paragraph">
<p>And then, the procedures here are defined to take advantage of syntactic sugar
called <a href="http://nim-lang.org/tut2.html#method-call-syntax"><em>method call syntax</em></a> in
Nim. Essentially, the first value of a procedure can be prefixed to a call of the
procedure. Example:</p>
</div>
<div class="literalblock">
<div class="content">
<pre># assuming this is defined
proc xlen(s: string) =
   result = len(s)
# then this:
assert(xlen("value")==5)
# is the same as:
assert("value".xlen==5)</pre>
</div>
</div>
<div class="paragraph">
<p>Pretty nifty!</p>
</div>
<div class="paragraph">
<p>Back to the <code>init</code> definition: since <code>init</code> takes 1 parameter, a <code>TFPSmanager</code>,
then the statement <code>fpsman.init</code> makes sense, as it&#8217;s syntactic sugar for
<code>init(fpsman)</code>.</p>
</div>
<div class="paragraph">
<p>Next up, what is the asterisk between <code>init</code> and <code>(</code> mean? Easy! It tells Nim that
this procedure is to be exported by the module.</p>
</div>
<div class="paragraph">
<p>What about the 'importc' pragma statement? Well, like you&#8217;d imagine, it&#8217;s for
telling the compiler that this forward declaration represents a definition found
in a C library, and the FFI should do it&#8217;s magic and import that definition.</p>
</div>
<div class="paragraph">
<p>And What about that 'SDL_Return' value&#8201;&#8212;&#8201;where&#8217;s that coming from? It&#8217;s in
<a href="https://github.com/nimrod-code/sdl2/blob/master/src/sdl2.nim#L205-L207">sdl2.nim</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>SDL_Return* {.size: sizeof(cint).} = enum SdlError = -1, SdlSuccess = 0 ##\
    ## Return value for many SDL functions. Any function that returns like this \
    ## should also be discardable</pre>
</div>
</div>
<div class="paragraph">
<p>A <em>type</em> definition for an enum with 2 values, that is marked as being the <code>size</code>
of a <code>cint</code> so as to be compatible with code referenced using the FFI.</p>
</div>
<div class="paragraph">
<p>Back to the procedures defined for use with <code>TFPSmanager</code>, the last thing I had a
question about tonight is the <code>discardable</code> pragma value. The answer is pretty
straight-forward: it is telling the compiler that the return value can be
discarded implicitely&#8201;&#8212;&#8201;IE there&#8217;s no need to use the <code>discard</code> keyword when calling
this procedure.</p>
</div>
<div class="paragraph">
<p>And that&#8217;s it for tonight!</p>
</div>
<div class="paragraph">
<p>I learned a <em>bunch</em> about how Nim works, and a little about SDL2.</p>
</div>
<div class="paragraph">
<p>Until next time!</p>
</div>]]></summary>
        <updated>Tue Nov 04 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt3</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
</feed>
