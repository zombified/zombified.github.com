<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Electric Froth</title>
    <subtitle>Brewlog, musings, and an outlet for random stuff by Joel Kleier</subtitle>
    <link rel="self">http://joelkleier.com/atom.xml</link>
    <link>http://joelkleier.com</link>
    <updated>Mon Oct 27 2014 23:21:58 GMT-0500 (CDT)</updated>

    <entry>
        <title><![CDATA[Markup Languages]]></title>
        <link>http://joelkleier.com/blog/2014-10-markup-langs</link>
        <summary><![CDATA[<p>I read an article titled <a href="https://medium.com/@chacon/living-the-future-of-technical-writing-2f368bd0a272" title="Living the Future of Technical Writing">&quot;Living the Future of Technical Writing&quot; by Scott Chacon</a>, the author
of <a href="http://git-scm.com/book/en/v2" title="Pro Git 2nd Edition">Pro Git</a>, and it got me thinking a little about the techical writing process,
and the formats I use to markup text.</p>
<p>I have no personal experience with asciidoc -- most of the plain-text based markup
I write is in markdown or reStructuredText. I like markdown, but sometimes it&#39;s
too simple and has ambiguously defined behaviors (like pre/code text in a list item).
I like reStructuredText, but some aspects of it&#39;s syntax leave a bad taste (the weird
syntax for links and no spaces before number/bullet for lists to name a couple).</p>
<p>And so, reading this article made me want to find out if asciidoc improves on
the issues I have with markdown and reStructuredText, and what kind of tooling
I can use to manipulate it.</p>
<p>Some neat features specific to asciidoc:</p>
<ul>
<li>Admonitions (document call-outs for notes, tips, etc)</li>
<li>Simple usage of italic, bold, and inline monospace -- all embeddible within each other</li>
<li>Custom inline styling (IE &quot;[small]#small print#&quot;)</li>
<li>You can specify &quot;curved&quot; apostrophes and quotation marks</li>
<li>Document Headers (which can include author, revision, and attributes)</li>
<li>You can specify explicit id&#39;s for section links</li>
<li>You can specify parts of other ascii documents to include inline</li>
<li>You can include content from URI&#39;s</li>
<li>You can specify manual page breaks</li>
<li>You can specify checklists</li>
<li>Ability to explicitly notate content as an extension of the previous list item</li>
<li>Ability to link inline anchors</li>
<li>Internal cross-references</li>
<li>Callouts for code blocks</li>
<li>Code blocks sourced from files</li>
<li>Custom substitutions</li>
<li>Commenting</li>
</ul>
<p>Some things I can see already annoying me:</p>
<ul>
<li>For lists of greater than one level, you need to use <em>n</em> number of list markers
where <em>n</em> is the level of indentation. Small thing, but it annoys me greatly
that reStructuredText requires the list marker to not have space in front of it too.
BUT at least asciidoc explicitly specifies that leading white space to lists is
not relevant</li>
<li>The syntax for extending list content might make things a little hard to read</li>
<li>Subjectively, I feel like the link syntax isn&#39;t as nice as markdowns -- it&#39;s
about on par with how I feel about reStructuredText&#39;s link syntax.</li>
</ul>
<p>I might give this format a serious shot -- there is <a href="https://github.com/asciidoctor/asciidoctor.js" title="asciidoctor.js">asciidoctor.js</a>, so I might
be able to integrate it into my <a href="https://github.com/asciidoctor/asciidoctor.js" title="Metalsmith">Metalsmith</a> build! I&#39;m certainly going to
test it out, but who knows if it&#39;ll go anywhere!</p>
]]></summary>
        <updated>Mon Oct 27 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-markup-langs</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[My Private Git Setup]]></title>
        <link>http://joelkleier.com/blog/2014-10-my-personal-git</link>
        <summary><![CDATA[<p>Occasionally I work on a project that I want in version control, duplicated in a
central location, but don&#39;t want to throw it into the public eye. I don&#39;t need
much to accomplish this -- a Raspberry Pi sitting headless on my home network
works perfectly.</p>
<p>Basically, I use <a href="http://git-scm.com/" title="git --fast-version-control">git</a>+ssh to do operations on my repos remotely, and
<a href="https://github.com/jonashaag/klaus" title="Klaus">klaus</a> + <a href="http://gunicorn.org/" title="gunicorn">gunicorn</a> to browse and dig through my repos when I want to.</p>
<p>It&#39;s a pretty smooth setup!</p>
<p>The most complicated parts of this setup are:</p>
<ol>
<li>I use a <code>virtualenv</code> to wrap gunicorn, klaus, and dependencies in their own python environment</li>
<li>I use this gunicorn command (which uses <code>klaus.contrib.wsgi_autoreload</code>
pointed at a single directory containing only git repo subdirectories):</li>
</ol>
<!-- -->

<pre><code>    exec /path/to/gunicorn -w 1 -b 0.0.0.0:80 \
        --env KLAUS_SITE_NAME=&quot;You Have The GITS&quot; \
        --env KLAUS_REPOS=&quot;/path/to/git/repo/parent/dir&quot; \
        --log-level error --log-file /var/log/klaus.log \
        klaus.contrib.wsgi_autoreload
</code></pre><p>Combined with some basic ssh configuration (setting up a Host &#39;shortcut&#39; in
my <code>~/.ssh/config</code> file and authorizing my public key for a user on my
raspberry pi), this method is very low-friction to work with and I get a
nice UI to browse my source with, if I want!</p>
]]></summary>
        <updated>Sun Oct 26 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-my-personal-git</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[PureScript]]></title>
        <link>http://joelkleier.com/blog/2014-10-purescript</link>
        <summary><![CDATA[<p>I&#39;ve always had a fondness for programming languages, and one that caught my eye
recently is <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a> -- a strongly and statically typed language in the
vein of Haskell (which I&#39;ve never really learned proper, though I have it on
the &#39;maybe someday&#39; list). <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a>, though, compiles to JavaScript
-- which, despite it&#39;s warts, is a language that I think is the bees knees.</p>
<p>There&#39;s a <a href="https://leanpub.com/purescript/" title="PureScript By Example">book</a> out there for it, available free to read online, so I thought
I&#39;d just start going through it to check out the language.</p>
<p>It has you install <a href="https://www.haskell.org/platform/" title="The Haskell Platform">The Haskell Platform</a> (for the actual compiler), <a href="http://nodejs.org/" title="node.js">node/npm</a>
(for node based utilities and tools), <a href="http://bower.io/" title="Bower: A package manager for the web">Bower</a> (for all the <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a>
packages), and then <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a> (to automate builds and such).</p>
<p>Well, that&#39;s a pretty big stack to install just to write some &quot;Hello World&quot;
equivalent programs... but, I don&#39;t mind! Already had most of them installed
anyway. However, their setup is not how I prefer to work (when I&#39;m working on
my own projects at least).</p>
<p>Here are my deviations from the books setup:</p>
<ol>
<li>I installed <a href="http://bower.io/" title="Bower: A package manager for the web">Bower</a> locally to the folder (I don&#39;t like polluting my global
npm packages if I don&#39;t have to... and prefixing <code>./node_packages/.bin/bower</code>
doesn&#39;t bother me since I&#39;m scripting my builds anyway).</li>
<li>I Started using <a href="http://www.gnu.org/software/make/" title="GNU Make">GNU Make</a> instead of <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a>. Why? Sure, grunt is the
new &#39;hot&#39; thing, but, for my purposes, it&#39;s clearly a reinvention of a
wheel that works <em>really</em> well. I like <a href="http://www.gnu.org/software/make/" title="GNU Make">GNU Make</a>, and it will serve me
better than <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a> (that&#39;s not to say <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a> is useless,
but in this instance I prefer to stick with the tried and true).</li>
</ol>
<p>So, my <code>Makefile</code> looks something like this:</p>
<pre><code>BOWER_FILES=`find ./bower_components -regex &quot;.*/src/.*\.purs&quot;`
CHAPTER2_FILES=src/Chapter2.purs
PHONEBOOK_FILES=src/Data/PhoneBook.purs
ALL_FILES=${BOWER_FILES} \
          ${CHAPTER2_FILES} \
          ${PHONEBOOK_FILES}


all: Chapter2 PhoneBook

bootstrap:
    npm install bower
    bower install purescript-math#0.1.0
    bower install purescript-list

psci:
    psci ${ALL_FILES}

Chapter2:
    psc ${BOWER_FILES} \
        ${CHAPTER2_FILES} \
        --output dist/Chapter2-Main.js \
        --module Chapter2 \
        --main Chapter2
</code></pre><p>Some explanations:</p>
<ul>
<li>The definition of <code>BOWER_FILES</code> uses backticks around a find command to
get a list of all purescript files identified as purescript source files
(the community tends to structure their projects a specific way, so this
command makes sense for that structure)</li>
<li>The <code>bootstrap</code> target can be used to install bower and all the
dependancies that are needed for the project</li>
<li>The <code>psci</code> target can be used as a shortcut for loading the REPL with all
project files</li>
<li>The <code>Chapter2</code> a target is for building the file(s) in Chapter 2 -- I&#39;ve only
read through Chapter 3 so far, and Chapter 2 is the only one that&#39;s had any
built files. Chapter 1 was introductory, and Chapter 3 mostly focused on the
REPL.</li>
</ul>
<p>Hopefully I get some time soon to play with <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a> some more! So far
my impressions are very positive!</p>
]]></summary>
        <updated>Sat Oct 25 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-purescript</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Recent Raspberry Pi Announcements]]></title>
        <link>http://joelkleier.com/blog/2014-10-rpi-display</link>
        <summary><![CDATA[<p>I <em>love</em> the Raspberry Pi: cheap, small, powerful (enough), and completely
programmable.</p>
<p>Recently, <a href="http://www.raspberrypi.org/author/eben/">Eben Upton</a> gave a
<a href="http://www.raspberrypi.org/eben-at-techcrunch-disrupt/">talk at TechCrunch Distrupt</a>.
He talked a little about the RPi, a really cool 
<a href="https://www.indiegogo.com/projects/pi-top-a-raspberry-pi-laptop-you-build-yourself">IndieGoGo Project (the PiTop)</a>,
announced a 7-in WVGA capacitive touch display, and a new model (the A+) coming
soon!</p>
]]></summary>
        <updated>Fri Oct 24 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-rpi-display</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[A couple AWS Tips &amp; Tricks]]></title>
        <link>http://joelkleier.com/blog/2014-10-aws-tips</link>
        <summary><![CDATA[<p>Recently, I&#39;ve been playing around with AWS -- here are a couple of tips/tricks
I found when I had to fix some problems. Hopefully they can help, but: your
mileage may vary!</p>
<h2 id="attaching-and-detaching-a-root-volume">Attaching and Detaching a root volume</h2>
<p><em>Problem:</em> you didn&#39;t specify <code>nobootwait</code> as an option in fstab, and you detached
the volume from an instance, BUT you still want to get back into that instance.</p>
<ol>
<li>Make sure the instance you want to get back into is shutdown (we&#39;ll call this &#39;old instance&#39;)</li>
<li>Either create a new instance or use an existing instance (we&#39;ll call this &#39;new instance&#39;)</li>
<li>Detach the root volume from the old instance, and attach it to the new instance</li>
<li>Boot up new instance, and mount it temporarily with a command something like <code>mkdir -p /media/tmpmnt/ &amp;&amp; mount /dev/xdvf /media/tmpmnt/</code></li>
<li>Modify the old instance fstab (<code>sudo vim /media/tmpmount/etc/fstab</code>) by commenting out, deleting, or modifying the offending line</li>
<li>Unmount old instance root volume from new instance (<code>umount /media/tmpmnt/</code>)</li>
<li>Attach to old instance root volume back to old instance -- <strong>NOTE:</strong> you will need to explicitly use the partiion number on the device to mount it is root, IE <code>/dev/sda1</code></li>
<li>Boot up old instance, and it works!</li>
</ol>
<h2 id="enabling-or-disabling-public-ip-on-an-already-created-instance">Enabling or Disabling Public IP on an already created instance</h2>
<p><em>Problem:</em> you want to switch the &#39;Automatically assign Public IP&#39; option for
an instance... but you can&#39;t do this because it&#39;s already created.</p>
<p>Basically, you need to detach the root volume on the
old instance, create a new instance, detach the root volume on the new instance,
attach the old root instance to the new instance as the root volume, then delete
the new instances detached root volume.</p>
<p>After you do that, you boot up the new instance and test it out, then delete the
old instance as well.</p>
]]></summary>
        <updated>Thu Oct 23 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-aws-tips</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[metalsmith]]></title>
        <link>http://joelkleier.com/blog/2014-06-metalsmith</link>
        <summary><![CDATA[<p>While updating the look and feel of my site, I decided to explore some other
static site generators, just to see what&#39;s out there. <a href="http://metalsmith.io">Metalsmith</a> caught
my eye, and I had to play around with it.</p>
<p>Turns out, it is <em>super</em> simple to setup, and very composable. I almost think
it&#39;s simpler that <a href="http://github.com/zombified/ef.sh">ef.sh</a> in many ways, and it&#39;s faster, with more features!
The only downside is that there <em>is</em> more setup involved, but not much.</p>
<p>If you get a chance, I&#39;d recommend checking it out. Not perfect for all needs,
and not the star student... but if it keeps being worked on, it has great
potential. My one criticism is a general lack of great documentation! The code
is pretty terse and easy to follow though, so there is that.</p>
<p>Also, I&#39;m sorry for the id/uid/guid updates on the rss/atom feeds... I decided
to just use permalinks. Simple, and a lot more portable going forward.</p>
]]></summary>
        <updated>Sat Jun 07 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-06-metalsmith</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[rss2email]]></title>
        <link>http://joelkleier.com/blog/2014-03-rss2email</link>
        <summary><![CDATA[<p>March 13, 2013 -- Google <a href="http://googlereader.blogspot.com/2013/03/powering-down-google-reader.html">announced</a> the shutdown of Google Reader. Honestly,
I became a little pissed. I mean, I certainly didn&#39;t use Reader a lot, but it
was <em>so</em> convenient to keep track of my podcasts and news, especially the ones
that weren&#39;t updated often. It also, usually, gave me a pretty good history
of posts, beyond what was listed in the feed.</p>
<p>Alas, it was not to be, and, in the end, it&#39;s probably a good thing. The
shutdown did one great thing: it forced me to find a <em>better</em> solution for
<em>my</em> use case.</p>
<p>At this point, the hunt was on. I tried <a href="http://feedly.com/index.html#discover">Feedly</a>, but it didn&#39;t fit my
wants. I had a problem with the plugins and how you viewed feeds. Then I
moved on to <a href="https://theoldreader.com/">The Old Reader</a>, which was mostly a clone of Google Reader,
but a clone of the good parts before Google started futzing with it!</p>
<p>For awhile, it was nice and useful. Quickly, though, it became apparent to me
that it was <em>another</em> service I had to log into, and it didn&#39;t have a great
mobile offering. It was a little slow due to the massive attention it was
getting, and they even announced that they would have to shutdown at one point.</p>
<p>That announcement and the troubles I was running into with the app made me
realize -- I had gone from one service that held the keys to the information
I wanted, into to the hands of another.</p>
<p>This realization forced me to work a little harder on a side project:
<a href="https://github.com/zombified/slicerss">slicerss</a>, which has since been pretty much abandoned. This project let me
really customize how I wanted to read my rss feeds. I setup a very minimal
UI, and it had all the (minimal) features I needed out of it. But, it was
slow... and bound to my home server.</p>
<p>Ultimately, I discovered the key to what I want: I don&#39;t want to even <em>check</em>
another service, and most of the time I just want to view the original article
anyway. I don&#39;t want to share (most of the time) or organize my feeds.</p>
<p>I just want a river of news that makes it easy to mark or save an article and
a link to the original.</p>
<p>Enter <a href="https://pypi.python.org/pypi/rss2email">rss2email</a> - a project which has been in development since at least
2006 (that&#39;s the date of v2.56 in the changelog). What does it do? Very
simply, it downloads a set of RSS feeds, keeps track of which ones it has
sent you, and emails the ones it hasn&#39;t.</p>
<p>Super, super, simple. Zero dependence on 3rd party services or proprietary
software, an active project, and minimal system requirements. Plus, it&#39;s
available anywhere I can access my email! I can use my email system to
flag/pin/star or save any particular articles I want to, and I can just delete
the rest.</p>
<p>Why I didn&#39;t do this sooner? Beats me. Now I just have a cron job that runs
<code>r2e run</code> once a day, and then, when I want to, I can just check my email.</p>
]]></summary>
        <updated>Wed Mar 26 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-03-rss2email</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Bash Fun]]></title>
        <link>http://joelkleier.com/blog/2014-02-bash-fun</link>
        <summary><![CDATA[<p>I decided to create my own custom site-generator for a couple of reasons:</p>
<ul>
<li>My site is so simple, a lot of existing generators make designing it and
building it overly complex.</li>
<li>The simple generators that already exist don&#39;t really organize things the
way I want</li>
<li>From a user perspective, a shell script doesn&#39;t require any special
considerations, except for maybe the version of core utilities and other
command-line programs required</li>
<li>I thought it&#39;d be nice to learn a little more about bash and some linux
core utils</li>
</ul>
<p>Sorry to anyone that subscribes to this site via rss/atom... the guids and
file paths have all changed, so your readers are probably going to think all
my content is new!</p>
<p>If you&#39;d like to checkout how this site was made, you can look at the <a href="https://github.com/zombified/ef.sh">ef.sh
repository on github</a>.</p>
]]></summary>
        <updated>Thu Feb 13 2014 23:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-02-bash-fun</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Postmortem for &#x27;Grid Ten&#x27;, my LD48#27 entry]]></title>
        <link>http://joelkleier.com/blog/2013-09-ld48_27_grid_ten</link>
        <summary><![CDATA[<p>For the 27th <a href="http://ludumdare.com">Ludum Dare</a> 48-hour game making competition, I created an
entry called <em>Grid Ten</em>. It was my 6th entry into the competition, and needed
to be based around the theme &#39;10 Seconds&#39;. The competition voting isn&#39;t quite
over at the time of this writing, but here are my thoughts on how my game turned
out.</p>
<h2 id="timeline">Timeline</h2>
<p><strong>Pre- theme annoucement:</strong> I had planned to use <a href="http://inform7.com">Inform 7</a> or <a href="http://www.gimcrackd.com/etc/src/">Twine</a> for
creating a text adventure, but I had also considered <a href="http://haxe.org/">Haxe</a> with <a href="http://haxeflixel.com/">HaxeFlixel</a>
or <a href="http://haxepunk.com/">HaxePunk</a> as a fall-back if I didn&#39;t want to do a text adventure. Other
than that, I went into the competition with no substantial ideas for the direction
I wanted to go.</p>
<p><strong>Theme Announcement:</strong> The IRC chat room was full of hate for &#39;10 Seconds&#39;, and
I just knew this was the theme going to be picked. So, when it was announced,
I was already thinking about what I could do. Initially I started drafting some
sort of story that would revolve around using &#39;10 seconds&#39; in the context of a
lat/long coordinate. I actually spent a good 4 hours working on this concept
before going to bed for the night.</p>
<p><strong>The next morning:</strong> With the announcement happening only 4 or so hours before
I went to bed, it gave my subconcious a good chance to mull over what I had worked
on the night before. When I woke up, I started having doubts about my ideas from
the night before -- none of them were really &#39;gelling&#39; with me. So after about
2 hours, I came upon the core idea for what turned into <em>Grid Ten</em>, which was
definitely not a text-adventure.</p>
<p><strong>The rest of the first day:</strong> After getting the core concept for <em>Grid Ten</em>
fleshed out a bit more, I decided to forgo Haxe, etc, and just work directly
with html/css/javascript. It&#39;s a toolset I&#39;m really familiar with, and my
concept would work very well with programmatically generated textures that I
thought would be easier to do with the canvas element than with HaxeFlixel or
HaxePunk. I also decided I didn&#39;t want a compile step in my development, nor
did I want to deal with flash. The majority of the work went really smooth,
I was really able to focus in on just the minimum code necessary -- I actually
had some code to implement tails for the enemies, but then I quickly saw that
that code would just bloat the game unnecessarily. It got cut out pretty quick,
I didn&#39;t just comment it out, I completely removed it. I didn&#39;t want anything
that would distract my focus. At the end of the day, I had the mechanics that
I was shooting for pretty well fleshed out. There was still a LOT to add to the
game, but the very core was in place!</p>
<p><strong>Day 2:</strong> I spent a good 7 hours polishing everything up -- I added some
primitive animations, another &#39;block&#39; the player could place, I also did some
optimizations and improved the &#39;intelligence&#39; of the enemies and added a menu,
and a end-game screen. Generally, I polished the thing up quit a bit. I did
stop early, around 3pm, to start the process of packaging and releasing. I&#39;ll
talk about this a bit more later, but I should have definitely kept at it for
at least another 2 or 3 hours.</p>
<p><strong>Post- competition end:</strong> I ended up fixing a bug whereby user placed blocks
would stick around after a reset. Small, and easily fixed, but I should have
totally caught that before submission!</p>
<h2 id="the-good">The GOOD</h2>
<ul>
<li>I leveraged a platform that I know fairly well</li>
<li>I stuck really well to a plan for absolute minimum viable product -- I didn&#39;t
put a lot of extra cruft into the game that I didn&#39;t think significantly
improved the experience. Take, for example, the start and end screens -- I
put a large &#39;bouncing&#39; text on both screens which didn&#39;t add anything to
game-play, but it made the start and end screens much less boring to look
at, which is important for first impressions I think.</li>
<li>I got plenty of sleep and food (always important!)</li>
</ul>
<h2 id="the-bad">The BAD</h2>
<p>There are really only three things I think were really bad this time around:</p>
<ul>
<li>I basically scratched and restarted what I was doing after about 6 hours
total of development time. This hurt -- but, to be fair, I wasn&#39;t &#39;feeling&#39;
the text-adventure I started with, and it was probably good for my sanity
to restart with the game I did.</li>
<li>I quit 2 or 3 hours earlier than I really should have, and in that time I
probably could have done quite a lot of polishing.</li>
<li>I used mostly original code -- I used zero game related engines/frameworks</li>
</ul>
<h2 id="the-ugly">The UGLY</h2>
<p>Overall I&#39;m really happy with the project, and I think the core concept has a
lot of potential. I see a few ways that it could grow and change, and I&#39;m
actually pretty excited to continue working on this game in my down time.</p>
<p>However, I think I&#39;ll probably end up re-writing most of it. The style I used
to code the game isn&#39;t sustainable I think... growing the project much larger
would hurt, especially adding some of the mechanics into it that I have ideas
for. I don&#39;t know that I&#39;ll have to write every piece of code from scratch, but
good chunks of it for sure.</p>
<p>Otherwise, I think I&#39;ve gotten some fairly positive comments on my <a href="http://www.ludumdare.com/compo/ludum-dare-27/?action=preview&amp;uid=7263">entry page</a>,
and I got around a 2.5 out of 5, which is about where I was expecting this time
around. If there were more mechanics and more polish, then I think I would have
absolutely nailed it.</p>
<p>Next time!</p>
]]></summary>
        <updated>Sun Sep 29 2013 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2013-09-ld48_27_grid_ten</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Documentation]]></title>
        <link>http://joelkleier.com/blog/2013-08-documentation</link>
        <summary><![CDATA[<p>I think there are, primarily, four broad categories that developers fit into when
they become users of a library or framework:</p>
<ol>
<li>Beginner</li>
<li>Intermediate</li>
<li>Experienced</li>
<li>&#39;Master&#39;</li>
</ol>
<p>These four areas broadly define some important aspects that any set of
documentation really needs to hit on to be considered &quot;good.&quot;</p>
<p><em>Beginner&#39;s</em> are developers who&#39;ve bought into using a library or framework, and
now need some direction in how to use it. Tutorials, walk-throughs, pod/video-casts,
&#39;hello world&#39; apps, etc, are all tools that the beginner will find really useful.
Documentation at this level really needs to be about guiding the individual in
the uses of the library/framework without letting them bump into any sharp
corners.</p>
<p><em>Intermediate</em> level developers are those who&#39;ve read the beginner material, or
are at least familiar with the system in question. The training wheels are off,
and these individuals need documentation that covers the most common pitfalls
and some more of the common, but, perhaps, complex, configuration situations that
come up. They also need comprehensive documentation on the API or framework itself,
so when a situation comes up that isn&#39;t documented directly, they have the tools
to figure out some of the simpler pitfalls.</p>
<p><em>Experienced</em> level developers are those who&#39;ve bumped into their fair share of
sharp corners, and have had to really dig into the framework or API documentation.
They may have also dug into the code to figure out their problems. These
developers/users might also have committed a fix or two.</p>
<p><em>&#39;Master&#39;</em> level developers are those who really understand the ins-and-outs of
the system in question. They may not be familiar with every aspect of the code,
but they&#39;re familiar enough that they have an intuition about problems that
arise, and how to get around them. If the problem can&#39;t be worked around, these
are the people that really know how the system should be altered to accommodate
their situation.</p>
<p>Now, of course this is an arbitrary categorization, and many times people that would
fit into one category could also fit in another.</p>
<p>Also, this whole idea presumes that developers are <em>users</em> of a piece of software
first. To get a task done, they don&#39;t immediately want to jump into
every library or framework and become intimately familiar with how it&#39;s coded
up. Sometimes getting shit done means taking a leap of faith that they can depend
on some library or framework to do what it advertises, without getting into the
sticky details.</p>
<p>With that in mind, working with Plone, Django, Pyramid/Pylons, and a host of other
Python related libraries and frameworks tends to frustrate the crap out of me,
at least in terms of their documentation strategies.</p>
<p>On the one hand, there is <em>lots</em> and <em>lots</em> of documentation out there, but often
times it&#39;s not really all that &#39;good&#39; (for my definition of good, anyway). Many
times these pieces of software have decent beginner documentation -- plenty of
&#39;hello world&#39; examples, and, usually, enough descriptive text to explain what
the example is all about. Often times they have some sort of API documentation,
which is usually auto-generated, and in varing states of usefulness.</p>
<p>On the other hand, they <strong>tend</strong> to lack in more of the intermediate-level
documentation -- documentation that more clearly explains some of the concepts
of the advanced features, and gives some solutions to common situations/pitfalls.
While they do often have API documentation, the API documentation often has gaps
because it&#39;s someone didn&#39;t actually comment the code (or, maybe, comment it
very well), because, you know, it&#39;s <em>obvious</em>.</p>
<p>Often, for any kind of documentation other than the very basic &#39;hello world&#39;
example(s), it&#39;s &quot;visit IRC&quot;, &quot;visit the list&quot;, or &quot;read the code.&quot;</p>
<p>Yes, having a way to communicate with the community around a piece of software
can be an awesome thing to behold! It can be very
useful... except when people keep coming and asking the same general things.
Then the people that tend to stick around and help either don&#39;t continue to
stick around, or stop helping people with the same questions they&#39;ve answered
many times before. Then it becomes &#39;search the archives&#39;, &#39;RTFM, stupid&#39;, or a
question just goes unanswered.</p>
<p>Certainly, this doesn&#39;t always happen, but it happens a lot more than maybe it
should. I feel like this is the result of a lack &#39;good&#39; documentation.</p>
<p>There are two more things that irrationally irritate me when it comes to
documentation:</p>
<p>First, pointing to another projects documentation, but not explaining
<em>how</em> the current project uses it! I mean, come on. Just saying that a
piece of software is based off another doesn&#39;t mean that it was integrated
and is used exactly like the original project intends and documents it.</p>
<p>Second, documentation location(s) -- seriously, don&#39;t have more than one location
where you&#39;re documentation is accessed from. And while we&#39;re at it, when you have
a lot of different versions of your applications, make sure google, etc, aren&#39;t
pointing to old documentation versions. If they do, make sure there&#39;s an updated
version of the documentation that is linked to from the old documentation.</p>
<p>I&#39;m sure there&#39;s a lot more that I could complain about in regards to documentation,
but this post is already long enough.</p>
<p>I guess I leave my opinions for some hand-wavy solutions:</p>
<ul>
<li>Get the beginner docs solid</li>
<li>Explain <em>how</em> a dependant, but external, library is used and configured
when you need to refer a user to that library&#39;s own documentation</li>
<li>Everytime the community answers a question, it might be a good idea to
publish the problem and result to the primary documentation source -- perhaps
even expanding on it</li>
<li>When autogenerating the API, make sure to have comments on everything
explaining the how&#39;s and why&#39;s of each little piece, even if it seems like
it should be completely obvious</li>
<li>Don&#39;t ever expect people to want to become intimately knowledgable with
a library, and write your documentation accordingly -- most people probably
just want to use it and move on with their lives</li>
<li>Keep documentation centralized and well versioned, including links in old
documentation to newer documentation</li>
</ul>
]]></summary>
        <updated>Tue Aug 20 2013 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2013-08-documentation</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
</feed>
