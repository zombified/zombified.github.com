<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Electric Froth</title>
    <subtitle>Brewlog, musings, and an outlet for random stuff by Joel Kleier</subtitle>
    <link rel="self">http://joelkleier.com/atom.xml</link>
    <link>http://joelkleier.com</link>
    <updated>Mon Nov 03 2014 22:23:31 GMT-0600 (CST)</updated>

    <entry>
        <title><![CDATA[Nim! pt2]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt2</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-language">last post</a> I mentioned I stumbled on a new
language called <em>Nim</em> (formerly <em>Nimrod</em>), and I was able to sink my teeth
into it only slightly more.</p>
</div>
<div class="paragraph">
<p>I tried install the <em>beta</em> <a href="https://github.com/nimrod-code/nimble">package manager</a>,
but was having some problems that are to advanced for me at the moment (IE
I really would rather spend my time on stuff to help me learn the language
before I dig in and really try to help debug what is probably an OSX specific
<a href="https://github.com/nimrod-code/nimble/issues/62">compiler issue</a>).</p>
</div>
<div class="paragraph">
<p>Where to start? I like games, and a game that utilizes <a href="https://www.libsdl.org/">SDL2</a>
presents a <em>lot</em> of challenges. The first challenge, then, is to get a
program up and running that can hook into SDL2&#8201;&#8212;&#8201;Nim already has a
<a href="https://github.com/nimrod-code/sdl2">project</a> to wrap the SDL2 library, and
an <a href="https://github.com/nimrod-code/sdl2/blob/master/examples/sdl_skeleton.nim">example</a>
that can get a window displaying.</p>
</div>
<div class="paragraph">
<p>The trickiest part was actually just making sure the build command was composed
correctly, since I really didn&#8217;t have to create any code (yet).</p>
</div>
<div class="paragraph">
<p>The complication is that I want my directory structure to look like this:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>- bin/
  - (game executable)
- libs/
  - sdl2/
- src/
  - nimcache/
  - main.nim
- Makefile</pre>
</div>
</div>
<div class="paragraph">
<p>Which isn&#8217;t like what I&#8217;ve seen so far (which is very, very little).</p>
</div>
<div class="paragraph">
<p>But it turns out Nim makes things super easy, this would be the <code>all:</code> target
in the <code>Makefile</code>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>nimrod c -p:./libs/sdl2/src/ -o:../bin/out src/main.nim</pre>
</div>
</div>
<div class="paragraph">
<p>A couple of things I learned from this:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>-o</code> argument seems to be relative to the nim source file</p>
</li>
<li>
<p>The <code>-p</code> argument seems to be relative to the compiler call or maybe the current working directory</p>
</li>
</ul>
</div>]]></summary>
        <updated>Mon Nov 03 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt2</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim!]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-language</link>
        <summary><![CDATA[<div class="paragraph">
<p>So, stumbling around discussions related to the topic in my
<a href="http://joelkleier.com/blog/2014-11-a-new-language/">last post</a>,
I discovered a new language that I find pretty neat!</p>
</div>
<div class="paragraph">
<p><a href="http://nim-lang.org/">Nim</a> (formerly "Nimrod") is a statically typed imperative
programming language that spits out C and Javascript (though the Javascript is
still experimental). What struck me is how close the "read" of the language is
to Python&#8201;&#8212;&#8201;by which I mean, when I look at a Nim program, it reads very much
like Python.</p>
</div>
<div class="paragraph">
<p>BUT it is most <em>certainly</em> <strong>not</strong> Python!</p>
</div>
<div class="paragraph">
<p>Here&#8217;s some stuff about Nim, if you&#8217;re curious:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://nim-lang.org/">Nim&#8217;s Homepage</a></p>
</li>
<li>
<p><a href="http://www.drdobbs.com/open-source/nimrod-a-new-systems-programming-languag/240165321">A Dr. Dobb&#8217;s article (2014)</a></p>
</li>
<li>
<p><a href="http://www.infoq.com/presentations/nimrod">InfoQ presentation from the original Author of the language</a></p>
</li>
<li>
<p><a href="http://learnxinyminutes.com/docs/nim/">Learn X In Y Minutes: Where X is Nim</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Here&#8217;s a very simple sample program&#8201;&#8212;&#8201;a guess-the-random-number game:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>discard """
This program is about playing a very simple game: guess a randomly generated number!
"""

from math import random, randomize
from strutils import parseInt

# make sure that the seed is randomized
randomize()

# keep playing the game until the user wants to quit
var rand_val: int
var raw_user_val: string
var user_val: int
while true:
    # pick the number
    rand_val = random(10) + 1 # +1 because it's 0 to max-1

    # ask the user for the number
    echo("Please guess a number between 1 and 10 [q to quit]")
    raw_user_val = readLine(stdin)

    # check to see if the user would like to quit
    if raw_user_val == "q":
        break;

    # make sure the number is an integer
    try:
        user_val = parseInt(raw_user_val)
    except EInvalidValue:
        continue

    # make sure the value is between 1 and 10, inclusive
    if user_val &lt; 1 or user_val &gt; 10:
        continue;

    # check to see if it is the same
    if user_val == rand_val:
        echo("Yay! You Guessed It!")
    else:
        echo("You FAIL!")</pre>
</div>
</div>
<div class="paragraph">
<p>The very first line in this example shows off something I find very interesting.
<code>discard</code> is required so that the compiler ignores things like unused return
values. BUT it can also be used like a multi-line comment by simply discarding
an unassigned multi-line string value.</p>
</div>
<div class="paragraph">
<p>Why is this the way multi-line comments are done? Well, because even regular
single-line comments in Nim are part of the syntax tree, and aren&#8217;t just discarded
during parsing!</p>
</div>
<div class="paragraph">
<p>Progressing through this (very simplistic and not representative) program,
you&#8217;d almost think you were looking at Python, with a few weird function calls
and some type annotations on variables. This makes it very easy for me to
start reading and understanding&#8230;&#8203; not to mention guess at some of the syntax
structure I don&#8217;t already know.</p>
</div>]]></summary>
        <updated>Sun Nov 02 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-language</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[A New Lanugage]]></title>
        <link>http://joelkleier.com/blog/2014-11-a-new-language</link>
        <summary><![CDATA[<div class="paragraph">
<p>I since September, <a href="http://number-none.com/blow/">Jonathan Blow</a>, well known for
<a href="http://braid-game.com/"><em>Braid</em></a> and the upcoming <a href="http://the-witness.net/"><em>The Witness</em></a>,
has been publishing <a href="https://www.youtube.com/playlist?list=PLmV5I2fxaiCKfxMBrNsU1kgKJXD3PkyxO">video "lectures"</a>
discussing his desire to create a language that <em>he</em> likes, specifically for games.</p>
</div>
<div class="paragraph">
<p>They&#8217;re long videos, but his informal presentation is very interesting, and more
conversational than what you&#8217;d get if it were a more precisly planned and timed
lecture or presentation. The tone he takes is refreshing&#8201;&#8212;&#8201;and his attitude towards
building something he wants is inspiring.</p>
</div>
<div class="paragraph">
<p>I look forward to seeing what other ideas he wants to tackle with this language,
and hope he decides to share the code, or at least binaries, for the compiler
sooner rather than later.</p>
</div>]]></summary>
        <updated>Sat Nov 01 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-11-a-new-language</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[FirefoxOS and Ubuntu Phone]]></title>
        <link>http://joelkleier.com/blog/2014-10-mobile-os</link>
        <summary><![CDATA[<div class="paragraph">
<p>Mobile devices are quickly taking over the world. We communicate to each other
in all sorts of ways that once were limited to desktop computers and audio-only
point-to-point connections. We broadcast, share, and hold conversations&#8201;&#8212;&#8201;between
just two people up to thousands, or millions of people. Maybe more. We are living
in an era where <em>anyone</em> (with an internet connection) can potentially
communicate to the <em>entire</em> human population, all at once, for, basically, free.
From a device we carry in our pockets.</p>
</div>
<div class="paragraph">
<p>And I am <em>very</em> happy with all the big players in mobile, pushing this sort of
tech to heights that are truley amazing.</p>
</div>
<div class="paragraph">
<p>To get more out of it, though, we need truly free and open alternatives so that
these devices can push boundaries in ways the current options cannot.</p>
</div>
<div class="paragraph">
<p>This is where <a href="https://www.mozilla.org/en-US/firefox/os/"><em>FirefoxOS</em></a> and
<a href="http://www.ubuntu.com/phone"><em>Ubuntu Phone</em></a> come into play. These operating systems
may never be "bigger" than Android or iOS in terms of market penetration, but
what they represent, and what they allow people to do is none-the-less important.</p>
</div>
<div class="paragraph">
<p>FirefoxOS is pushing into low-end markets and trying to make a phone that can
get people onto a web-enabled platform in the same price range as their classic
phones. It&#8217;s very open, and promotes an open culture&#8201;&#8212;&#8201;more than that, it promotes
a <em>web</em> culture. At the same time, it&#8217;s pushing technical boundaries for browsers
by implementing and helping to standardize API&#8217;s for accessing all sorts of native
device features.</p>
</div>
<div class="paragraph">
<p>Ubuntu Phone, on the other hand, is trying to bring a fully open source OS into
the mobile marketplace, but doesn&#8217;t seem to be focusing on the low-end market or
the web, like FirefoxOS.</p>
</div>
<div class="paragraph">
<p>Instead, Canonical seems to view the mobile space as having the same problems as
the desktop space&#8201;&#8212;&#8201;no good, free libre open source operating systems with completely
open development processes. AND they see a future where mobile devices start
converging into desktop-level computers&#8201;&#8212;&#8201;having a different UI&#8217;s depending on
how they&#8217;re being used. IE a touch based UI for mobile use, and a desktop UI for
when it&#8217;s docked and paired to monitors, keyboards, and mice.</p>
</div>
<div class="paragraph">
<p>The idea of this convergence may not be Canonicals highest priority with the
failure of the Edge in 2013, but idea is still there. I can&#8217;t wait until it
becomes reality.</p>
</div>
<div class="paragraph">
<p>It may not happen right away, it probably won&#8217;t replace desktops and
laptops completely, it may not be very good when it first starts to really happen, and,
heck, it may fail once or twice. But it will happen. The concept of carrying around
a fully functional computer in our pockets already exists&#8201;&#8212;&#8201;the next step
is to make that computer <em>more</em> connectable and <em>more</em> useable for creative
tasks.</p>
</div>
<div class="paragraph">
<p>The future is awesome, and I think FirefoxOS and Ubuntu will play a huge role
in the future, whether or not they have large marketshare.</p>
</div>]]></summary>
        <updated>Fri Oct 31 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-mobile-os</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Asciidoc + Metalsmith]]></title>
        <link>http://joelkleier.com/blog/2014-10-asciidoc-plus-metalsmith</link>
        <summary><![CDATA[<div class="paragraph">
<p>I <em>love</em> metalsmith. It&#8217;s <strong>so</strong> easy to integrate extensions when they&#8217;re just
middleware for reading and writing files. Very flexible&#8201;&#8212;&#8201;mind bending at times,
perhaps a small challenge to debug occassionally, but really cool.</p>
</div>
<div class="paragraph">
<p>And so, this is my first post using <a href="http://www.methods.co.nz/asciidoc/">AsciiDoc</a>
to format the source text of my post, and <a href="https://github.com/asciidoctor/asciidoctor.js">AsciiDoctor.js</a>
do perform the actual conversion to HTML.</p>
</div>
<div class="paragraph">
<p>We&#8217;ll see how it goes! I may not proceed with it&#8217;s usage, but it does provide
some clear advantages over markdown. The downside, though, I don&#8217;t think the
tooling for asciidoc is quite as ubiquitous as markdown.</p>
</div>
<div class="paragraph">
<p>As for the actual integration with metalsmith, I just created a plugin based on
the <a href="https://github.com/segmentio/metalsmith-markdown/blob/master/lib/index.js"><em>metalsmith-markdown</em> plugin</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>var basename = require('path').basename;
var dirname = require('path').dirname;
var extname = require('path').extname;
var asciidoctor = require('asciidoctor.js')();
var opal = asciidoctor.Opal;
var asciidoc_processor = asciidoctor.Asciidoctor(true); // without extensions, pass 'true' for extensions

function is_asciidoc(filename) {
    return /\.adoc/.test(extname(filename));
}

var asciidoc = function(config) {
    config = config || {};
    var keys = config.keys || [];

    return function(files, metalsmith, done) {
        setImmediate(done);
        Object.keys(files).forEach(function(file){
            if(!is_asciidoc(file)) return;
            var data = files[file];
            var dir = dirname(file);
            var html = basename(file, extname(file)) + '.html';
            if('.' != dir) html = dir + '/' + html;

            var options = opal.hash2(
                ['doctype', 'attributes'],
                {doctype:'article', attributes: ['showtitle']});
            var str = asciidoc_processor.$convert(data.contents.toString(), options);
            data.contents = new Buffer(str);
            keys.forEach(function(key){
                data[key] = asciidoc_processor.$convert(data[key], options);
            });

            delete files[file];
            files[html] = data;
        });
    };
};</pre>
</div>
</div>
<div class="paragraph">
<p>The <code>config</code> options aren&#8217;t really used when you instantiate the plugin&#8230;&#8203; but one
step at a time. I still have to figure out how to effectively add the <code>config</code>
options to the <code>options</code> passed into the <code>asciidoc_processor</code>, which I haven&#8217;t
done yet, because I ran out of time to work on it for the moment, and it&#8217;s kinda
low priority for me.</p>
</div>
<div class="paragraph">
<p>I&#8217;m still using yaml front-matter in my source documents, which is kinda not how
asciidoc is intended to have metadata, but it works for my purposes and means
I don&#8217;t have to change anything else right now!</p>
</div>]]></summary>
        <updated>Thu Oct 30 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-asciidoc-plus-metalsmith</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[David Revoy]]></title>
        <link>http://joelkleier.com/blog/2014-10-david-revoy</link>
        <summary><![CDATA[<p><a href="http://www.davidrevoy.com/" title="David Revoy: illustrator, concept-artist">David Revoy</a> works mostly as a digital artist doing illustrations. I find his
work inspiring -- both as an artist, and as an open source enthusiast.</p>
<p>He&#39;s worked on three of the open movies produced by the Blender Foundation in
their <a href="http://www.blender.org/features/projects/" title="Blender: Open Projects">&quot;Open Projects&quot;</a> -- an attempt to make short feature films with 100%
open source software.</p>
<p>He also spends a lot of time helping out the <a href="https://krita.org/" title="KRITA">Krita</a> and <a href="http://mypaint.intilinux.com/" title="MyPaint">mypaint</a> open
source illustration/painting/drawing tools.</p>
]]></summary>
        <updated>Wed Oct 29 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-david-revoy</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[James Gurney]]></title>
        <link>http://joelkleier.com/blog/2014-10-james-gurney</link>
        <summary><![CDATA[<p>I learned of <a href="http://gurneyjourney.blogspot.com/" title="Gurney Journey">James Gurney</a> after stumbling across his <a href="http://gurneyjourney.blogspot.com/" title="Gurney Journey">blog</a> around six
years ago. He makes a very strong effort to show his work in it&#39;s various stages,
from very rough to simply beautiful. He doesn&#39;t try to hide his process -- he
tries to be open and forthcoming, two qualities that attract me to the ideas
encompased by &quot;open source.&quot;</p>
<p>His work focuses on two areas -- &quot;Imaginative Realism&quot; (realistically painting
things that don&#39;t have any full references, like dinosaurs) and &quot;Plein Air&quot; 
(essentially going somewhere and painting what you see).</p>
<p>His preferred medium seems to be watercolor, <a href="http://en.wikipedia.org/wiki/Gouache" title="Gouache">gouache</a> (kind of an opaque
watercolor, but not really), and, lately, <a href="http://en.wikipedia.org/wiki/Casein" title="Casein">casein</a> (milk based paint popular
prior to 1960, when acrylic based paints gained popularity).</p>
]]></summary>
        <updated>Tue Oct 28 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-james-gurney</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Markup Languages]]></title>
        <link>http://joelkleier.com/blog/2014-10-markup-langs</link>
        <summary><![CDATA[<p>I read an article titled <a href="https://medium.com/@chacon/living-the-future-of-technical-writing-2f368bd0a272" title="Living the Future of Technical Writing">&quot;Living the Future of Technical Writing&quot; by Scott Chacon</a>, the author
of <a href="http://git-scm.com/book/en/v2" title="Pro Git 2nd Edition">Pro Git</a>, and it got me thinking a little about the techical writing process,
and the formats I use to markup text.</p>
<p>I have no personal experience with asciidoc -- most of the plain-text based markup
I write is in markdown or reStructuredText. I like markdown, but sometimes it&#39;s
too simple and has ambiguously defined behaviors (like pre/code text in a list item).
I like reStructuredText, but some aspects of it&#39;s syntax leave a bad taste (the weird
syntax for links and no spaces before number/bullet for lists to name a couple).</p>
<p>And so, reading this article made me want to find out if asciidoc improves on
the issues I have with markdown and reStructuredText, and what kind of tooling
I can use to manipulate it.</p>
<p>Some neat features specific to asciidoc:</p>
<ul>
<li>Admonitions (document call-outs for notes, tips, etc)</li>
<li>Simple usage of italic, bold, and inline monospace -- all embeddible within each other</li>
<li>Custom inline styling (IE &quot;[small]#small print#&quot;)</li>
<li>You can specify &quot;curved&quot; apostrophes and quotation marks</li>
<li>Document Headers (which can include author, revision, and attributes)</li>
<li>You can specify explicit id&#39;s for section links</li>
<li>You can specify parts of other ascii documents to include inline</li>
<li>You can include content from URI&#39;s</li>
<li>You can specify manual page breaks</li>
<li>You can specify checklists</li>
<li>Ability to explicitly notate content as an extension of the previous list item</li>
<li>Ability to link inline anchors</li>
<li>Internal cross-references</li>
<li>Callouts for code blocks</li>
<li>Code blocks sourced from files</li>
<li>Custom substitutions</li>
<li>Commenting</li>
</ul>
<p>Some things I can see already annoying me:</p>
<ul>
<li>For lists of greater than one level, you need to use <em>n</em> number of list markers
where <em>n</em> is the level of indentation. Small thing, but it annoys me greatly
that reStructuredText requires the list marker to not have space in front of it too.
BUT at least asciidoc explicitly specifies that leading white space to lists is
not relevant</li>
<li>The syntax for extending list content might make things a little hard to read</li>
<li>Subjectively, I feel like the link syntax isn&#39;t as nice as markdowns -- it&#39;s
about on par with how I feel about reStructuredText&#39;s link syntax.</li>
</ul>
<p>I might give this format a serious shot -- there is <a href="https://github.com/asciidoctor/asciidoctor.js" title="asciidoctor.js">asciidoctor.js</a>, so I might
be able to integrate it into my <a href="https://github.com/asciidoctor/asciidoctor.js" title="Metalsmith">Metalsmith</a> build! I&#39;m certainly going to
test it out, but who knows if it&#39;ll go anywhere...</p>
]]></summary>
        <updated>Mon Oct 27 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-markup-langs</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[My Private Git Setup]]></title>
        <link>http://joelkleier.com/blog/2014-10-my-personal-git</link>
        <summary><![CDATA[<p>Occasionally I work on a project that I want in version control, duplicated in a
central location, but don&#39;t want to throw it into the public eye. I don&#39;t need
much to accomplish this -- a Raspberry Pi sitting headless on my home network
works perfectly.</p>
<p>Basically, I use <a href="http://git-scm.com/" title="git --fast-version-control">git</a>+ssh to do operations on my repos remotely, and
<a href="https://github.com/jonashaag/klaus" title="Klaus">klaus</a> + <a href="http://gunicorn.org/" title="gunicorn">gunicorn</a> to browse and dig through my repos when I want to.</p>
<p>It&#39;s a pretty smooth setup!</p>
<p>The most complicated parts of this setup are:</p>
<ol>
<li>I use a <code>virtualenv</code> to wrap gunicorn, klaus, and dependencies in their own python environment</li>
<li>I use this gunicorn command (which uses <code>klaus.contrib.wsgi_autoreload</code>
pointed at a single directory containing only git repo subdirectories):</li>
</ol>
<!-- -->

<pre><code>    exec /path/to/gunicorn -w 1 -b 0.0.0.0:80 \
        --env KLAUS_SITE_NAME=&quot;You Have The GITS&quot; \
        --env KLAUS_REPOS=&quot;/path/to/git/repo/parent/dir&quot; \
        --log-level error --log-file /var/log/klaus.log \
        klaus.contrib.wsgi_autoreload
</code></pre><p>Combined with some basic ssh configuration (setting up a Host &#39;shortcut&#39; in
my <code>~/.ssh/config</code> file and authorizing my public key for a user on my
raspberry pi), this method is very low-friction to work with and I get a
nice UI to browse my source with, if I want!</p>
]]></summary>
        <updated>Sun Oct 26 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-my-personal-git</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[PureScript]]></title>
        <link>http://joelkleier.com/blog/2014-10-purescript</link>
        <summary><![CDATA[<p>I&#39;ve always had a fondness for programming languages, and one that caught my eye
recently is <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a> -- a strongly and statically typed language in the
vein of Haskell (which I&#39;ve never really learned proper, though I have it on
the &#39;maybe someday&#39; list). <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a>, though, compiles to JavaScript
-- which, despite it&#39;s warts, is a language that I think is the bees knees.</p>
<p>There&#39;s a <a href="https://leanpub.com/purescript/" title="PureScript By Example">book</a> out there for it, available free to read online, so I thought
I&#39;d just start going through it to check out the language.</p>
<p>It has you install <a href="https://www.haskell.org/platform/" title="The Haskell Platform">The Haskell Platform</a> (for the actual compiler), <a href="http://nodejs.org/" title="node.js">node/npm</a>
(for node based utilities and tools), <a href="http://bower.io/" title="Bower: A package manager for the web">Bower</a> (for all the <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a>
packages), and then <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a> (to automate builds and such).</p>
<p>Well, that&#39;s a pretty big stack to install just to write some &quot;Hello World&quot;
equivalent programs... but, I don&#39;t mind! Already had most of them installed
anyway. However, their setup is not how I prefer to work (when I&#39;m working on
my own projects at least).</p>
<p>Here are my deviations from the books setup:</p>
<ol>
<li>I installed <a href="http://bower.io/" title="Bower: A package manager for the web">Bower</a> locally to the folder (I don&#39;t like polluting my global
npm packages if I don&#39;t have to... and prefixing <code>./node_packages/.bin/bower</code>
doesn&#39;t bother me since I&#39;m scripting my builds anyway).</li>
<li>I Started using <a href="http://www.gnu.org/software/make/" title="GNU Make">GNU Make</a> instead of <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a>. Why? Sure, grunt is the
new &#39;hot&#39; thing, but, for my purposes, it&#39;s clearly a reinvention of a
wheel that works <em>really</em> well. I like <a href="http://www.gnu.org/software/make/" title="GNU Make">GNU Make</a>, and it will serve me
better than <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a> (that&#39;s not to say <a href="http://gruntjs.com/" title="Grunt: The JavaScript Task Runner">Grunt</a> is useless,
but in this instance I prefer to stick with the tried and true).</li>
</ol>
<p>So, my <code>Makefile</code> looks something like this:</p>
<pre><code>BOWER_FILES=`find ./bower_components -regex &quot;.*/src/.*\.purs&quot;`
CHAPTER2_FILES=src/Chapter2.purs
PHONEBOOK_FILES=src/Data/PhoneBook.purs
ALL_FILES=${BOWER_FILES} \
          ${CHAPTER2_FILES} \
          ${PHONEBOOK_FILES}


all: Chapter2 PhoneBook

bootstrap:
    npm install bower
    bower install purescript-math#0.1.0
    bower install purescript-list

psci:
    psci ${ALL_FILES}

Chapter2:
    psc ${BOWER_FILES} \
        ${CHAPTER2_FILES} \
        --output dist/Chapter2-Main.js \
        --module Chapter2 \
        --main Chapter2
</code></pre><p>Some explanations:</p>
<ul>
<li>The definition of <code>BOWER_FILES</code> uses backticks around a find command to
get a list of all purescript files identified as purescript source files
(the community tends to structure their projects a specific way, so this
command makes sense for that structure)</li>
<li>The <code>bootstrap</code> target can be used to install bower and all the
dependancies that are needed for the project</li>
<li>The <code>psci</code> target can be used as a shortcut for loading the REPL with all
project files</li>
<li>The <code>Chapter2</code> a target is for building the file(s) in Chapter 2 -- I&#39;ve only
read through Chapter 3 so far, and Chapter 2 is the only one that&#39;s had any
built files. Chapter 1 was introductory, and Chapter 3 mostly focused on the
REPL.</li>
</ul>
<p>Hopefully I get some time soon to play with <a href="http://www.purescript.org/" title="PureScript Community Blog">PureScript</a> some more! So far
my impressions are very positive!</p>
]]></summary>
        <updated>Sat Oct 25 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-purescript</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
</feed>
