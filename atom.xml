<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Electric Froth</title>
    <subtitle>Brewlog, musings, and an outlet for random stuff by Joel Kleier</subtitle>
    <link rel="self">http://joelkleier.com/atom.xml</link>
    <link>http://joelkleier.com</link>
    <updated>Fri Nov 07 2014 21:57:48 GMT-0600 (CST)</updated>

    <entry>
        <title><![CDATA[Survivorship Bias]]></title>
        <link>http://joelkleier.com/blog/2014-11-survivorship-bias</link>
        <summary><![CDATA[<div class="paragraph">
<p>Here&#8217;s a <a href="http://en.wikipedia.org/wiki/Survivorship_bias">Wikipedia article</a> on
a phenominon called <em>survivorship bias</em>. Basically, when concentration is given
only to people or things that have "survived" a process, there can be a bias
towards overly optimistic beliefs about the survivors.</p>
</div>
<div class="paragraph">
<p>Reading <a href="https://news.ycombinator.com/">Hacker News</a> or <a href="http://www.reddit.com/">Reddit</a>
with any regularity, it&#8217;s easy to learn about all sorts of amazing things that
other people do. While this <em>can</em> be encouragement to work hard to do amazing
things in one&#8217;s own life, it <em>can</em> also lead into the opposite direction,
and foster feelings of worthlessness and under-achievement. Seeing so many
people do so many things that look like they are so much better than anything
you&#8217;ve done can trick you into believing you can&#8217;t do anything great.</p>
</div>
<div class="paragraph">
<p><strong>Wrong</strong>!</p>
</div>
<div class="paragraph">
<p>When you <em>read</em> about other people doing amazing things, you are <em>not</em> reading
about the other not-so-amazing things they&#8217;ve done to create that one amazing
thing. Very rare is the person that can start doing amazing things without
prior experience, and keep doing amazing things consistently. 'Very rare' may be
to common&#8230;&#8203; perhaps a more appropriate description would be 'never'.</p>
</div>
<div class="paragraph">
<p>People make mistakes, people fail, and if all you do is read the likes of
Hacker News and Reddit, you&#8217;ll never see all the hard work that goes into
success.</p>
</div>
<div class="paragraph">
<p>Part of the equation <em>is</em> reading and learning from other people, but the other
part, the one you <em>cannot</em> ignore, is that amazing things come from <em>doing</em> things
and failing a lot first.</p>
</div>]]></summary>
        <updated>Fri Nov 07 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-survivorship-bias</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt5]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt5</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt4">last post</a> I showed how to
get a circle bouncing back and forth on the screen. Next, I&#8217;d need to figure
out how Nim handles
<a href="https://wiki.libsdl.org/SDL_Event?highlight=%28%5CbCategoryStruct%5Cb%29%7C%28SDLStructTemplate%29">SDL_Event</a>,
which normally uses a union structure along with a <em>type</em> field to determine
how the data for an event gets used.</p>
</div>
<div class="paragraph">
<p>Nim doesn&#8217;t have a union type as far as I can tell. It has a
<a href="http://nim-lang.org/manual.html#union-pragma"><em>pragma</em></a> for
telling the compiler that a Nim structure should be translated to a C <em>union</em>,
but that&#8217;s not what I"m looking for.</p>
</div>
<div class="paragraph">
<p>Digging into the <a href="https://github.com/nimrod-code/sdl2/">SDL2 wrapper</a> a little,
I think this is the piece of code I need to understand:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>template EvConv(name, name2, ptype: expr; valid: set[TEventType]): stmt {.immediate.}=
  proc `name`* (event: var TEvent): ptype =
    assert event.kind in valid
    return cast[ptype](addr event)
  proc `name2`* (event: var TEvent): ptype =
    assert event.kind in valid
    return cast[ptype](addr event)</pre>
</div>
</div>
<div class="paragraph">
<p>which is used like:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>EvConv(EvWindow, window, PWindowEvent, {WindowEvent})</pre>
</div>
</div>
<div class="paragraph">
<p>What is a <code>template</code> in Nim&#8217;s parlance?
<a href="http://nim-lang.org/manual.html#templates">As it turns out</a>, it&#8217;s a way of creating
a simple substitution macro at compile time, and is called like a normal procedure.</p>
</div>
<div class="paragraph">
<p>Therefore the <code>EvConv</code> template being defined above is creating 2 procedures that
are identical, except for the name. If you direct your gaze to the usage example,
the first two parameters are <code>EvWindow</code> and <code>window</code>&#8201;&#8212;&#8201;which means that the
example will result in two procedures called <code>EvWindow</code> and <code>window</code>, which do
precisly the same thing, which is to make certain the <em>kind</em> of event is a valid
<em>kind</em>, and then to <em>cast</em> (reinterpret the type without altering the bit structure)
the <em>event</em> data into the Nim <em>type</em> pointed to by the <em>ptype</em> pointer.</p>
</div>
<div class="paragraph">
<p>The result of this is that in my program I can check for a keydown event thusly:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>    if evt.kind == KeyDown:
      if evt.key.keysym.sym == K_ESCAPE:
        runGame = false
        break</pre>
</div>
</div>
<div class="paragraph">
<p>There&#8217;s a few things that initially tripped me up with even that, so allow me
to explain a few more things:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>the <code>TEvent</code> type (in the SDL2 wrapper) is an
<a href="http://nim-lang.org/manual.html#reference-and-pointer-types"><em>unsafe/untraced</em></a>
pointer&#8201;&#8212;&#8201;but it get&#8217;s dereferenced implicitely by the &#8220;.&#8221;</p>
</li>
<li>
<p>the <code>EvConv</code> <em>template</em> produces the <code>EvKeyboard</code> and <code>key</code> procedures that
each can be used in the <a href="http://nim-lang.org/manual.html#method-call-syntax">method call syntax</a>
style on TEvent values</p>
</li>
<li>
<p>The actual key value is retrieved from the <code>TEvent</code> property <code>keysym</code>, which
in turn is a <code>TKeySym</code> type. The <code>TKeySym</code> type has properties that get values
for a <em>scancode</em>, a <em>keycode</em>, or the <em>unicode value</em>. The difference between
the <em>scancode</em> and <em>keycode</em> is that the <em>scancode</em> tries to represent the
location on the actual keyboard, whereas the <em>keycode</em> is just the value
returned by the device, regardless of whether or not it&#8217;s in the expected
physical position. I chose <em>keycode</em> (the <code>.sym</code> call) because the
<em>scancode</em> seems like it&#8217;s rife with potential hardware compatibility issues,
and, eventually, I should allow for custom remapping of keys anyway.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Whew!</p>
</div>
<div class="paragraph">
<p>That still wasn&#8217;t much code, but I did learn a lot about the SDL2 wrapper, Nim,
and even a little about SDL2 itself!</p>
</div>]]></summary>
        <updated>Thu Nov 06 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt5</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt4]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt4</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt3">last post</a> I went through my
process of discovering how Nim works, at least a little bit. This time around
I want to talk about what I did to get a circle bouncing back and forth on the
screen! Not much of an acheivment, all things considered, but I spent most of
my time just reading a little about
<a href="http://cms.ferzkopp.net/index.php/software/13-sdl-gfx">SDL2_gfx</a>.</p>
</div>
<div class="paragraph">
<p>First, I defined a type <code>TBall</code> to describe the position, size, and velocity
of my little circle:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  TBall = object
    x: float
    y: float
    rad: float
    vx: float
    vy: float</pre>
</div>
</div>
<div class="paragraph">
<p>Then, I instantiated what will become the bouncing circle:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>var
  ball = TBall(
    x: 320,
    y: 240,
    rad: 10,
    vx: 100,
    vy: 0)</pre>
</div>
</div>
<div class="paragraph">
<p>I do some checks to make sure the ball position is in bounds, and moving in
the correct direction:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>  ball.x += ball.vx * dt

  if ball.x &lt; ball.rad:
    ball.x = ball.rad
    ball.vx *= -1
  elif ball.x &gt; 640-ball.rad:
    ball.x = 640-ball.rad
    ball.vx *= -1</pre>
</div>
</div>
<div class="paragraph">
<p>And finally, I render the ball with a handy method in the <code>SDL2_gfx</code> library:</p>
</div>
<div class="literalblock">
<div class="content">
<pre> renderer.filledCircleRGBA(int16(ball.x), int16(ball.y), int16(ball.rad), 0,255,0,255)</pre>
</div>
</div>
<div class="paragraph">
<p>The only tricky thing here is the type conversion&#8201;&#8212;&#8201;in nim there&#8217;s a distinct
difference between type <em>conversion</em> and type <em>casting</em>.</p>
</div>
<div class="paragraph">
<p>Type <em>conversion</em> is used in a manner like <code>int16(123.3)</code>, and the program will
do it&#8217;s best to translate the value into the specified type.</p>
</div>
<div class="paragraph">
<p>Type <em>casting</em> is used in a manner like <code>cast[int16](123.3)</code>, and the program will
keep the same bit patter, but change the values type. Which will lead, inevitably
to different values than <em>conversion</em>.</p>
</div>
<div class="paragraph">
<p>Until next time!</p>
</div>]]></summary>
        <updated>Wed Nov 05 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt4</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt3]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt3</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-pt2">last post</a> I setup a simple
example skeleton project and made it compile like I wanted to. This time around,
I am going to go through my process of figuring things out. I&#8217;m new to both
Nim and SDL2, so I have a bunch of stuff to learn!</p>
</div>
<div class="paragraph">
<p>After skimming the skeleton code from last time, and generally getting a grasp
of what the program is doing, I start picking out pieces of the code that I
want to know more about. The first such piece is
<a href="https://github.com/nimrod-code/sdl2/blob/master/examples/sdl_skeleton.nim#L13-L17">this one</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>var
  evt: TEvent
  runGame = true
  fpsman: TFPSmanager
fpsman.init</pre>
</div>
</div>
<div class="paragraph">
<p>I have a bunch of questions, but lets start with "What is 'TFPSManager'? Does
it come from SDL2? is it part of the wrapper?" (alright, lets start with
3 questions&#8230;&#8203;)</p>
</div>
<div class="paragraph">
<p>As it turns out, it&#8217;s defined in
<a href="https://github.com/nimrod-code/sdl2/blob/master/src/sdl2/gfx.nim"><code>sdl2/gfx.nim</code></a>,
which is a wrapper for the <a href="http://cms.ferzkopp.net/index.php/software/13-sdl-gfx">SDL2_gfx</a>
library, which seems to be not part of the <a href="https://www.libsdl.org/">SDL2</a> library
proper, but instead is a sort of boiler-plate project.</p>
</div>
<div class="paragraph">
<p>The <code>sdl2/gfx.nim</code> library is actually imported into the skeleton by
<a href="https://github.com/nimrod-code/sdl2/blob/master/examples/sdl_skeleton.nim#L2">this</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>import sdl2, sdl2/gfx</pre>
</div>
</div>
<div class="paragraph">
<p>I&#8217;m still wondering how <code>sdl2/gfx</code> imports TFPSmanager into the skeleton&#8217;s scope,
but I&#8217;ll save figuring that out for later. Regardless, the <code>sdl2/gfx</code> part pulls
in the exported symbols in <code>sdl2/gfx</code>.</p>
</div>
<div class="paragraph">
<p>And here&#8217;s the actual <a href="https://github.com/nimrod-code/sdl2/blob/master/src/sdl2/gfx.nim#L46-L52">type definition</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>type
  TFPSmanager* {.pure, final.} = object
    framecount*: cint
    rateticks*: cfloat
    baseticks*: cint
    lastticks*: cint
    rate*: cint</pre>
</div>
</div>
<div class="paragraph">
<p><code>{.pure, final.}</code> is a pragma statement saying:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>This type cannot be inherited from (final)</p>
</li>
<li>
<p>This type should have not have any runtime type checking for binary compatibility with other compiled languages (pure)</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Basically, this type needs to match up with a type found in the SDL2_gfx library
called <code>FPSmanager</code>, which these pragmas ensure.</p>
</div>
<div class="paragraph">
<p>My next question, seeing this type definition, is "Where are 'cint' and 'cfloat' defined?"</p>
</div>
<div class="paragraph">
<p>Turns out, these are built-into the compiler <code>system</code> module, which is included
and available by default in all modules. Took me some doing, for some reason, but
I ended up finding the documentation <a href="http://nimrod-lang.org/system.html#cint">here</a>.
The documentation basically just explicitely says that <code>cint</code> == C&#8217;s 'int' == <code>int32</code>
in Nim.</p>
</div>
<div class="paragraph">
<p>Okay, so back to the skeleton&#8201;&#8212;&#8201;there&#8217;s a line: <code>fpsman.init</code>. Where is this
method or property defined? Actually, it&#8217;s a "procedure" definition, and it&#8217;s
located in the
<a href="https://github.com/nimrod-code/sdl2/blob/master/src/sdl2/gfx.nim#L229-L234">sdl2/gfx.nim</a>
file as well. But this teaches me a bunch of things! First, here are the definitions:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>proc init*(manager: var TFPSmanager) {.importc: "SDL_initFramerate".}
proc setFramerate*(manager: var TFPSmanager; rate: cint): SDL_Return {.
  importc: "SDL_setFramerate", discardable.}
proc getFramerate*(manager: var TFPSmanager): cint {.importc: "SDL_getFramerate".}
proc getFramecount*(manager: var TFPSmanager): cint {.importc: "SDL_getFramecount".}
proc delay*(manager: var TFPSmanager): cint {.importc: "SDL_framerateDelay", discardable.}</pre>
</div>
</div>
<div class="paragraph">
<p>They are <a href="http://nim-lang.org/tut1.html#forward-declarations"><em>forward declarations</em></a>
of methods, with which the FFI imports declarations for from C libs.</p>
</div>
<div class="paragraph">
<p>And then, the procedures here are defined to take advantage of syntactic sugar
called <a href="http://nim-lang.org/tut2.html#method-call-syntax"><em>method call syntax</em></a> in
Nim. Essentially, the first value of a procedure can be prefixed to a call of the
procedure. Example:</p>
</div>
<div class="literalblock">
<div class="content">
<pre># assuming this is defined
proc xlen(s: string) =
   result = len(s)
# then this:
assert(xlen("value")==5)
# is the same as:
assert("value".xlen==5)</pre>
</div>
</div>
<div class="paragraph">
<p>Pretty nifty!</p>
</div>
<div class="paragraph">
<p>Back to the <code>init</code> definition: since <code>init</code> takes 1 parameter, a <code>TFPSmanager</code>,
then the statement <code>fpsman.init</code> makes sense, as it&#8217;s syntactic sugar for
<code>init(fpsman)</code>.</p>
</div>
<div class="paragraph">
<p>Next up, what is the asterisk between <code>init</code> and <code>(</code> mean? Easy! It tells Nim that
this procedure is to be exported by the module.</p>
</div>
<div class="paragraph">
<p>What about the 'importc' pragma statement? Well, like you&#8217;d imagine, it&#8217;s for
telling the compiler that this forward declaration represents a definition found
in a C library, and the FFI should do it&#8217;s magic and import that definition.</p>
</div>
<div class="paragraph">
<p>And What about that 'SDL_Return' value&#8201;&#8212;&#8201;where&#8217;s that coming from? It&#8217;s in
<a href="https://github.com/nimrod-code/sdl2/blob/master/src/sdl2.nim#L205-L207">sdl2.nim</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>SDL_Return* {.size: sizeof(cint).} = enum SdlError = -1, SdlSuccess = 0 ##\
    ## Return value for many SDL functions. Any function that returns like this \
    ## should also be discardable</pre>
</div>
</div>
<div class="paragraph">
<p>A <em>type</em> definition for an enum with 2 values, that is marked as being the <code>size</code>
of a <code>cint</code> so as to be compatible with code referenced using the FFI.</p>
</div>
<div class="paragraph">
<p>Back to the procedures defined for use with <code>TFPSmanager</code>, the last thing I had a
question about tonight is the <code>discardable</code> pragma value. The answer is pretty
straight-forward: it is telling the compiler that the return value can be
discarded implicitely&#8201;&#8212;&#8201;IE there&#8217;s no need to use the <code>discard</code> keyword when calling
this procedure.</p>
</div>
<div class="paragraph">
<p>And that&#8217;s it for tonight!</p>
</div>
<div class="paragraph">
<p>I learned a <em>bunch</em> about how Nim works, and a little about SDL2.</p>
</div>
<div class="paragraph">
<p>Until next time!</p>
</div>]]></summary>
        <updated>Tue Nov 04 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt3</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim! pt2]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-pt2</link>
        <summary><![CDATA[<div class="paragraph">
<p>In my <a href="http://joelkleier.com/blog/2014-11-nim-language">last post</a> I mentioned I stumbled on a new
language called <em>Nim</em> (formerly <em>Nimrod</em>), and I was able to sink my teeth
into it only slightly more.</p>
</div>
<div class="paragraph">
<p>I tried install the <em>beta</em> <a href="https://github.com/nimrod-code/nimble">package manager</a>,
but was having some problems that are to advanced for me at the moment (IE
I really would rather spend my time on stuff to help me learn the language
before I dig in and really try to help debug what is probably an OSX specific
<a href="https://github.com/nimrod-code/nimble/issues/62">compiler issue</a>).</p>
</div>
<div class="paragraph">
<p>Where to start? I like games, and a game that utilizes <a href="https://www.libsdl.org/">SDL2</a>
presents a <em>lot</em> of challenges. The first challenge, then, is to get a
program up and running that can hook into SDL2&#8201;&#8212;&#8201;Nim already has a
<a href="https://github.com/nimrod-code/sdl2">project</a> to wrap the SDL2 library, and
an <a href="https://github.com/nimrod-code/sdl2/blob/master/examples/sdl_skeleton.nim">example</a>
that can get a window displaying.</p>
</div>
<div class="paragraph">
<p>The trickiest part was actually just making sure the build command was composed
correctly, since I really didn&#8217;t have to create any code (yet).</p>
</div>
<div class="paragraph">
<p>The complication is that I want my directory structure to look like this:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>- bin/
  - (game executable)
- libs/
  - sdl2/
- src/
  - nimcache/
  - main.nim
- Makefile</pre>
</div>
</div>
<div class="paragraph">
<p>Which isn&#8217;t like what I&#8217;ve seen so far (which is very, very little).</p>
</div>
<div class="paragraph">
<p>But it turns out Nim makes things super easy, this would be the <code>all:</code> target
in the <code>Makefile</code>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>nimrod c -p:./libs/sdl2/src/ -o:../bin/out src/main.nim</pre>
</div>
</div>
<div class="paragraph">
<p>A couple of things I learned from this:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>-o</code> argument seems to be relative to the nim source file</p>
</li>
<li>
<p>The <code>-p</code> argument seems to be relative to the compiler call or maybe the current working directory</p>
</li>
</ul>
</div>]]></summary>
        <updated>Mon Nov 03 2014 00:00:00 GMT-0600 (CST)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-pt2</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Nim!]]></title>
        <link>http://joelkleier.com/blog/2014-11-nim-language</link>
        <summary><![CDATA[<div class="paragraph">
<p>So, stumbling around discussions related to the topic in my
<a href="http://joelkleier.com/blog/2014-11-a-new-language/">last post</a>,
I discovered a new language that I find pretty neat!</p>
</div>
<div class="paragraph">
<p><a href="http://nim-lang.org/">Nim</a> (formerly "Nimrod") is a statically typed imperative
programming language that spits out C and Javascript (though the Javascript is
still experimental). What struck me is how close the "read" of the language is
to Python&#8201;&#8212;&#8201;by which I mean, when I look at a Nim program, it reads very much
like Python.</p>
</div>
<div class="paragraph">
<p>BUT it is most <em>certainly</em> <strong>not</strong> Python!</p>
</div>
<div class="paragraph">
<p>Here&#8217;s some stuff about Nim, if you&#8217;re curious:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://nim-lang.org/">Nim&#8217;s Homepage</a></p>
</li>
<li>
<p><a href="http://www.drdobbs.com/open-source/nimrod-a-new-systems-programming-languag/240165321">A Dr. Dobb&#8217;s article (2014)</a></p>
</li>
<li>
<p><a href="http://www.infoq.com/presentations/nimrod">InfoQ presentation from the original Author of the language</a></p>
</li>
<li>
<p><a href="http://learnxinyminutes.com/docs/nim/">Learn X In Y Minutes: Where X is Nim</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Here&#8217;s a very simple sample program&#8201;&#8212;&#8201;a guess-the-random-number game:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>discard """
This program is about playing a very simple game: guess a randomly generated number!
"""

from math import random, randomize
from strutils import parseInt

# make sure that the seed is randomized
randomize()

# keep playing the game until the user wants to quit
var rand_val: int
var raw_user_val: string
var user_val: int
while true:
    # pick the number
    rand_val = random(10) + 1 # +1 because it's 0 to max-1

    # ask the user for the number
    echo("Please guess a number between 1 and 10 [q to quit]")
    raw_user_val = readLine(stdin)

    # check to see if the user would like to quit
    if raw_user_val == "q":
        break;

    # make sure the number is an integer
    try:
        user_val = parseInt(raw_user_val)
    except EInvalidValue:
        continue

    # make sure the value is between 1 and 10, inclusive
    if user_val &lt; 1 or user_val &gt; 10:
        continue;

    # check to see if it is the same
    if user_val == rand_val:
        echo("Yay! You Guessed It!")
    else:
        echo("You FAIL!")</pre>
</div>
</div>
<div class="paragraph">
<p>The very first line in this example shows off something I find very interesting.
<code>discard</code> is required so that the compiler ignores things like unused return
values. BUT it can also be used like a multi-line comment by simply discarding
an unassigned multi-line string value.</p>
</div>
<div class="paragraph">
<p>Why is this the way multi-line comments are done? Well, because even regular
single-line comments in Nim are part of the syntax tree, and aren&#8217;t just discarded
during parsing!</p>
</div>
<div class="paragraph">
<p>Progressing through this (very simplistic and not representative) program,
you&#8217;d almost think you were looking at Python, with a few weird function calls
and some type annotations on variables. This makes it very easy for me to
start reading and understanding&#8230;&#8203; not to mention guess at some of the syntax
structure I don&#8217;t already know.</p>
</div>]]></summary>
        <updated>Sun Nov 02 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-11-nim-language</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[A New Lanugage]]></title>
        <link>http://joelkleier.com/blog/2014-11-a-new-language</link>
        <summary><![CDATA[<div class="paragraph">
<p>I since September, <a href="http://number-none.com/blow/">Jonathan Blow</a>, well known for
<a href="http://braid-game.com/"><em>Braid</em></a> and the upcoming <a href="http://the-witness.net/"><em>The Witness</em></a>,
has been publishing <a href="https://www.youtube.com/playlist?list=PLmV5I2fxaiCKfxMBrNsU1kgKJXD3PkyxO">video "lectures"</a>
discussing his desire to create a language that <em>he</em> likes, specifically for games.</p>
</div>
<div class="paragraph">
<p>They&#8217;re long videos, but his informal presentation is very interesting, and more
conversational than what you&#8217;d get if it were a more precisly planned and timed
lecture or presentation. The tone he takes is refreshing&#8201;&#8212;&#8201;and his attitude towards
building something he wants is inspiring.</p>
</div>
<div class="paragraph">
<p>I look forward to seeing what other ideas he wants to tackle with this language,
and hope he decides to share the code, or at least binaries, for the compiler
sooner rather than later.</p>
</div>]]></summary>
        <updated>Sat Nov 01 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-11-a-new-language</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[FirefoxOS and Ubuntu Phone]]></title>
        <link>http://joelkleier.com/blog/2014-10-mobile-os</link>
        <summary><![CDATA[<div class="paragraph">
<p>Mobile devices are quickly taking over the world. We communicate to each other
in all sorts of ways that once were limited to desktop computers and audio-only
point-to-point connections. We broadcast, share, and hold conversations&#8201;&#8212;&#8201;between
just two people up to thousands, or millions of people. Maybe more. We are living
in an era where <em>anyone</em> (with an internet connection) can potentially
communicate to the <em>entire</em> human population, all at once, for, basically, free.
From a device we carry in our pockets.</p>
</div>
<div class="paragraph">
<p>And I am <em>very</em> happy with all the big players in mobile, pushing this sort of
tech to heights that are truley amazing.</p>
</div>
<div class="paragraph">
<p>To get more out of it, though, we need truly free and open alternatives so that
these devices can push boundaries in ways the current options cannot.</p>
</div>
<div class="paragraph">
<p>This is where <a href="https://www.mozilla.org/en-US/firefox/os/"><em>FirefoxOS</em></a> and
<a href="http://www.ubuntu.com/phone"><em>Ubuntu Phone</em></a> come into play. These operating systems
may never be "bigger" than Android or iOS in terms of market penetration, but
what they represent, and what they allow people to do is none-the-less important.</p>
</div>
<div class="paragraph">
<p>FirefoxOS is pushing into low-end markets and trying to make a phone that can
get people onto a web-enabled platform in the same price range as their classic
phones. It&#8217;s very open, and promotes an open culture&#8201;&#8212;&#8201;more than that, it promotes
a <em>web</em> culture. At the same time, it&#8217;s pushing technical boundaries for browsers
by implementing and helping to standardize API&#8217;s for accessing all sorts of native
device features.</p>
</div>
<div class="paragraph">
<p>Ubuntu Phone, on the other hand, is trying to bring a fully open source OS into
the mobile marketplace, but doesn&#8217;t seem to be focusing on the low-end market or
the web, like FirefoxOS.</p>
</div>
<div class="paragraph">
<p>Instead, Canonical seems to view the mobile space as having the same problems as
the desktop space&#8201;&#8212;&#8201;no good, free libre open source operating systems with completely
open development processes. AND they see a future where mobile devices start
converging into desktop-level computers&#8201;&#8212;&#8201;having a different UI&#8217;s depending on
how they&#8217;re being used. IE a touch based UI for mobile use, and a desktop UI for
when it&#8217;s docked and paired to monitors, keyboards, and mice.</p>
</div>
<div class="paragraph">
<p>The idea of this convergence may not be Canonicals highest priority with the
failure of the Edge in 2013, but idea is still there. I can&#8217;t wait until it
becomes reality.</p>
</div>
<div class="paragraph">
<p>It may not happen right away, it probably won&#8217;t replace desktops and
laptops completely, it may not be very good when it first starts to really happen, and,
heck, it may fail once or twice. But it will happen. The concept of carrying around
a fully functional computer in our pockets already exists&#8201;&#8212;&#8201;the next step
is to make that computer <em>more</em> connectable and <em>more</em> useable for creative
tasks.</p>
</div>
<div class="paragraph">
<p>The future is awesome, and I think FirefoxOS and Ubuntu will play a huge role
in the future, whether or not they have large marketshare.</p>
</div>]]></summary>
        <updated>Fri Oct 31 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-mobile-os</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[Asciidoc + Metalsmith]]></title>
        <link>http://joelkleier.com/blog/2014-10-asciidoc-plus-metalsmith</link>
        <summary><![CDATA[<div class="paragraph">
<p>I <em>love</em> metalsmith. It&#8217;s <strong>so</strong> easy to integrate extensions when they&#8217;re just
middleware for reading and writing files. Very flexible&#8201;&#8212;&#8201;mind bending at times,
perhaps a small challenge to debug occassionally, but really cool.</p>
</div>
<div class="paragraph">
<p>And so, this is my first post using <a href="http://www.methods.co.nz/asciidoc/">AsciiDoc</a>
to format the source text of my post, and <a href="https://github.com/asciidoctor/asciidoctor.js">AsciiDoctor.js</a>
do perform the actual conversion to HTML.</p>
</div>
<div class="paragraph">
<p>We&#8217;ll see how it goes! I may not proceed with it&#8217;s usage, but it does provide
some clear advantages over markdown. The downside, though, I don&#8217;t think the
tooling for asciidoc is quite as ubiquitous as markdown.</p>
</div>
<div class="paragraph">
<p>As for the actual integration with metalsmith, I just created a plugin based on
the <a href="https://github.com/segmentio/metalsmith-markdown/blob/master/lib/index.js"><em>metalsmith-markdown</em> plugin</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>var basename = require('path').basename;
var dirname = require('path').dirname;
var extname = require('path').extname;
var asciidoctor = require('asciidoctor.js')();
var opal = asciidoctor.Opal;
var asciidoc_processor = asciidoctor.Asciidoctor(true); // without extensions, pass 'true' for extensions

function is_asciidoc(filename) {
    return /\.adoc/.test(extname(filename));
}

var asciidoc = function(config) {
    config = config || {};
    var keys = config.keys || [];

    return function(files, metalsmith, done) {
        setImmediate(done);
        Object.keys(files).forEach(function(file){
            if(!is_asciidoc(file)) return;
            var data = files[file];
            var dir = dirname(file);
            var html = basename(file, extname(file)) + '.html';
            if('.' != dir) html = dir + '/' + html;

            var options = opal.hash2(
                ['doctype', 'attributes'],
                {doctype:'article', attributes: ['showtitle']});
            var str = asciidoc_processor.$convert(data.contents.toString(), options);
            data.contents = new Buffer(str);
            keys.forEach(function(key){
                data[key] = asciidoc_processor.$convert(data[key], options);
            });

            delete files[file];
            files[html] = data;
        });
    };
};</pre>
</div>
</div>
<div class="paragraph">
<p>The <code>config</code> options aren&#8217;t really used when you instantiate the plugin&#8230;&#8203; but one
step at a time. I still have to figure out how to effectively add the <code>config</code>
options to the <code>options</code> passed into the <code>asciidoc_processor</code>, which I haven&#8217;t
done yet, because I ran out of time to work on it for the moment, and it&#8217;s kinda
low priority for me.</p>
</div>
<div class="paragraph">
<p>I&#8217;m still using yaml front-matter in my source documents, which is kinda not how
asciidoc is intended to have metadata, but it works for my purposes and means
I don&#8217;t have to change anything else right now!</p>
</div>]]></summary>
        <updated>Thu Oct 30 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-asciidoc-plus-metalsmith</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
    <entry>
        <title><![CDATA[David Revoy]]></title>
        <link>http://joelkleier.com/blog/2014-10-david-revoy</link>
        <summary><![CDATA[<p><a href="http://www.davidrevoy.com/" title="David Revoy: illustrator, concept-artist">David Revoy</a> works mostly as a digital artist doing illustrations. I find his
work inspiring -- both as an artist, and as an open source enthusiast.</p>
<p>He&#39;s worked on three of the open movies produced by the Blender Foundation in
their <a href="http://www.blender.org/features/projects/" title="Blender: Open Projects">&quot;Open Projects&quot;</a> -- an attempt to make short feature films with 100%
open source software.</p>
<p>He also spends a lot of time helping out the <a href="https://krita.org/" title="KRITA">Krita</a> and <a href="http://mypaint.intilinux.com/" title="MyPaint">mypaint</a> open
source illustration/painting/drawing tools.</p>
]]></summary>
        <updated>Wed Oct 29 2014 00:00:00 GMT-0500 (CDT)</updated>
        <id>http://joelkleier.com/blog/2014-10-david-revoy</id>
        <author><name>Joel Kleier</name><email>joel@kleier.us</email></author>
    </entry>
</feed>
